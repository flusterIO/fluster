
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
/**
 * This wraps a series of functions handled by the fluster_native_interface package, conditionally
 * based on user settings and app state.
 */
async syncLocalDatabase(opts: SyncFilesystemDirectoryOptions, onError: TAURI_CHANNEL<FlusterError>) : Promise<void> {
    await TAURI_INVOKE("sync_local_database", { opts, onError });
},
async getDashboardData() : Promise<DashboardData> {
    return await TAURI_INVOKE("get_dashboard_data");
}
}

/** user-defined events **/


export const events = __makeEvents__<{
setDbConnectionUri: SetDbConnectionUri,
showToast: ShowToast
}>({
setDbConnectionUri: "set-db-connection-uri",
showToast: "show-toast"
})

/** user-defined constants **/



/** user-defined types **/

export type DashboardData = Record<string, never>
export type DictionaryEntry = { label: string; body: string }
export type FlusterError = "NotImplemented" | "SettingsBibPathNotFound" | "CannotParseBibfile" | "FailToConnect" | "FailToCreateEntity" | "FailToFind" | "FailToFindById" | { DataDirNotFound: [] } | "FailToCreatePath" | "FailToCreateTag" | "FailToCreateSubject" | "FailToCreateTopic" | "FailToLocateStorageDir" | { FailToReadFileSystemPath: string } | { MdxParsingError: string } | { NoTitleError: string } | { AttemptedToParseFileWasntFound: string } | { FailToSaveMdxNote: string } | 
/**
 * Taggables
 * 
 */
"FailToUpsertTags"
export type SetDbConnectionUri = { uri: string }
export type ShowToast = { title: string; body: string; duration: number; variant: ToastVariant }
export type SnippetItem = { id: number | null; label: string; body: string; desc: string; lang: SyntaxSupportedLanguage }
export type SyncFilesystemDirectoryOptions = { dir_path: string; bib_path: string | null; n_threads: number }
export type SyntaxSupportedLanguage = "Ts" | "Typescript" | "Javascript" | "Go" | "Lua" | "Markdown" | "Mdx"
export type ToastVariant = "Success" | "Info" | "Error"

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
