
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getTextSimilarity(a: string, b: string) : Promise<number> {
    return await TAURI_INVOKE("get_text_similarity", { a, b });
},
/**
 * This wraps a series of functions handled by the fluster_native_interface package, conditionally
 * based on user settings and app state.
 */
async syncLocalDatabase(opts: SyncFilesystemDirectoryOptions) : Promise<Result<null, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("sync_local_database", { opts }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getDashboardData() : Promise<DashboardData> {
    return await TAURI_INVOKE("get_dashboard_data");
},
/**
 * Note that the values are all in array's and that tags is a 2d array. This is so that for each
 * index in the snippets array, there is an array at that index in the tags array with the tags
 * the snippet at that index contains.
 * While it's weird to think about a database's data in this way, this very similar to how pandas and
 * polars handle their data.
 */
async saveSnippets(items: SnippetModel[], tags: string[][]) : Promise<Result<null, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_snippets", { items, tags }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSnippets(opts: GetSnippetsParams) : Promise<Result<SnippetModel[], FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_snippets", { opts }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteSnippetById(id: string) : Promise<Result<null, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_snippet_by_id", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSnippetById(id: string) : Promise<Result<[SnippetModel, SharedTaggableModel[]], FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_snippet_by_id", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * This method is used when the search param fsPath is set. This is similar to the way the app
 * worked in the previous rendtion when 'prefer fs' was enabled by the user.
 */
async readMdxFromFs(fsPath: string) : Promise<Result<MdxNoteGroup, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("read_mdx_from_fs", { fsPath }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async saveUtf8File(fsPath: string, fileContent: string) : Promise<Result<null, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_utf8_file", { fsPath, fileContent }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async readUtf8File(fsPath: string) : Promise<Result<string, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("read_utf8_file", { fsPath }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getEmbeddedDoc(id: InternalEmbeddedDocsId) : Promise<string> {
    return await TAURI_INVOKE("get_embedded_doc", { id });
},
async getDesktopHealthReport() : Promise<DesktopHealthReport> {
    return await TAURI_INVOKE("get_desktop_health_report");
},
/**
 * Returns the string which points the location of mathjax that needs to be passed to the front
 * end. This is the location that mathjax is copied *to*, not from.
 */
async getMathjaxPath() : Promise<MathjaxData> {
    return await TAURI_INVOKE("get_mathjax_path");
},
async deleteSettingState(settingsId: string) : Promise<Result<null, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_setting_state", { settingsId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async saveSettingState(jsonString: string, settingsId: string) : Promise<Result<null, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_setting_state", { jsonString, settingsId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSettingState(settingsId: string) : Promise<Result<string, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_setting_state", { settingsId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async initializeDatabase() : Promise<Result<null, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("initialize_database") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async initializeDesktop() : Promise<Result<null, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("initialize_desktop") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getDictionaryEntries() : Promise<Result<DictionaryEntryModel[], FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_dictionary_entries") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async saveEquations(data: EquationModel[]) : Promise<Result<null, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_equations", { data }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getEquationById(id: string) : Promise<Result<EquationModel, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_equation_by_id", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteEquationById(id: string) : Promise<Result<null, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_equation_by_id", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getEquations() : Promise<Result<EquationModel[], FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_equations") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getUniqueId() : Promise<string> {
    return await TAURI_INVOKE("get_unique_id");
},
async readMathjaxFontFile(subPath: string) : Promise<Result<string, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("read_mathjax_font_file", { subPath }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async readMathjax(subPath: string) : Promise<Result<string, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("read_mathjax", { subPath }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getNoteSummaries(pagination: PaginationProps) : Promise<Result<NoteSummary[], FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_note_summaries", { pagination }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async readMdxFile(filePath: string) : Promise<Result<MdxNoteGroup, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("read_mdx_file", { filePath }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async writeFile(filePath: string, content: string) : Promise<Result<null, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("write_file", { filePath, content }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getBibEntries(predicate: string | null, pagination: PaginationProps) : Promise<Result<BibEntryModel[], FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_bib_entries", { predicate, pagination }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getQrCodeSvg(content: string) : Promise<Result<string, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_qr_code_svg", { content }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/


export const events = __makeEvents__<{
setDbConnectionUri: SetDbConnectionUri,
showToast: ShowToast
}>({
setDbConnectionUri: "set-db-connection-uri",
showToast: "show-toast"
})

/** user-defined constants **/



/** user-defined types **/

export type BibEntryModel = { id: string; user_provided_id: string | null; 
/**
 * The json string representing this item's data.
 */
data: string; ctime: string }
export type DashboardData = Record<string, never>
export type DesktopHealthReport = { database_tables_exist: boolean; 
/**
 * This boolean describes the overall health of the desktop app. If any inidividual field
 * that warrents re-initializing is false, this field will be false.
 */
healthy: boolean }
export type DictionaryEntryModel = { label: string; body: string; ctime: string }
export type EquationModel = { 
/**
 * This is the traditional id field, generated by uuid.
 */
id: string; 
/**
 * The equation_id field is the 'id' field as provided from the user. This is used to
 * reference equations throughout their notes in a way that makes sense to the user as
 * opposed to an arbitrary string.
 */
equation_id: string | null; 
/**
 * The title or label for the equation.
 */
label: string; 
/**
 * The equation latex string.
 */
body: string; desc: string; 
/**
 * Time snippet is initially created.
 */
ctime: string; 
/**
 * Time snippet is last updated.
 */
utime: string }
export type FlusterError = "FailToCreateQrCode" | "NotImplemented" | "FailToCopyFiles" | "FailToWriteFile" | "FailToSaveSettings" | "FailToReadSettings" | "FailToParseBibFile" | "SettingsBibPathNotFound" | "CannotParseBibfile" | "FailToFindDataDirectory" | "FailToSerialize" | "DuplicateId" | "FailToDelete" | "FailToClean" | "FailToCreateTable" | "FailToOpenTable" | "FailToConnect" | "FailToStartDb" | "FailToStopDb" | "FailToCreateEntity" | "FailToCreateSnippet" | "FailToFind" | "FailToFindById" | "FailToCreatePath" | "FailToCreateTag" | "FailToCreateSubject" | { DataDirNotFound: [] } | { FailToClearDirectory: string } | "FailToCreateTopic" | "FailToLocateStorageDir" | { FailToReadFileSystemPath: string } | "FailToReadMathjaxFont" | { FailToSaveFile: string } | { MdxParsingError: string } | { NoTitleError: string } | { AttemptedToParseFileWasntFound: string } | { FailToSaveMdxNote: string } | 
/**
 * Taggables
 * 
 */
"FailToUpsertTags"
/**
 * This model mirrors the structure of the front matter as it appears in a user's note, where the
 * nested entities represent the data as it is stored in the database. This model should handle
 * all parsing and saving of all nested models.
 */
export type FrontMatterModel = { mdx_note_file_path: string; 
/**
 * The user_provided_id is the id field as it appears in the user's note.  The id field in
 * this struct is generated by Surreal.
 */
user_provided_id: string | null; title: string; summary: string | null; tags: SharedTaggableModel[]; subject: SharedTaggableModel | null; topic: SharedTaggableModel | null; list_id: string | null; list_index: string | null }
export type GetSnippetsParams = { langs: string[] | null }
export type InternalEmbeddedDocsId = 
/**
 * This is the super general public version of the model, designed to peak interest, not
 * prove the model.
 */
"ModelIntro" | 
/**
 * This is the somewhat academic version of the model. Not fully peer-review worthy, but
 * who gives a shit. It's right.
 */
"ModelFull" | 
/**
 * How to contribute
 */
"HowToContribute"
export type MathjaxData = { root: string; main_path: string; font_path: string }
export type MdxNoteGroup = { mdx: MdxNoteModel; front_matter: FrontMatterModel; tags: SharedTaggableModel[]; equation_ids: string[] }
export type MdxNoteModel = { 
/**
 * create a new model. This file_path becomes essentially the primary key.
 */
file_path: string; raw_body: string; ctime: string; 
/**
 * This field is updated each time a note is accessed in milliseconds.
 */
last_read: string }
export type NoteSummary = { title: string; file_path: string }
export type PaginationProps = { per_page: number; page_number: number }
export type SearchOrder = "Created"
export type SearchParams = { order: SearchOrder | null; per_page: number | null; page: number | null }
export type SetDbConnectionUri = { uri: string }
export type SharedTaggableModel = { value: string; ctime: string }
export type ShowToast = { title: string; body: string; duration: number; variant: ToastVariant; 
/**
 * id is required to allow items to be removed reliably. It just needs to be unique.
 */
id: string }
/**
 * The SnippetModel is the snippet representation that is passed back and forth across language
 * boundries to get around serialization issues with the SnippetEntity methods.
 */
export type SnippetModel = { id: string | null; 
/**
 * A title or label for the snippet.
 */
label: string; 
/**
 * The code the snippet contains.
 */
body: string; 
/**
 * An optional short description.
 */
desc: string | null; 
/**
 * THe language of the snippet.
 */
lang: string; 
/**
 * The time the snippet was created.
 */
ctime: string; 
/**
 * The time the snippet was last updated.
 */
utime: string }
export type SyncFilesystemDirectoryOptions = { dir_path: string; bib_path: string | null; n_threads: number }
export type ToastVariant = "Success" | "Info" | "Error"

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
