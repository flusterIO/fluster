
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
/**
 * This wraps a series of functions handled by the fluster_native_interface package, conditionally
 * based on user settings and app state.
 */
async syncLocalDatabase(opts: SyncFilesystemDirectoryOptions, onError: TAURI_CHANNEL<FlusterError>) : Promise<void> {
    await TAURI_INVOKE("sync_local_database", { opts, onError });
},
async getDashboardData() : Promise<DashboardData> {
    return await TAURI_INVOKE("get_dashboard_data");
},
/**
 * Note that the values are all in array's and that tags is a 2d array. This is so that for each
 * index in the snippets array, there is an array at that index in the tags array with the tags
 * the snippet at that index contains.
 * While it's weird to think about a database's data in this way, this very similar to how pandas and
 * polars handle their data.
 */
async saveSnippets(items: SnippetModel[], tags: string[][]) : Promise<Result<null, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_snippets", { items, tags }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSnippets(opts: GetSnippetsParams) : Promise<Result<SnippetModel[], FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_snippets", { opts }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteSnippetById(id: number) : Promise<Result<null, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_snippet_by_id", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSnippetById(id: string) : Promise<Result<[SnippetModel, SharedTaggableModel[]], FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_snippet_by_id", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * This method is used when the search param fsPath is set. This is similar to the way the app
 * worked in the previous rendtion when 'prefer fs' was enabled by the user.
 */
async readMdxFromFs(fsPath: string) : Promise<Result<MdxNoteGroup, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("read_mdx_from_fs", { fsPath }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async saveUtf8File(fsPath: string, fileContent: string) : Promise<Result<null, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_utf8_file", { fsPath, fileContent }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async readUtf8File(fsPath: string) : Promise<Result<string, FlusterError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("read_utf8_file", { fsPath }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/


export const events = __makeEvents__<{
setDbConnectionUri: SetDbConnectionUri,
showToast: ShowToast
}>({
setDbConnectionUri: "set-db-connection-uri",
showToast: "show-toast"
})

/** user-defined constants **/



/** user-defined types **/

export type DashboardData = Record<string, never>
export type DictionaryEntry = { label: string; body: string }
export type FlusterError = "NotImplemented" | "SettingsBibPathNotFound" | "CannotParseBibfile" | "FailToSerialize" | "DuplicateId" | "FailToDelete" | "FailToCreateTable" | "FailToOpenTable" | "FailToConnect" | "FailToInstallDatabaseDeps" | "FailToStartDb" | "FailToStopDb" | "FailToCreateEntity" | "FailToCreateSnippet" | "FailToFind" | "FailToFindById" | "FailToCreatePath" | "FailToCreateTag" | "FailToCreateSubject" | { DataDirNotFound: [] } | { FailToClearDirectory: string } | "FailToCreateTopic" | "FailToLocateStorageDir" | { FailToReadFileSystemPath: string } | { FailToSaveFile: string } | { MdxParsingError: string } | { NoTitleError: string } | { AttemptedToParseFileWasntFound: string } | { FailToSaveMdxNote: string } | 
/**
 * Taggables
 * 
 */
"FailToUpsertTags"
/**
 * This model mirrors the structure of the front matter as it appears in a user's note, where the
 * nested entities represent the data as it is stored in the database. This model should handle
 * all parsing and saving of all nested models.
 */
export type FrontMatter = { id: string | null; 
/**
 * The user_provided_id is the id field as it appears in the user's note.  The id field in
 * this struct is generated by Surreal.
 */
user_provided_id: string | null; title: string; summary: string | null; tags: SharedTaggableModel[]; subject: SharedTaggableModel | null; topic: SharedTaggableModel | null }
export type GetSnippetsParams = { langs: string[] | null }
export type MdxNote = { id: string | null; raw_body: string; file_path: string | null; ctime: string | null; mtime: string | null; atime: string | null }
export type MdxNoteGroup = { mdx: MdxNote; front_matter: FrontMatter; tags: SharedTaggableModel[] }
export type SetDbConnectionUri = { uri: string }
export type SharedTaggableModel = { value: string; ctime: string }
export type ShowToast = { title: string; body: string; duration: number; variant: ToastVariant; 
/**
 * id is required to allow items to be removed reliably. It just needs to be unique.
 */
id: string }
/**
 * The SnippetModel is the snippet representation that is passed back and forth across language
 * boundries to get around serialization issues with the SnippetEntity methods.
 */
export type SnippetModel = { id: string | null; 
/**
 * A title or label for the snippet.
 */
label: string; 
/**
 * The code the snippet contains.
 */
body: string; 
/**
 * An optional short description.
 */
desc: string | null; 
/**
 * THe language of the snippet.
 */
lang: string; 
/**
 * The time the snippet was created.
 */
ctime: string | null; 
/**
 * The time the snippet was last updated.
 */
utime: string | null }
export type SyncFilesystemDirectoryOptions = { dir_path: string; bib_path: string | null; n_threads: number }
export type ToastVariant = "Success" | "Info" | "Error"

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
