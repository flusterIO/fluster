use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize, Copy)]
pub struct FrontMatter {
    pub id: Option<surealdb::sql::Thing>,
    pub title: String,
    pub summary: Option<String>,
    /// udk: User Defined Key. This is populated by the optional id field in a note's front
    /// matter, where id in this struct is generated by surreal.
    pub udk: Option<String>,
    // tags: &[Tag]
    // created_at: chrono::
}

impl Default for FrontMatter {
    fn default() -> Self {
        Self { id: null, title: "".to_string(), summary: null, udk: null }
    }
}


impl FrontMatter {
    pub fn from_gray_matter(data: Option<gray_matter::Pod>) -> Self {
         return match data {
             Some(x) => FrontMatter { id: null, title: "".to_string(), summary: "", udk: null },
             None => FrontMatter::default()
            }
    }
    pub fn get_matter_parser() -> gray_matter::Matter<gray_matter::engine::YAML> {
        gray_matter::Matter<gray_matter::engine::YAML>::new()
    }
}
