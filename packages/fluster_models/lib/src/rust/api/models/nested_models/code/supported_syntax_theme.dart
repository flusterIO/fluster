// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`

/// Themes generated from shiki.
enum SupportedSyntaxTheme {
  andromeeda,
  auroraX,
  ayuDark,
  catppuccinFrappe,
  catppuccinLatte,
  catppuccinMacchiato,
  catppuccinMocha,
  darkPlus,
  dracula,
  draculaSoft,
  everforestDark,
  everforestLight,
  githubDark,
  githubDarkDefault,
  githubDarkDimmed,
  githubDarkHighContrast,
  githubLight,
  githubLightDefault,
  githubLightHighContrast,
  gruvboxDarkHard,
  gruvboxDarkMedium,
  gruvboxDarkSoft,
  gruvboxLightHard,
  gruvboxLightMedium,
  gruvboxLightSoft,
  houston,
  kanagawaDragon,
  kanagawaLotus,
  kanagawaWave,
  laserwave,
  lightPlus,
  materialTheme,
  materialThemeDarker,
  materialThemeLighter,
  materialThemeOcean,
  materialThemePalenight,
  minDark,
  minLight,
  monokai,
  nightOwl,
  nord,
  oneDarkPro,
  oneLight,
  plastic,
  poimandres,
  red,
  rosePine,
  rosePineDawn,
  rosePineMoon,
  slackDark,
  slackOchin,
  snazzyLight,
  solarizedDark,
  solarizedLight,
  synthwave84,
  tokyoNight,
  vesper,
  vitesseBlack,
  vitesseDark,
  vitesseLight;

  static Future<SupportedSyntaxTheme> default_() => RustLib.instance.api
      .crateApiModelsNestedModelsCodeSupportedSyntaxThemeSupportedSyntaxThemeDefault();
}
