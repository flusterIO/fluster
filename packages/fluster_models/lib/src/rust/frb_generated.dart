// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/embedded_ts.dart';
import 'api/models/bibliography/bib_file.dart';
import 'api/models/bibliography/citation.dart';
import 'api/models/bibliography/reading_list.dart';
import 'api/models/enums/parsable_file_extension.dart';
import 'api/models/enums/setting_page_ids.dart';
import 'api/models/equation/equation_model.dart';
import 'api/models/nested_models/code/supported_syntax_language.dart';
import 'api/models/nested_models/code/supported_syntax_theme.dart';
import 'api/models/nested_models/fluster_datetime/fluster_time.dart';
import 'api/models/notes/front_matter/front_matter_model.dart';
import 'api/models/notes/mdx/mdx_note.dart';
import 'api/models/params/cross_language_file_object.dart';
import 'api/models/params/sync_mdx_typescript_params.dart';
import 'api/models/settings/setting_page_id.dart';
import 'api/models/snippet/snippet_model.dart';
import 'api/models/taggable/tag_model.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 1597927215;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'fluster_models',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<EmbeddedFile?> crateApiEmbeddedTsEmbeddedTypescriptFilesGet({
    required String filePath,
  });

  OffsetDateTime
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorGetValue({
    required FlusterTime that,
  });

  void
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorSetValue({
    required FlusterTime that,
    required OffsetDateTime value,
  });

  Future<FlusterTime>
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeDefault();

  Future<FlusterTime?>
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeFromFileTime({
    FileTime? ft,
  });

  Future<FlusterTime>
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeNow();

  FlusterTime
  crateApiModelsBibliographyReadingListReadingListAutoAccessorGetCreatedAt({
    required ReadingList that,
  });

  String? crateApiModelsBibliographyReadingListReadingListAutoAccessorGetId({
    required ReadingList that,
  });

  String crateApiModelsBibliographyReadingListReadingListAutoAccessorGetLabel({
    required ReadingList that,
  });

  List<BibEntryEntity>
  crateApiModelsBibliographyReadingListReadingListAutoAccessorGetPapers({
    required ReadingList that,
  });

  void
  crateApiModelsBibliographyReadingListReadingListAutoAccessorSetCreatedAt({
    required ReadingList that,
    required FlusterTime createdAt,
  });

  void crateApiModelsBibliographyReadingListReadingListAutoAccessorSetId({
    required ReadingList that,
    String? id,
  });

  void crateApiModelsBibliographyReadingListReadingListAutoAccessorSetLabel({
    required ReadingList that,
    required String label,
  });

  void crateApiModelsBibliographyReadingListReadingListAutoAccessorSetPapers({
    required ReadingList that,
    required List<BibEntryEntity> papers,
  });

  Future<ReadingList> crateApiModelsBibliographyReadingListReadingListDefault();

  Future<BibEntryEntity>
  crateApiModelsBibliographyCitationBibEntryEntityDefault();

  Future<BibtexFile>
  crateApiModelsBibliographyBibFileBibtexFileFromFilesystemPath({
    required String fspath,
  });

  Future<BibtexFile>
  crateApiModelsBibliographyBibFileBibtexFileFromRawFileContent({
    required String fileContent,
  });

  Future<void> crateApiModelsBibliographyBibFileBibtexFileSaveEntries({
    required BibtexFile that,
    required FlusterDb db,
  });

  Future<CrossLanguageFile>
  crateApiModelsParamsCrossLanguageFileObjectCrossLanguageFileDefault();

  Future<EquationEntity>
  crateApiModelsEquationEquationModelEquationEntityDefault();

  Future<FrontMatterEntity>
  crateApiModelsNotesFrontMatterFrontMatterModelFrontMatterEntityDefault();

  Future<FrontMatterEntity>
  crateApiModelsNotesFrontMatterFrontMatterModelFrontMatterEntityFromGrayMatter({
    Pod? pod,
  });

  Future<KeymapSectionId>
  crateApiModelsEnumsSettingPageIdsKeymapSectionIdDefault();

  Future<MathLabelOption>
  crateApiModelsParamsSyncMdxTypescriptParamsMathLabelOptionDefault();

  Future<MdxNoteEntity>
  crateApiModelsNotesMdxMdxNoteMdxNoteEntityFromFileSystemPath({
    required String filePath,
  });

  Future<MdxNoteEntity>
  crateApiModelsNotesMdxMdxNoteMdxNoteEntityFromRawMdxString({
    required String rawFileContent,
    String? filePath,
  });

  Future<NoteType> crateApiModelsEnumsParsableFileExtensionNoteTypeDefault();

  Future<SettingPageId>
  crateApiModelsSettingsSettingPageIdSettingPageIdDefault();

  Future<Snippet> crateApiModelsSnippetSnippetModelSnippetDefault();

  Future<SupportedSyntaxLanguage>
  crateApiModelsNestedModelsCodeSupportedSyntaxLanguageSupportedSyntaxLanguageDefault();

  Future<SupportedSyntaxTheme>
  crateApiModelsNestedModelsCodeSupportedSyntaxThemeSupportedSyntaxThemeDefault();

  Future<TagFromContentResult> crateApiModelsTaggableTagModelTagFromMdxContent({
    required String rawContent,
  });

  Future<Tag> crateApiModelsTaggableTagModelTagFromString({
    required String val,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EmbeddedFile;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EmbeddedFile;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EmbeddedFilePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EmbeddedTypescriptFiles;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EmbeddedTypescriptFiles;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_EmbeddedTypescriptFilesPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FileTime;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FileTime;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FileTimePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterDb;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterDb;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FlusterDbPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FlusterErrorPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterTime;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterTime;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FlusterTimePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_OffsetDateTime;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_OffsetDateTime;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_OffsetDateTimePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PathBuf;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PathBuf;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PathBufPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Pod;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Pod;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PodPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ReadingList;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ReadingList;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ReadingListPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Thing;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Thing;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ThingPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<EmbeddedFile?> crateApiEmbeddedTsEmbeddedTypescriptFilesGet({
    required String filePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(filePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEmbeddedTsEmbeddedTypescriptFilesGetConstMeta,
        argValues: [filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEmbeddedTsEmbeddedTypescriptFilesGetConstMeta =>
      const TaskConstMeta(
        debugName: "EmbeddedTypescriptFiles_get",
        argNames: ["filePath"],
      );

  @override
  OffsetDateTime
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorGetValue({
    required FlusterTime that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorGetValueConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorGetValueConstMeta =>
      const TaskConstMeta(
        debugName: "FlusterTime_auto_accessor_get_value",
        argNames: ["that"],
      );

  @override
  void
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorSetValue({
    required FlusterTime that,
    required OffsetDateTime value,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime(
            value,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorSetValueConstMeta,
        argValues: [that, value],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorSetValueConstMeta =>
      const TaskConstMeta(
        debugName: "FlusterTime_auto_accessor_set_value",
        argNames: ["that", "value"],
      );

  @override
  Future<FlusterTime>
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeDefaultConstMeta =>
      const TaskConstMeta(debugName: "FlusterTime_default", argNames: []);

  @override
  Future<FlusterTime?>
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeFromFileTime({
    FileTime? ft,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
            ft,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeFromFileTimeConstMeta,
        argValues: [ft],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeFromFileTimeConstMeta =>
      const TaskConstMeta(
        debugName: "FlusterTime_from_file_time",
        argNames: ["ft"],
      );

  @override
  Future<FlusterTime>
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeNow() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeNowConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeNowConstMeta =>
      const TaskConstMeta(debugName: "FlusterTime_now", argNames: []);

  @override
  FlusterTime
  crateApiModelsBibliographyReadingListReadingListAutoAccessorGetCreatedAt({
    required ReadingList that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyReadingListReadingListAutoAccessorGetCreatedAtConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyReadingListReadingListAutoAccessorGetCreatedAtConstMeta =>
      const TaskConstMeta(
        debugName: "ReadingList_auto_accessor_get_created_at",
        argNames: ["that"],
      );

  @override
  String? crateApiModelsBibliographyReadingListReadingListAutoAccessorGetId({
    required ReadingList that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyReadingListReadingListAutoAccessorGetIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyReadingListReadingListAutoAccessorGetIdConstMeta =>
      const TaskConstMeta(
        debugName: "ReadingList_auto_accessor_get_id",
        argNames: ["that"],
      );

  @override
  String crateApiModelsBibliographyReadingListReadingListAutoAccessorGetLabel({
    required ReadingList that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyReadingListReadingListAutoAccessorGetLabelConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyReadingListReadingListAutoAccessorGetLabelConstMeta =>
      const TaskConstMeta(
        debugName: "ReadingList_auto_accessor_get_label",
        argNames: ["that"],
      );

  @override
  List<BibEntryEntity>
  crateApiModelsBibliographyReadingListReadingListAutoAccessorGetPapers({
    required ReadingList that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_bib_entry_entity,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyReadingListReadingListAutoAccessorGetPapersConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyReadingListReadingListAutoAccessorGetPapersConstMeta =>
      const TaskConstMeta(
        debugName: "ReadingList_auto_accessor_get_papers",
        argNames: ["that"],
      );

  @override
  void
  crateApiModelsBibliographyReadingListReadingListAutoAccessorSetCreatedAt({
    required ReadingList that,
    required FlusterTime createdAt,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
            createdAt,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyReadingListReadingListAutoAccessorSetCreatedAtConstMeta,
        argValues: [that, createdAt],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyReadingListReadingListAutoAccessorSetCreatedAtConstMeta =>
      const TaskConstMeta(
        debugName: "ReadingList_auto_accessor_set_created_at",
        argNames: ["that", "createdAt"],
      );

  @override
  void crateApiModelsBibliographyReadingListReadingListAutoAccessorSetId({
    required ReadingList that,
    String? id,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
            that,
            serializer,
          );
          sse_encode_opt_String(id, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyReadingListReadingListAutoAccessorSetIdConstMeta,
        argValues: [that, id],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyReadingListReadingListAutoAccessorSetIdConstMeta =>
      const TaskConstMeta(
        debugName: "ReadingList_auto_accessor_set_id",
        argNames: ["that", "id"],
      );

  @override
  void crateApiModelsBibliographyReadingListReadingListAutoAccessorSetLabel({
    required ReadingList that,
    required String label,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
            that,
            serializer,
          );
          sse_encode_String(label, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyReadingListReadingListAutoAccessorSetLabelConstMeta,
        argValues: [that, label],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyReadingListReadingListAutoAccessorSetLabelConstMeta =>
      const TaskConstMeta(
        debugName: "ReadingList_auto_accessor_set_label",
        argNames: ["that", "label"],
      );

  @override
  void crateApiModelsBibliographyReadingListReadingListAutoAccessorSetPapers({
    required ReadingList that,
    required List<BibEntryEntity> papers,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
            that,
            serializer,
          );
          sse_encode_list_bib_entry_entity(papers, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyReadingListReadingListAutoAccessorSetPapersConstMeta,
        argValues: [that, papers],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyReadingListReadingListAutoAccessorSetPapersConstMeta =>
      const TaskConstMeta(
        debugName: "ReadingList_auto_accessor_set_papers",
        argNames: ["that", "papers"],
      );

  @override
  Future<ReadingList>
  crateApiModelsBibliographyReadingListReadingListDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyReadingListReadingListDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyReadingListReadingListDefaultConstMeta =>
      const TaskConstMeta(debugName: "ReadingList_default", argNames: []);

  @override
  Future<BibEntryEntity>
  crateApiModelsBibliographyCitationBibEntryEntityDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bib_entry_entity,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyCitationBibEntryEntityDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyCitationBibEntryEntityDefaultConstMeta =>
      const TaskConstMeta(debugName: "bib_entry_entity_default", argNames: []);

  @override
  Future<BibtexFile>
  crateApiModelsBibliographyBibFileBibtexFileFromFilesystemPath({
    required String fspath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(fspath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bibtex_file,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibFileBibtexFileFromFilesystemPathConstMeta,
        argValues: [fspath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibFileBibtexFileFromFilesystemPathConstMeta =>
      const TaskConstMeta(
        debugName: "bibtex_file_from_filesystem_path",
        argNames: ["fspath"],
      );

  @override
  Future<BibtexFile>
  crateApiModelsBibliographyBibFileBibtexFileFromRawFileContent({
    required String fileContent,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(fileContent, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bibtex_file,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibFileBibtexFileFromRawFileContentConstMeta,
        argValues: [fileContent],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibFileBibtexFileFromRawFileContentConstMeta =>
      const TaskConstMeta(
        debugName: "bibtex_file_from_raw_file_content",
        argNames: ["fileContent"],
      );

  @override
  Future<void> crateApiModelsBibliographyBibFileBibtexFileSaveEntries({
    required BibtexFile that,
    required FlusterDb db,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_bibtex_file(that, serializer);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
            db,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibFileBibtexFileSaveEntriesConstMeta,
        argValues: [that, db],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibFileBibtexFileSaveEntriesConstMeta =>
      const TaskConstMeta(
        debugName: "bibtex_file_save_entries",
        argNames: ["that", "db"],
      );

  @override
  Future<CrossLanguageFile>
  crateApiModelsParamsCrossLanguageFileObjectCrossLanguageFileDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_cross_language_file,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsParamsCrossLanguageFileObjectCrossLanguageFileDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsParamsCrossLanguageFileObjectCrossLanguageFileDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "cross_language_file_default",
        argNames: [],
      );

  @override
  Future<EquationEntity>
  crateApiModelsEquationEquationModelEquationEntityDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_equation_entity,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsEquationEquationModelEquationEntityDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsEquationEquationModelEquationEntityDefaultConstMeta =>
      const TaskConstMeta(debugName: "equation_entity_default", argNames: []);

  @override
  Future<FrontMatterEntity>
  crateApiModelsNotesFrontMatterFrontMatterModelFrontMatterEntityDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_front_matter_entity,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsNotesFrontMatterFrontMatterModelFrontMatterEntityDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNotesFrontMatterFrontMatterModelFrontMatterEntityDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "front_matter_entity_default",
        argNames: [],
      );

  @override
  Future<FrontMatterEntity>
  crateApiModelsNotesFrontMatterFrontMatterModelFrontMatterEntityFromGrayMatter({
    Pod? pod,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
            pod,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_front_matter_entity,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsNotesFrontMatterFrontMatterModelFrontMatterEntityFromGrayMatterConstMeta,
        argValues: [pod],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNotesFrontMatterFrontMatterModelFrontMatterEntityFromGrayMatterConstMeta =>
      const TaskConstMeta(
        debugName: "front_matter_entity_from_gray_matter",
        argNames: ["pod"],
      );

  @override
  Future<KeymapSectionId>
  crateApiModelsEnumsSettingPageIdsKeymapSectionIdDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_keymap_section_id,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsEnumsSettingPageIdsKeymapSectionIdDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsEnumsSettingPageIdsKeymapSectionIdDefaultConstMeta =>
      const TaskConstMeta(debugName: "keymap_section_id_default", argNames: []);

  @override
  Future<MathLabelOption>
  crateApiModelsParamsSyncMdxTypescriptParamsMathLabelOptionDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_math_label_option,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsParamsSyncMdxTypescriptParamsMathLabelOptionDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsParamsSyncMdxTypescriptParamsMathLabelOptionDefaultConstMeta =>
      const TaskConstMeta(debugName: "math_label_option_default", argNames: []);

  @override
  Future<MdxNoteEntity>
  crateApiModelsNotesMdxMdxNoteMdxNoteEntityFromFileSystemPath({
    required String filePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(filePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_mdx_note_entity,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta:
            kCrateApiModelsNotesMdxMdxNoteMdxNoteEntityFromFileSystemPathConstMeta,
        argValues: [filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNotesMdxMdxNoteMdxNoteEntityFromFileSystemPathConstMeta =>
      const TaskConstMeta(
        debugName: "mdx_note_entity_from_file_system_path",
        argNames: ["filePath"],
      );

  @override
  Future<MdxNoteEntity>
  crateApiModelsNotesMdxMdxNoteMdxNoteEntityFromRawMdxString({
    required String rawFileContent,
    String? filePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(rawFileContent, serializer);
          sse_encode_opt_String(filePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_mdx_note_entity,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta:
            kCrateApiModelsNotesMdxMdxNoteMdxNoteEntityFromRawMdxStringConstMeta,
        argValues: [rawFileContent, filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNotesMdxMdxNoteMdxNoteEntityFromRawMdxStringConstMeta =>
      const TaskConstMeta(
        debugName: "mdx_note_entity_from_raw_mdx_string",
        argNames: ["rawFileContent", "filePath"],
      );

  @override
  Future<NoteType> crateApiModelsEnumsParsableFileExtensionNoteTypeDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_note_type,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsEnumsParsableFileExtensionNoteTypeDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsEnumsParsableFileExtensionNoteTypeDefaultConstMeta =>
      const TaskConstMeta(debugName: "note_type_default", argNames: []);

  @override
  Future<SettingPageId>
  crateApiModelsSettingsSettingPageIdSettingPageIdDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 29,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_setting_page_id,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsSettingsSettingPageIdSettingPageIdDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsSettingsSettingPageIdSettingPageIdDefaultConstMeta =>
      const TaskConstMeta(debugName: "setting_page_id_default", argNames: []);

  @override
  Future<Snippet> crateApiModelsSnippetSnippetModelSnippetDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 30,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_snippet,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiModelsSnippetSnippetModelSnippetDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiModelsSnippetSnippetModelSnippetDefaultConstMeta =>
      const TaskConstMeta(debugName: "snippet_default", argNames: []);

  @override
  Future<SupportedSyntaxLanguage>
  crateApiModelsNestedModelsCodeSupportedSyntaxLanguageSupportedSyntaxLanguageDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 31,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_supported_syntax_language,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsNestedModelsCodeSupportedSyntaxLanguageSupportedSyntaxLanguageDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNestedModelsCodeSupportedSyntaxLanguageSupportedSyntaxLanguageDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "supported_syntax_language_default",
        argNames: [],
      );

  @override
  Future<SupportedSyntaxTheme>
  crateApiModelsNestedModelsCodeSupportedSyntaxThemeSupportedSyntaxThemeDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 32,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_supported_syntax_theme,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsNestedModelsCodeSupportedSyntaxThemeSupportedSyntaxThemeDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNestedModelsCodeSupportedSyntaxThemeSupportedSyntaxThemeDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "supported_syntax_theme_default",
        argNames: [],
      );

  @override
  Future<TagFromContentResult> crateApiModelsTaggableTagModelTagFromMdxContent({
    required String rawContent,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(rawContent, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 33,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_tag_from_content_result,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiModelsTaggableTagModelTagFromMdxContentConstMeta,
        argValues: [rawContent],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiModelsTaggableTagModelTagFromMdxContentConstMeta =>
      const TaskConstMeta(
        debugName: "tag_from_mdx_content",
        argNames: ["rawContent"],
      );

  @override
  Future<Tag> crateApiModelsTaggableTagModelTagFromString({
    required String val,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(val, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 34,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_tag,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiModelsTaggableTagModelTagFromStringConstMeta,
        argValues: [val],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiModelsTaggableTagModelTagFromStringConstMeta =>
      const TaskConstMeta(debugName: "tag_from_string", argNames: ["val"]);

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EmbeddedFile => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EmbeddedFile => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EmbeddedTypescriptFiles => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EmbeddedTypescriptFiles => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FileTime => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FileTime => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterDb => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterDb => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterError => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterError => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterTime => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterTime => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_OffsetDateTime => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_OffsetDateTime => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_PathBuf => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_PathBuf => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Pod => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Pod => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ReadingList => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ReadingList => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Thing => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Thing => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing;

  @protected
  EmbeddedFile
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmbeddedFileImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EmbeddedTypescriptFiles
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmbeddedTypescriptFilesImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FileTime
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FileTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterError
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterTime
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OffsetDateTime
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OffsetDateTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PathBuf
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PathBufImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Pod
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PodImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReadingList
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReadingListImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Thing
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ThingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterTime
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReadingList
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReadingListImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterDb
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterDbImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterTime
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReadingList
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReadingListImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EmbeddedFile
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmbeddedFileImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EmbeddedTypescriptFiles
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmbeddedTypescriptFilesImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FileTime
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FileTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterDb
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterDbImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterError
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterTime
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OffsetDateTime
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OffsetDateTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PathBuf
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PathBufImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Pod
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PodImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReadingList
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReadingListImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Thing
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ThingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BibEntryEntity dco_decode_bib_entry_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return BibEntryEntity(
      id: dco_decode_opt_String(arr[0]),
      pdfPath: dco_decode_opt_String(arr[1]),
      read: dco_decode_bool(arr[2]),
      fields: dco_decode_String(arr[3]),
    );
  }

  @protected
  BibtexFile dco_decode_bibtex_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BibtexFile(
      path:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
            arr[0],
          ),
      entries: dco_decode_list_bib_entry_entity(arr[1]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  EmbeddedFile
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
      raw,
    );
  }

  @protected
  FileTime
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
      raw,
    );
  }

  @protected
  FlusterTime
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
      raw,
    );
  }

  @protected
  PathBuf
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
      raw,
    );
  }

  @protected
  Pod
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
      raw,
    );
  }

  @protected
  Thing
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
      raw,
    );
  }

  @protected
  BibtexFile dco_decode_box_autoadd_bibtex_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_bibtex_file(raw);
  }

  @protected
  CrossLanguageFile dco_decode_cross_language_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CrossLanguageFile(
      path: dco_decode_String(arr[0]),
      noteType: dco_decode_note_type(arr[1]),
    );
  }

  @protected
  EquationEntity dco_decode_equation_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return EquationEntity(
      id: dco_decode_opt_String(arr[0]),
      label: dco_decode_String(arr[1]),
      body: dco_decode_String(arr[2]),
      code: dco_decode_list_snippet(arr[3]),
    );
  }

  @protected
  FrontMatterEntity dco_decode_front_matter_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return FrontMatterEntity(
      id: dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
        arr[0],
      ),
      title: dco_decode_String(arr[1]),
      summary: dco_decode_opt_String(arr[2]),
      tags: dco_decode_list_tag(arr[3]),
      noteId: dco_decode_opt_String(arr[4]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  KeymapSectionId dco_decode_keymap_section_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeymapSectionId.values[raw as int];
  }

  @protected
  List<BibEntryEntity> dco_decode_list_bib_entry_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_bib_entry_entity).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<Snippet> dco_decode_list_snippet(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_snippet).toList();
  }

  @protected
  List<Tag> dco_decode_list_tag(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tag).toList();
  }

  @protected
  MathLabelOption dco_decode_math_label_option(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MathLabelOption.values[raw as int];
  }

  @protected
  MdxNoteEntity dco_decode_mdx_note_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return MdxNoteEntity(
      id: dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
        arr[0],
      ),
      frontMatter: dco_decode_front_matter_entity(arr[1]),
      rawBody: dco_decode_String(arr[2]),
      filePath: dco_decode_String(arr[3]),
      ctime:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
            arr[4],
          ),
      mtime:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
            arr[5],
          ),
      atime:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
            arr[6],
          ),
      tags: dco_decode_list_tag(arr[7]),
    );
  }

  @protected
  NoteType dco_decode_note_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NoteType.values[raw as int];
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  EmbeddedFile?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
            raw,
          );
  }

  @protected
  FileTime?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
            raw,
          );
  }

  @protected
  FlusterTime?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
            raw,
          );
  }

  @protected
  PathBuf?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
            raw,
          );
  }

  @protected
  Pod?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
            raw,
          );
  }

  @protected
  Thing?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
            raw,
          );
  }

  @protected
  SettingPageId dco_decode_setting_page_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SettingPageId.values[raw as int];
  }

  @protected
  Snippet dco_decode_snippet(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Snippet(
      label: dco_decode_String(arr[0]),
      language: dco_decode_supported_syntax_language(arr[1]),
      body: dco_decode_String(arr[2]),
      tags: dco_decode_list_tag(arr[3]),
    );
  }

  @protected
  SupportedSyntaxLanguage dco_decode_supported_syntax_language(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SupportedSyntaxLanguage.values[raw as int];
  }

  @protected
  SupportedSyntaxTheme dco_decode_supported_syntax_theme(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SupportedSyntaxTheme.values[raw as int];
  }

  @protected
  Tag dco_decode_tag(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Tag(value: dco_decode_String(arr[0]));
  }

  @protected
  TagFromContentResult dco_decode_tag_from_content_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TagFromContentResult(
      tags: dco_decode_list_tag(arr[0]),
      parsedContent: dco_decode_String(arr[1]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  EmbeddedFile
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmbeddedFileImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EmbeddedTypescriptFiles
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmbeddedTypescriptFilesImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FileTime
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FileTimeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterError
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterTime
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterTimeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  OffsetDateTime
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OffsetDateTimeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PathBuf
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PathBufImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Pod
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PodImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ReadingList
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReadingListImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Thing
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ThingImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterTime
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterTimeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ReadingList
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReadingListImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterDb
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterDbImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterTime
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterTimeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ReadingList
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReadingListImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EmbeddedFile
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmbeddedFileImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EmbeddedTypescriptFiles
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmbeddedTypescriptFilesImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FileTime
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FileTimeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterDb
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterDbImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterError
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterTime
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterTimeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  OffsetDateTime
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OffsetDateTimeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PathBuf
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PathBufImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Pod
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PodImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ReadingList
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReadingListImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Thing
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ThingImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BibEntryEntity sse_decode_bib_entry_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_String(deserializer);
    var var_pdfPath = sse_decode_opt_String(deserializer);
    var var_read = sse_decode_bool(deserializer);
    var var_fields = sse_decode_String(deserializer);
    return BibEntryEntity(
      id: var_id,
      pdfPath: var_pdfPath,
      read: var_read,
      fields: var_fields,
    );
  }

  @protected
  BibtexFile sse_decode_bibtex_file(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_path =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          deserializer,
        );
    var var_entries = sse_decode_list_bib_entry_entity(deserializer);
    return BibtexFile(path: var_path, entries: var_entries);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  EmbeddedFile
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
      deserializer,
    ));
  }

  @protected
  FileTime
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
      deserializer,
    ));
  }

  @protected
  FlusterTime
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
      deserializer,
    ));
  }

  @protected
  PathBuf
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
      deserializer,
    ));
  }

  @protected
  Pod
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
      deserializer,
    ));
  }

  @protected
  Thing
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
      deserializer,
    ));
  }

  @protected
  BibtexFile sse_decode_box_autoadd_bibtex_file(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bibtex_file(deserializer));
  }

  @protected
  CrossLanguageFile sse_decode_cross_language_file(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_path = sse_decode_String(deserializer);
    var var_noteType = sse_decode_note_type(deserializer);
    return CrossLanguageFile(path: var_path, noteType: var_noteType);
  }

  @protected
  EquationEntity sse_decode_equation_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_String(deserializer);
    var var_label = sse_decode_String(deserializer);
    var var_body = sse_decode_String(deserializer);
    var var_code = sse_decode_list_snippet(deserializer);
    return EquationEntity(
      id: var_id,
      label: var_label,
      body: var_body,
      code: var_code,
    );
  }

  @protected
  FrontMatterEntity sse_decode_front_matter_entity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
          deserializer,
        );
    var var_title = sse_decode_String(deserializer);
    var var_summary = sse_decode_opt_String(deserializer);
    var var_tags = sse_decode_list_tag(deserializer);
    var var_noteId = sse_decode_opt_String(deserializer);
    return FrontMatterEntity(
      id: var_id,
      title: var_title,
      summary: var_summary,
      tags: var_tags,
      noteId: var_noteId,
    );
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  KeymapSectionId sse_decode_keymap_section_id(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return KeymapSectionId.values[inner];
  }

  @protected
  List<BibEntryEntity> sse_decode_list_bib_entry_entity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BibEntryEntity>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_bib_entry_entity(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<Snippet> sse_decode_list_snippet(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Snippet>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_snippet(deserializer));
    }
    return ans_;
  }

  @protected
  List<Tag> sse_decode_list_tag(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Tag>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tag(deserializer));
    }
    return ans_;
  }

  @protected
  MathLabelOption sse_decode_math_label_option(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MathLabelOption.values[inner];
  }

  @protected
  MdxNoteEntity sse_decode_mdx_note_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
          deserializer,
        );
    var var_frontMatter = sse_decode_front_matter_entity(deserializer);
    var var_rawBody = sse_decode_String(deserializer);
    var var_filePath = sse_decode_String(deserializer);
    var var_ctime =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
          deserializer,
        );
    var var_mtime =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
          deserializer,
        );
    var var_atime =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
          deserializer,
        );
    var var_tags = sse_decode_list_tag(deserializer);
    return MdxNoteEntity(
      id: var_id,
      frontMatter: var_frontMatter,
      rawBody: var_rawBody,
      filePath: var_filePath,
      ctime: var_ctime,
      mtime: var_mtime,
      atime: var_atime,
      tags: var_tags,
    );
  }

  @protected
  NoteType sse_decode_note_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return NoteType.values[inner];
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  EmbeddedFile?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  FileTime?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  FlusterTime?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  PathBuf?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  Pod?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  Thing?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  SettingPageId sse_decode_setting_page_id(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SettingPageId.values[inner];
  }

  @protected
  Snippet sse_decode_snippet(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_label = sse_decode_String(deserializer);
    var var_language = sse_decode_supported_syntax_language(deserializer);
    var var_body = sse_decode_String(deserializer);
    var var_tags = sse_decode_list_tag(deserializer);
    return Snippet(
      label: var_label,
      language: var_language,
      body: var_body,
      tags: var_tags,
    );
  }

  @protected
  SupportedSyntaxLanguage sse_decode_supported_syntax_language(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SupportedSyntaxLanguage.values[inner];
  }

  @protected
  SupportedSyntaxTheme sse_decode_supported_syntax_theme(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SupportedSyntaxTheme.values[inner];
  }

  @protected
  Tag sse_decode_tag(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_String(deserializer);
    return Tag(value: var_value);
  }

  @protected
  TagFromContentResult sse_decode_tag_from_content_result(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tags = sse_decode_list_tag(deserializer);
    var var_parsedContent = sse_decode_String(deserializer);
    return TagFromContentResult(
      tags: var_tags,
      parsedContent: var_parsedContent,
    );
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    EmbeddedFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EmbeddedFileImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    EmbeddedTypescriptFiles self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EmbeddedTypescriptFilesImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    FileTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FileTimeImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    FlusterError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterErrorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    FlusterTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterTimeImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime(
    OffsetDateTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as OffsetDateTimeImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    PathBuf self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PathBufImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    Pod self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PodImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    ReadingList self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ReadingListImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    Thing self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ThingImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    FlusterTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterTimeImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    ReadingList self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ReadingListImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    FlusterDb self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterDbImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    FlusterTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterTimeImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    ReadingList self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ReadingListImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    EmbeddedFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EmbeddedFileImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    EmbeddedTypescriptFiles self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EmbeddedTypescriptFilesImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    FileTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FileTimeImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    FlusterDb self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterDbImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    FlusterError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterErrorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    FlusterTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterTimeImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime(
    OffsetDateTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as OffsetDateTimeImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    PathBuf self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PathBufImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    Pod self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PodImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    ReadingList self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ReadingListImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    Thing self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ThingImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bib_entry_entity(
    BibEntryEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.id, serializer);
    sse_encode_opt_String(self.pdfPath, serializer);
    sse_encode_bool(self.read, serializer);
    sse_encode_String(self.fields, serializer);
  }

  @protected
  void sse_encode_bibtex_file(BibtexFile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
      self.path,
      serializer,
    );
    sse_encode_list_bib_entry_entity(self.entries, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    EmbeddedFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    FileTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    FlusterTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    PathBuf self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    Pod self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    Thing self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
      self,
      serializer,
    );
  }

  @protected
  void sse_encode_box_autoadd_bibtex_file(
    BibtexFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bibtex_file(self, serializer);
  }

  @protected
  void sse_encode_cross_language_file(
    CrossLanguageFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.path, serializer);
    sse_encode_note_type(self.noteType, serializer);
  }

  @protected
  void sse_encode_equation_entity(
    EquationEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.id, serializer);
    sse_encode_String(self.label, serializer);
    sse_encode_String(self.body, serializer);
    sse_encode_list_snippet(self.code, serializer);
  }

  @protected
  void sse_encode_front_matter_entity(
    FrontMatterEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
      self.id,
      serializer,
    );
    sse_encode_String(self.title, serializer);
    sse_encode_opt_String(self.summary, serializer);
    sse_encode_list_tag(self.tags, serializer);
    sse_encode_opt_String(self.noteId, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_keymap_section_id(
    KeymapSectionId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_list_bib_entry_entity(
    List<BibEntryEntity> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_bib_entry_entity(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_snippet(List<Snippet> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_snippet(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tag(List<Tag> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tag(item, serializer);
    }
  }

  @protected
  void sse_encode_math_label_option(
    MathLabelOption self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_mdx_note_entity(
    MdxNoteEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
      self.id,
      serializer,
    );
    sse_encode_front_matter_entity(self.frontMatter, serializer);
    sse_encode_String(self.rawBody, serializer);
    sse_encode_String(self.filePath, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
      self.ctime,
      serializer,
    );
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
      self.mtime,
      serializer,
    );
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
      self.atime,
      serializer,
    );
    sse_encode_list_tag(self.tags, serializer);
  }

  @protected
  void sse_encode_note_type(NoteType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    EmbeddedFile? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    FileTime? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    FlusterTime? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    PathBuf? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    Pod? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    Thing? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
        self,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_setting_page_id(
    SettingPageId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_snippet(Snippet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.label, serializer);
    sse_encode_supported_syntax_language(self.language, serializer);
    sse_encode_String(self.body, serializer);
    sse_encode_list_tag(self.tags, serializer);
  }

  @protected
  void sse_encode_supported_syntax_language(
    SupportedSyntaxLanguage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_supported_syntax_theme(
    SupportedSyntaxTheme self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_tag(Tag self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_tag_from_content_result(
    TagFromContentResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_tag(self.tags, serializer);
    sse_encode_String(self.parsedContent, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class EmbeddedFileImpl extends RustOpaque implements EmbeddedFile {
  // Not to be used by end users
  EmbeddedFileImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EmbeddedFileImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_EmbeddedFile,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_EmbeddedFile,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_EmbeddedFilePtr,
  );
}

@sealed
class EmbeddedTypescriptFilesImpl extends RustOpaque
    implements EmbeddedTypescriptFiles {
  // Not to be used by end users
  EmbeddedTypescriptFilesImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EmbeddedTypescriptFilesImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_increment_strong_count_EmbeddedTypescriptFiles,
    rustArcDecrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_EmbeddedTypescriptFiles,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_EmbeddedTypescriptFilesPtr,
  );
}

@sealed
class FileTimeImpl extends RustOpaque implements FileTime {
  // Not to be used by end users
  FileTimeImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FileTimeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FileTime,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FileTime,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FileTimePtr,
  );
}

@sealed
class FlusterDbImpl extends RustOpaque implements FlusterDb {
  // Not to be used by end users
  FlusterDbImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FlusterDbImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FlusterDb,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterDb,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterDbPtr,
  );
}

@sealed
class FlusterErrorImpl extends RustOpaque implements FlusterError {
  // Not to be used by end users
  FlusterErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FlusterErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FlusterError,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterError,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterErrorPtr,
  );
}

@sealed
class FlusterTimeImpl extends RustOpaque implements FlusterTime {
  // Not to be used by end users
  FlusterTimeImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FlusterTimeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FlusterTime,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterTime,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterTimePtr,
  );

  OffsetDateTime get value => RustLib.instance.api
      .crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorGetValue(
        that: this,
      );

  set value(OffsetDateTime value) => RustLib.instance.api
      .crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorSetValue(
        that: this,
        value: value,
      );
}

@sealed
class OffsetDateTimeImpl extends RustOpaque implements OffsetDateTime {
  // Not to be used by end users
  OffsetDateTimeImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OffsetDateTimeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_OffsetDateTime,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_OffsetDateTime,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_OffsetDateTimePtr,
  );
}

@sealed
class PathBufImpl extends RustOpaque implements PathBuf {
  // Not to be used by end users
  PathBufImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PathBufImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PathBuf,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PathBuf,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PathBufPtr,
  );
}

@sealed
class PodImpl extends RustOpaque implements Pod {
  // Not to be used by end users
  PodImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PodImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Pod,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Pod,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PodPtr,
  );
}

@sealed
class ReadingListImpl extends RustOpaque implements ReadingList {
  // Not to be used by end users
  ReadingListImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ReadingListImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ReadingList,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ReadingList,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ReadingListPtr,
  );

  FlusterTime get createdAt => RustLib.instance.api
      .crateApiModelsBibliographyReadingListReadingListAutoAccessorGetCreatedAt(
        that: this,
      );

  String? get id => RustLib.instance.api
      .crateApiModelsBibliographyReadingListReadingListAutoAccessorGetId(
        that: this,
      );

  String get label => RustLib.instance.api
      .crateApiModelsBibliographyReadingListReadingListAutoAccessorGetLabel(
        that: this,
      );

  List<BibEntryEntity> get papers => RustLib.instance.api
      .crateApiModelsBibliographyReadingListReadingListAutoAccessorGetPapers(
        that: this,
      );

  set createdAt(FlusterTime createdAt) => RustLib.instance.api
      .crateApiModelsBibliographyReadingListReadingListAutoAccessorSetCreatedAt(
        that: this,
        createdAt: createdAt,
      );

  set id(String? id) => RustLib.instance.api
      .crateApiModelsBibliographyReadingListReadingListAutoAccessorSetId(
        that: this,
        id: id,
      );

  set label(String label) => RustLib.instance.api
      .crateApiModelsBibliographyReadingListReadingListAutoAccessorSetLabel(
        that: this,
        label: label,
      );

  set papers(List<BibEntryEntity> papers) => RustLib.instance.api
      .crateApiModelsBibliographyReadingListReadingListAutoAccessorSetPapers(
        that: this,
        papers: papers,
      );
}

@sealed
class ThingImpl extends RustOpaque implements Thing {
  // Not to be used by end users
  ThingImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ThingImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Thing,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Thing,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ThingPtr,
  );
}
