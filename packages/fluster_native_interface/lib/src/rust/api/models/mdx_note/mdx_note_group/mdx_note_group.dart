// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../../frb_generated.dart';
import '../../enums/taggable_type.dart';
import '../../front_matter/front_matter_entity.dart';
import '../../front_matter/front_matter_model.dart';
import '../../taggable/tag_model.dart';
import '../../taggable/taggable.dart';
import '../mdx_note_creatable.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `handle_fs_parse`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FlusterResult < MdxNoteGroup >>>
abstract class FlusterResultMdxNoteGroup implements RustOpaqueInterface {}

class MdxNoteGroup {
  final MdxNoteCreatable mdx;
  final FrontMatter frontMatter;
  final List<Taggable> tags;

  const MdxNoteGroup({
    required this.mdx,
    required this.frontMatter,
    required this.tags,
  });

  static Future<FlusterResultMdxNoteGroup> fromFileSystemPath({
    required String filePath,
  }) => RustLib.instance.api
      .crateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromFileSystemPath(
        filePath: filePath,
      );

  static Future<FlusterResultMdxNoteGroup> fromFileSystemPathAsync({
    required String filePath,
  }) => RustLib.instance.api
      .crateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromFileSystemPathAsync(
        filePath: filePath,
      );

  static Future<FlusterResultMdxNoteGroup> fromRawMdxString({
    required String rawFileContent,
    String? filePath,
  }) => RustLib.instance.api
      .crateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromRawMdxString(
        rawFileContent: rawFileContent,
        filePath: filePath,
      );

  @override
  int get hashCode => mdx.hashCode ^ frontMatter.hashCode ^ tags.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is MdxNoteGroup &&
          runtimeType == other.runtimeType &&
          mdx == other.mdx &&
          frontMatter == other.frontMatter &&
          tags == other.tags;
}
