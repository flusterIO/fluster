// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../../frb_generated.dart';
import '../../../../lib.dart';
import '../../bibliography/bib_file.dart';
import '../../nested_models/fluster_datetime/fluster_time.dart';
import '../../taggable/tag_model.dart';
import '../front_matter/front_matter_model.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`, `from_id_string`, `get_id`, `save`

class MdxNoteEntity {
  final Thing? id;
  final FrontMatterEntity frontMatter;

  /// raw_body is equivalent to the raw file content with the front matter removed.
  final String rawBody;

  /// File path relative to the user's root notes directory.
  final String filePath;

  /// Time that the file was created.
  final FlusterTime? ctime;

  /// Time that the file was last modified.
  final FlusterTime? mtime;

  /// Time that the file was last accessed.
  final FlusterTime? atime;

  /// Tags embedded within the note.
  final List<Tag> tags;

  const MdxNoteEntity({
    this.id,
    required this.frontMatter,
    required this.rawBody,
    required this.filePath,
    this.ctime,
    this.mtime,
    this.atime,
    required this.tags,
  });

  /// All paths must be validated to ensure that they exist **before** pasing them into this
  /// function.
  static Future<MdxNoteEntity> fromFileSystemPath({required String filePath}) =>
      RustLib.instance.api
          .crateApiModelsNotesMdxMdxNoteMdxNoteEntityFromFileSystemPath(
            filePath: filePath,
          );

  static Future<MdxNoteEntity> fromRawMdxString({
    required String rawFileContent,
    String? filePath,
  }) => RustLib.instance.api
      .crateApiModelsNotesMdxMdxNoteMdxNoteEntityFromRawMdxString(
        rawFileContent: rawFileContent,
        filePath: filePath,
      );

  @override
  int get hashCode =>
      id.hashCode ^
      frontMatter.hashCode ^
      rawBody.hashCode ^
      filePath.hashCode ^
      ctime.hashCode ^
      mtime.hashCode ^
      atime.hashCode ^
      tags.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is MdxNoteEntity &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          frontMatter == other.frontMatter &&
          rawBody == other.rawBody &&
          filePath == other.filePath &&
          ctime == other.ctime &&
          mtime == other.mtime &&
          atime == other.atime &&
          tags == other.tags;
}
