// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import '../../../lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `handle_arr_data`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `TagFromPodResult`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`

Future<Regex> getTagRegularExpression() =>
    RustLib.instance.api
        .crateApiModelsTaggableTaggableModelGetTagRegularExpression();

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ParsedEntity>>
abstract class ParsedEntity implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Regex>>
abstract class Regex implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Taggable>>
abstract class Taggable implements RustOpaqueInterface {
  TaggableTypeEnum get tagType;

  String get value;

  set tagType(TaggableTypeEnum tagType);

  set value(String value);

  static Future<TagFromContentResult> fromMdxContent({
    required ParsedEntity data,
  }) => RustLib.instance.api
      .crateApiModelsTaggableTaggableModelTaggableFromMdxContent(data: data);

  static Future<List<Taggable>> fromPodData({required ParsedEntity data}) =>
      RustLib.instance.api
          .crateApiModelsTaggableTaggableModelTaggableFromPodData(data: data);
}

class TagFromContentResult {
  final List<Taggable> tags;
  final String parsedContent;

  const TagFromContentResult({required this.tags, required this.parsedContent});

  @override
  int get hashCode => tags.hashCode ^ parsedContent.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TagFromContentResult &&
          runtimeType == other.runtimeType &&
          tags == other.tags &&
          parsedContent == other.parsedContent;
}
