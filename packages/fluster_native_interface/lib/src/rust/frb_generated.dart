// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/actions/front_matter/get_many.dart';
import 'api/actions/mdx_note/create.dart';
import 'api/actions/mdx_note/create_many.dart';
import 'api/actions/mdx_note/get_many.dart';
import 'api/actions/taggables/upsert_many.dart';
import 'api/data_interface/database/db.dart';
import 'api/data_interface/database/utils.dart';
import 'api/data_interface/get_database_status.dart';
import 'api/embedded_ts.dart';
import 'api/global_actions/get_summary_list/summary_list_query.dart';
import 'api/global_actions/get_summary_list/summary_list_result.dart';
import 'api/global_actions/parse_directory/sync_fs_directory/models/sync_filesystem_options.dart';
import 'api/global_actions/parse_directory/sync_fs_directory/sync_filesystem_directory.dart';
import 'api/global_actions/parse_directory/sync_fs_directory/sync_methods/sync_mdx_notes.dart';
import 'api/global_actions/parse_directory/sync_fs_directory/sync_methods/sync_user_bibliography.dart';
import 'api/initialize/on_desktop_init.dart';
import 'api/models/bibliography/bib_entry.dart';
import 'api/models/bibliography/bib_file.dart';
import 'api/models/enums/parsable_file_extension.dart';
import 'api/models/enums/setting_page_ids.dart';
import 'api/models/enums/supported_language.dart';
import 'api/models/enums/taggable_type.dart';
import 'api/models/front_matter/front_matter_entity.dart';
import 'api/models/front_matter/front_matter_model.dart';
import 'api/models/mdx_note/mdx_note_creatable.dart';
import 'api/models/mdx_note/mdx_note_group/mdx_note_group.dart';
import 'api/models/mdx_note/mdx_note_summary.dart';
import 'api/models/params/cross_language_file_object.dart';
import 'api/models/params/sync_mdx_typescript_params.dart';
import 'api/models/settings/setting_page_id.dart';
import 'api/models/snippet/snippet_model.dart';
import 'api/models/taggable/tag_front_matter_join.dart';
import 'api/models/taggable/tag_mdx_note_join.dart';
import 'api/models/taggable/tag_model.dart';
import 'api/models/taggable/taggable.dart';
import 'api/typedefs/note_type_utils.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => -1263165924;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'fluster_native_interface',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Value crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetData({
    required BibEntryEntity that,
  });

  int crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetId({
    required BibEntryEntity that,
  });

  String?
  crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetPdfPath({
    required BibEntryEntity that,
  });

  bool crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetRead({
    required BibEntryEntity that,
  });

  void crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetData({
    required BibEntryEntity that,
    required Value data,
  });

  void crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetId({
    required BibEntryEntity that,
    required int id,
  });

  void crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetPdfPath({
    required BibEntryEntity that,
    String? pdfPath,
  });

  void crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetRead({
    required BibEntryEntity that,
    required bool read,
  });

  RecordId crateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorGetId({
    required DbRecord that,
  });

  void crateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorSetId({
    required DbRecord that,
    required RecordId id,
  });

  Future<EmbeddedFile?> crateApiEmbeddedTsEmbeddedTypescriptFilesGet({
    required String filePath,
  });

  Future<BibtexFile>
  crateApiModelsBibliographyBibFileBibtexFileFromFilesystemPath({
    required String fspath,
  });

  Future<BibtexFile>
  crateApiModelsBibliographyBibFileBibtexFileFromRawFileContent({
    required String fileContent,
  });

  Future<void> crateApiModelsBibliographyBibFileBibtexFileSaveEntries({
    required BibtexFile that,
    required FlusterDb db,
  });

  Future<List<FlusterError>?>
  crateApiActionsMdxNoteCreateManyCreateManyMdxNotes({
    required AsyncPgConnection c,
    required List<MdxNoteCreatable> newNotes,
  });

  Future<FlusterError?> crateApiActionsMdxNoteCreateCreateMdxNote({
    required MdxNoteCreatable newNote,
  });

  Future<CrossLanguageFile>
  crateApiModelsParamsCrossLanguageFileObjectCrossLanguageFileDefault();

  Future<FrontMatterEntity>
  crateApiModelsFrontMatterFrontMatterEntityFrontMatterEntityDefault();

  Future<FrontMatter>
  crateApiModelsFrontMatterFrontMatterModelFrontMatterFromGrayMatter({
    Pod? pod,
  });

  Future<FlusterResultAsyncPgConnection>
  crateApiDataInterfaceDatabaseDbGetDatabaseConnection();

  Future<PathBuf?> crateApiDataInterfaceDatabaseUtilsGetDatabasePath();

  Future<FlusterDatabaseStatus>
  crateApiDataInterfaceGetDatabaseStatusGetDatabaseStatus();

  Future<FlusterResultVecFrontMatterEntity>
  crateApiActionsFrontMatterGetManyGetFrontMatterEntities();

  Future<FlusterResultVecMdxNoteEntity>
  crateApiActionsMdxNoteGetManyGetMdxNoteSummaries();

  Future<Regex> crateApiModelsTaggableTaggableGetTagRegularExpression();

  Future<KeymapSectionId>
  crateApiModelsEnumsSettingPageIdsKeymapSectionIdDefault();

  Future<MathLabelOption>
  crateApiModelsParamsSyncMdxTypescriptParamsMathLabelOptionDefault();

  Future<FlusterResultMdxNoteGroup>
  crateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromFileSystemPath({
    required String filePath,
  });

  Future<FlusterResultMdxNoteGroup>
  crateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromFileSystemPathAsync({
    required String filePath,
  });

  Future<FlusterResultMdxNoteGroup>
  crateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromRawMdxString({
    required String rawFileContent,
    String? filePath,
  });

  Future<NoteType> crateApiModelsEnumsParsableFileExtensionNoteTypeDefault();

  Future<void> crateApiInitializeOnDesktopInitOnDesktopInit();

  Future<SettingPageId>
  crateApiModelsSettingsSettingPageIdSettingPageIdDefault();

  Future<Snippet> crateApiModelsSnippetSnippetModelSnippetNew({
    required String label,
    required String desc,
    required SupportedSyntaxLanguage lang,
    required String body,
    required int id,
  });

  Future<SummaryListQuery>
  crateApiGlobalActionsGetSummaryListSummaryListQuerySummaryListQueryDefault();

  Future<SummaryListResults>
  crateApiGlobalActionsGetSummaryListSummaryListResultSummaryListResultsDefault();

  Future<SupportedSyntaxLanguage>
  crateApiModelsEnumsSupportedLanguageSupportedSyntaxLanguageDefault();

  Future<List<FlusterError>?>
  crateApiGlobalActionsParseDirectorySyncFsDirectorySyncFilesystemDirectorySyncDirectory({
    required SyncFilesystemDirectoryOptions opts,
  });

  Future<SyncFilesystemDirectoryOptions>
  crateApiGlobalActionsParseDirectorySyncFsDirectoryModelsSyncFilesystemOptionsSyncFilesystemDirectoryOptionsDefault();

  Future<void>
  crateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncMdxNotesSyncMdxFilesystemNotes({
    required String notesPath,
    required SenderFlusterError errorSender,
    required FlusterDb c,
  });

  Future<void>
  crateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncUserBibliographySyncUserBibliography({
    required String bibPath,
    required SenderFlusterError errorSender,
    required FlusterDb db,
    required int nThreads,
  });

  Future<TagCreatable> crateApiModelsTaggableTagModelTagCreatableNew({
    required String value,
    required TaggableTypeEnum tagType,
    int? id,
  });

  Future<TaggableWithMdxNoteJoin>
  crateApiModelsTaggableTagModelTagEntityGetMdxNoteJoin({
    required TagEntity that,
    required int mdxNoteId,
  });

  Future<TagEntity> crateApiModelsTaggableTagModelTagEntityNew({
    required String value,
    required TaggableTypeEnum tagType,
    required int id,
  });

  Future<TaggableWithFrontMatterJoin>
  crateApiModelsTaggableTagModelTagEntityToFrontMatterJoin({
    required TagEntity that,
    required int frontMatterId,
  });

  Future<TagFromContentResult>
  crateApiModelsTaggableTaggableTaggableFromMdxContent({
    required ParsedEntity data,
  });

  Future<List<Taggable>> crateApiModelsTaggableTaggableTaggableFromPodData({
    required ParsedEntity data,
  });

  Future<FlusterResult> crateApiActionsTaggablesUpsertManyUpsertManyTags({
    required AsyncPgConnection c,
    required List<TagCreatable> tags,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_AsyncPgConnection;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_AsyncPgConnection;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_AsyncPgConnectionPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_BibEntryEntity;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_BibEntryEntity;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_BibEntryEntityPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_DbRecord;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_DbRecord;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DbRecordPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EmbeddedFile;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EmbeddedFile;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EmbeddedFilePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EmbeddedTypescriptFiles;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EmbeddedTypescriptFiles;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_EmbeddedTypescriptFilesPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterDb;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterDb;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FlusterDbPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FlusterErrorPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterResult;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterResult;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FlusterResultPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterResultAsyncPgConnection;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterResultAsyncPgConnection;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FlusterResultAsyncPgConnectionPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterResultMdxNoteGroup;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterResultMdxNoteGroup;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FlusterResultMdxNoteGroupPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterResultVecFrontMatterEntity;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterResultVecFrontMatterEntity;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FlusterResultVecFrontMatterEntityPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterResultVecMdxNoteEntity;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterResultVecMdxNoteEntity;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FlusterResultVecMdxNoteEntityPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ParsedEntity;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ParsedEntity;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ParsedEntityPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PathBuf;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PathBuf;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PathBufPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Pod;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Pod;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PodPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RecordId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RecordId;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RecordIdPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Regex;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Regex;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RegexPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SenderFlusterError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SenderFlusterError;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_SenderFlusterErrorPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Value;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Value;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ValuePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Value crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetData({
    required BibEntryEntity that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetDataConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetDataConstMeta =>
      const TaskConstMeta(
        debugName: "BibEntryEntity_auto_accessor_get_data",
        argNames: ["that"],
      );

  @override
  int crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetId({
    required BibEntryEntity that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_i_32,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetIdConstMeta =>
      const TaskConstMeta(
        debugName: "BibEntryEntity_auto_accessor_get_id",
        argNames: ["that"],
      );

  @override
  String?
  crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetPdfPath({
    required BibEntryEntity that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetPdfPathConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetPdfPathConstMeta =>
      const TaskConstMeta(
        debugName: "BibEntryEntity_auto_accessor_get_pdf_path",
        argNames: ["that"],
      );

  @override
  bool crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetRead({
    required BibEntryEntity that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetReadConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetReadConstMeta =>
      const TaskConstMeta(
        debugName: "BibEntryEntity_auto_accessor_get_read",
        argNames: ["that"],
      );

  @override
  void crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetData({
    required BibEntryEntity that,
    required Value data,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
            data,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetDataConstMeta,
        argValues: [that, data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetDataConstMeta =>
      const TaskConstMeta(
        debugName: "BibEntryEntity_auto_accessor_set_data",
        argNames: ["that", "data"],
      );

  @override
  void crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetId({
    required BibEntryEntity that,
    required int id,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
            that,
            serializer,
          );
          sse_encode_i_32(id, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetIdConstMeta,
        argValues: [that, id],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetIdConstMeta =>
      const TaskConstMeta(
        debugName: "BibEntryEntity_auto_accessor_set_id",
        argNames: ["that", "id"],
      );

  @override
  void crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetPdfPath({
    required BibEntryEntity that,
    String? pdfPath,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
            that,
            serializer,
          );
          sse_encode_opt_String(pdfPath, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetPdfPathConstMeta,
        argValues: [that, pdfPath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetPdfPathConstMeta =>
      const TaskConstMeta(
        debugName: "BibEntryEntity_auto_accessor_set_pdf_path",
        argNames: ["that", "pdfPath"],
      );

  @override
  void crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetRead({
    required BibEntryEntity that,
    required bool read,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
            that,
            serializer,
          );
          sse_encode_bool(read, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetReadConstMeta,
        argValues: [that, read],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetReadConstMeta =>
      const TaskConstMeta(
        debugName: "BibEntryEntity_auto_accessor_set_read",
        argNames: ["that", "read"],
      );

  @override
  RecordId crateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorGetId({
    required DbRecord that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorGetIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorGetIdConstMeta =>
      const TaskConstMeta(
        debugName: "DbRecord_auto_accessor_get_id",
        argNames: ["that"],
      );

  @override
  void crateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorSetId({
    required DbRecord that,
    required RecordId id,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId(
            id,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorSetIdConstMeta,
        argValues: [that, id],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorSetIdConstMeta =>
      const TaskConstMeta(
        debugName: "DbRecord_auto_accessor_set_id",
        argNames: ["that", "id"],
      );

  @override
  Future<EmbeddedFile?> crateApiEmbeddedTsEmbeddedTypescriptFilesGet({
    required String filePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(filePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEmbeddedTsEmbeddedTypescriptFilesGetConstMeta,
        argValues: [filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEmbeddedTsEmbeddedTypescriptFilesGetConstMeta =>
      const TaskConstMeta(
        debugName: "EmbeddedTypescriptFiles_get",
        argNames: ["filePath"],
      );

  @override
  Future<BibtexFile>
  crateApiModelsBibliographyBibFileBibtexFileFromFilesystemPath({
    required String fspath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(fspath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bibtex_file,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibFileBibtexFileFromFilesystemPathConstMeta,
        argValues: [fspath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibFileBibtexFileFromFilesystemPathConstMeta =>
      const TaskConstMeta(
        debugName: "bibtex_file_from_filesystem_path",
        argNames: ["fspath"],
      );

  @override
  Future<BibtexFile>
  crateApiModelsBibliographyBibFileBibtexFileFromRawFileContent({
    required String fileContent,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(fileContent, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bibtex_file,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibFileBibtexFileFromRawFileContentConstMeta,
        argValues: [fileContent],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibFileBibtexFileFromRawFileContentConstMeta =>
      const TaskConstMeta(
        debugName: "bibtex_file_from_raw_file_content",
        argNames: ["fileContent"],
      );

  @override
  Future<void> crateApiModelsBibliographyBibFileBibtexFileSaveEntries({
    required BibtexFile that,
    required FlusterDb db,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_bibtex_file(that, serializer);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
            db,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibFileBibtexFileSaveEntriesConstMeta,
        argValues: [that, db],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibFileBibtexFileSaveEntriesConstMeta =>
      const TaskConstMeta(
        debugName: "bibtex_file_save_entries",
        argNames: ["that", "db"],
      );

  @override
  Future<List<FlusterError>?>
  crateApiActionsMdxNoteCreateManyCreateManyMdxNotes({
    required AsyncPgConnection c,
    required List<MdxNoteCreatable> newNotes,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncPgConnection(
            c,
            serializer,
          );
          sse_encode_list_mdx_note_creatable(newNotes, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiActionsMdxNoteCreateManyCreateManyMdxNotesConstMeta,
        argValues: [c, newNotes],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiActionsMdxNoteCreateManyCreateManyMdxNotesConstMeta =>
      const TaskConstMeta(
        debugName: "create_many_mdx_notes",
        argNames: ["c", "newNotes"],
      );

  @override
  Future<FlusterError?> crateApiActionsMdxNoteCreateCreateMdxNote({
    required MdxNoteCreatable newNote,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_mdx_note_creatable(newNote, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiActionsMdxNoteCreateCreateMdxNoteConstMeta,
        argValues: [newNote],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiActionsMdxNoteCreateCreateMdxNoteConstMeta =>
      const TaskConstMeta(debugName: "create_mdx_note", argNames: ["newNote"]);

  @override
  Future<CrossLanguageFile>
  crateApiModelsParamsCrossLanguageFileObjectCrossLanguageFileDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_cross_language_file,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsParamsCrossLanguageFileObjectCrossLanguageFileDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsParamsCrossLanguageFileObjectCrossLanguageFileDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "cross_language_file_default",
        argNames: [],
      );

  @override
  Future<FrontMatterEntity>
  crateApiModelsFrontMatterFrontMatterEntityFrontMatterEntityDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_front_matter_entity,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsFrontMatterFrontMatterEntityFrontMatterEntityDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsFrontMatterFrontMatterEntityFrontMatterEntityDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "front_matter_entity_default",
        argNames: [],
      );

  @override
  Future<FrontMatter>
  crateApiModelsFrontMatterFrontMatterModelFrontMatterFromGrayMatter({
    Pod? pod,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
            pod,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_front_matter,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsFrontMatterFrontMatterModelFrontMatterFromGrayMatterConstMeta,
        argValues: [pod],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsFrontMatterFrontMatterModelFrontMatterFromGrayMatterConstMeta =>
      const TaskConstMeta(
        debugName: "front_matter_from_gray_matter",
        argNames: ["pod"],
      );

  @override
  Future<FlusterResultAsyncPgConnection>
  crateApiDataInterfaceDatabaseDbGetDatabaseConnection() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultAsyncPgConnection,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDataInterfaceDatabaseDbGetDatabaseConnectionConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDataInterfaceDatabaseDbGetDatabaseConnectionConstMeta =>
      const TaskConstMeta(debugName: "get_database_connection", argNames: []);

  @override
  Future<PathBuf?> crateApiDataInterfaceDatabaseUtilsGetDatabasePath() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDataInterfaceDatabaseUtilsGetDatabasePathConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDataInterfaceDatabaseUtilsGetDatabasePathConstMeta =>
      const TaskConstMeta(debugName: "get_database_path", argNames: []);

  @override
  Future<FlusterDatabaseStatus>
  crateApiDataInterfaceGetDatabaseStatusGetDatabaseStatus() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_fluster_database_status,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDataInterfaceGetDatabaseStatusGetDatabaseStatusConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDataInterfaceGetDatabaseStatusGetDatabaseStatusConstMeta =>
      const TaskConstMeta(debugName: "get_database_status", argNames: []);

  @override
  Future<FlusterResultVecFrontMatterEntity>
  crateApiActionsFrontMatterGetManyGetFrontMatterEntities() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecFrontMatterEntity,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiActionsFrontMatterGetManyGetFrontMatterEntitiesConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiActionsFrontMatterGetManyGetFrontMatterEntitiesConstMeta =>
      const TaskConstMeta(debugName: "get_front_matter_entities", argNames: []);

  @override
  Future<FlusterResultVecMdxNoteEntity>
  crateApiActionsMdxNoteGetManyGetMdxNoteSummaries() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecMdxNoteEntity,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiActionsMdxNoteGetManyGetMdxNoteSummariesConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiActionsMdxNoteGetManyGetMdxNoteSummariesConstMeta =>
      const TaskConstMeta(debugName: "get_mdx_note_summaries", argNames: []);

  @override
  Future<Regex> crateApiModelsTaggableTaggableGetTagRegularExpression() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRegex,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsTaggableTaggableGetTagRegularExpressionConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsTaggableTaggableGetTagRegularExpressionConstMeta =>
      const TaskConstMeta(
        debugName: "get_tag_regular_expression",
        argNames: [],
      );

  @override
  Future<KeymapSectionId>
  crateApiModelsEnumsSettingPageIdsKeymapSectionIdDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_keymap_section_id,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsEnumsSettingPageIdsKeymapSectionIdDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsEnumsSettingPageIdsKeymapSectionIdDefaultConstMeta =>
      const TaskConstMeta(debugName: "keymap_section_id_default", argNames: []);

  @override
  Future<MathLabelOption>
  crateApiModelsParamsSyncMdxTypescriptParamsMathLabelOptionDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_math_label_option,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsParamsSyncMdxTypescriptParamsMathLabelOptionDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsParamsSyncMdxTypescriptParamsMathLabelOptionDefaultConstMeta =>
      const TaskConstMeta(debugName: "math_label_option_default", argNames: []);

  @override
  Future<FlusterResultMdxNoteGroup>
  crateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromFileSystemPath({
    required String filePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(filePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromFileSystemPathConstMeta,
        argValues: [filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromFileSystemPathConstMeta =>
      const TaskConstMeta(
        debugName: "mdx_note_group_from_file_system_path",
        argNames: ["filePath"],
      );

  @override
  Future<FlusterResultMdxNoteGroup>
  crateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromFileSystemPathAsync({
    required String filePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(filePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 29,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromFileSystemPathAsyncConstMeta,
        argValues: [filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromFileSystemPathAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "mdx_note_group_from_file_system_path_async",
        argNames: ["filePath"],
      );

  @override
  Future<FlusterResultMdxNoteGroup>
  crateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromRawMdxString({
    required String rawFileContent,
    String? filePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(rawFileContent, serializer);
          sse_encode_opt_String(filePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 30,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromRawMdxStringConstMeta,
        argValues: [rawFileContent, filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromRawMdxStringConstMeta =>
      const TaskConstMeta(
        debugName: "mdx_note_group_from_raw_mdx_string",
        argNames: ["rawFileContent", "filePath"],
      );

  @override
  Future<NoteType> crateApiModelsEnumsParsableFileExtensionNoteTypeDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 31,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_note_type,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsEnumsParsableFileExtensionNoteTypeDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsEnumsParsableFileExtensionNoteTypeDefaultConstMeta =>
      const TaskConstMeta(debugName: "note_type_default", argNames: []);

  @override
  Future<void> crateApiInitializeOnDesktopInitOnDesktopInit() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 32,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiInitializeOnDesktopInitOnDesktopInitConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiInitializeOnDesktopInitOnDesktopInitConstMeta =>
      const TaskConstMeta(debugName: "on_desktop_init", argNames: []);

  @override
  Future<SettingPageId>
  crateApiModelsSettingsSettingPageIdSettingPageIdDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 33,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_setting_page_id,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsSettingsSettingPageIdSettingPageIdDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsSettingsSettingPageIdSettingPageIdDefaultConstMeta =>
      const TaskConstMeta(debugName: "setting_page_id_default", argNames: []);

  @override
  Future<Snippet> crateApiModelsSnippetSnippetModelSnippetNew({
    required String label,
    required String desc,
    required SupportedSyntaxLanguage lang,
    required String body,
    required int id,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(label, serializer);
          sse_encode_String(desc, serializer);
          sse_encode_supported_syntax_language(lang, serializer);
          sse_encode_String(body, serializer);
          sse_encode_i_32(id, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 34,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_snippet,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiModelsSnippetSnippetModelSnippetNewConstMeta,
        argValues: [label, desc, lang, body, id],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiModelsSnippetSnippetModelSnippetNewConstMeta =>
      const TaskConstMeta(
        debugName: "snippet_new",
        argNames: ["label", "desc", "lang", "body", "id"],
      );

  @override
  Future<SummaryListQuery>
  crateApiGlobalActionsGetSummaryListSummaryListQuerySummaryListQueryDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 35,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_summary_list_query,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsGetSummaryListSummaryListQuerySummaryListQueryDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsGetSummaryListSummaryListQuerySummaryListQueryDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "summary_list_query_default",
        argNames: [],
      );

  @override
  Future<SummaryListResults>
  crateApiGlobalActionsGetSummaryListSummaryListResultSummaryListResultsDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 36,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_summary_list_results,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsGetSummaryListSummaryListResultSummaryListResultsDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsGetSummaryListSummaryListResultSummaryListResultsDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "summary_list_results_default",
        argNames: [],
      );

  @override
  Future<SupportedSyntaxLanguage>
  crateApiModelsEnumsSupportedLanguageSupportedSyntaxLanguageDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 37,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_supported_syntax_language,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsEnumsSupportedLanguageSupportedSyntaxLanguageDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsEnumsSupportedLanguageSupportedSyntaxLanguageDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "supported_syntax_language_default",
        argNames: [],
      );

  @override
  Future<List<FlusterError>?>
  crateApiGlobalActionsParseDirectorySyncFsDirectorySyncFilesystemDirectorySyncDirectory({
    required SyncFilesystemDirectoryOptions opts,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_sync_filesystem_directory_options(
            opts,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 38,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsParseDirectorySyncFsDirectorySyncFilesystemDirectorySyncDirectoryConstMeta,
        argValues: [opts],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsParseDirectorySyncFsDirectorySyncFilesystemDirectorySyncDirectoryConstMeta =>
      const TaskConstMeta(debugName: "sync_directory", argNames: ["opts"]);

  @override
  Future<SyncFilesystemDirectoryOptions>
  crateApiGlobalActionsParseDirectorySyncFsDirectoryModelsSyncFilesystemOptionsSyncFilesystemDirectoryOptionsDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 39,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_sync_filesystem_directory_options,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsParseDirectorySyncFsDirectoryModelsSyncFilesystemOptionsSyncFilesystemDirectoryOptionsDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsParseDirectorySyncFsDirectoryModelsSyncFilesystemOptionsSyncFilesystemDirectoryOptionsDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "sync_filesystem_directory_options_default",
        argNames: [],
      );

  @override
  Future<void>
  crateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncMdxNotesSyncMdxFilesystemNotes({
    required String notesPath,
    required SenderFlusterError errorSender,
    required FlusterDb c,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(notesPath, serializer);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
            errorSender,
            serializer,
          );
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
            c,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 40,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta:
            kCrateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncMdxNotesSyncMdxFilesystemNotesConstMeta,
        argValues: [notesPath, errorSender, c],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncMdxNotesSyncMdxFilesystemNotesConstMeta =>
      const TaskConstMeta(
        debugName: "sync_mdx_filesystem_notes",
        argNames: ["notesPath", "errorSender", "c"],
      );

  @override
  Future<void>
  crateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncUserBibliographySyncUserBibliography({
    required String bibPath,
    required SenderFlusterError errorSender,
    required FlusterDb db,
    required int nThreads,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(bibPath, serializer);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
            errorSender,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
            db,
            serializer,
          );
          sse_encode_u_32(nThreads, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 41,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncUserBibliographySyncUserBibliographyConstMeta,
        argValues: [bibPath, errorSender, db, nThreads],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncUserBibliographySyncUserBibliographyConstMeta =>
      const TaskConstMeta(
        debugName: "sync_user_bibliography",
        argNames: ["bibPath", "errorSender", "db", "nThreads"],
      );

  @override
  Future<TagCreatable> crateApiModelsTaggableTagModelTagCreatableNew({
    required String value,
    required TaggableTypeEnum tagType,
    int? id,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(value, serializer);
          sse_encode_taggable_type_enum(tagType, serializer);
          sse_encode_opt_box_autoadd_i_32(id, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 42,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_tag_creatable,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiModelsTaggableTagModelTagCreatableNewConstMeta,
        argValues: [value, tagType, id],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiModelsTaggableTagModelTagCreatableNewConstMeta =>
      const TaskConstMeta(
        debugName: "tag_creatable_new",
        argNames: ["value", "tagType", "id"],
      );

  @override
  Future<TaggableWithMdxNoteJoin>
  crateApiModelsTaggableTagModelTagEntityGetMdxNoteJoin({
    required TagEntity that,
    required int mdxNoteId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_tag_entity(that, serializer);
          sse_encode_i_32(mdxNoteId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 43,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_taggable_with_mdx_note_join,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsTaggableTagModelTagEntityGetMdxNoteJoinConstMeta,
        argValues: [that, mdxNoteId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsTaggableTagModelTagEntityGetMdxNoteJoinConstMeta =>
      const TaskConstMeta(
        debugName: "tag_entity_get_mdx_note_join",
        argNames: ["that", "mdxNoteId"],
      );

  @override
  Future<TagEntity> crateApiModelsTaggableTagModelTagEntityNew({
    required String value,
    required TaggableTypeEnum tagType,
    required int id,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(value, serializer);
          sse_encode_taggable_type_enum(tagType, serializer);
          sse_encode_i_32(id, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 44,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_tag_entity,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiModelsTaggableTagModelTagEntityNewConstMeta,
        argValues: [value, tagType, id],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiModelsTaggableTagModelTagEntityNewConstMeta =>
      const TaskConstMeta(
        debugName: "tag_entity_new",
        argNames: ["value", "tagType", "id"],
      );

  @override
  Future<TaggableWithFrontMatterJoin>
  crateApiModelsTaggableTagModelTagEntityToFrontMatterJoin({
    required TagEntity that,
    required int frontMatterId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_tag_entity(that, serializer);
          sse_encode_i_32(frontMatterId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 45,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_taggable_with_front_matter_join,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsTaggableTagModelTagEntityToFrontMatterJoinConstMeta,
        argValues: [that, frontMatterId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsTaggableTagModelTagEntityToFrontMatterJoinConstMeta =>
      const TaskConstMeta(
        debugName: "tag_entity_to_front_matter_join",
        argNames: ["that", "frontMatterId"],
      );

  @override
  Future<TagFromContentResult>
  crateApiModelsTaggableTaggableTaggableFromMdxContent({
    required ParsedEntity data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity(
            data,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 46,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_tag_from_content_result,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsTaggableTaggableTaggableFromMdxContentConstMeta,
        argValues: [data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsTaggableTaggableTaggableFromMdxContentConstMeta =>
      const TaskConstMeta(
        debugName: "taggable_from_mdx_content",
        argNames: ["data"],
      );

  @override
  Future<List<Taggable>> crateApiModelsTaggableTaggableTaggableFromPodData({
    required ParsedEntity data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity(
            data,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 47,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_taggable,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiModelsTaggableTaggableTaggableFromPodDataConstMeta,
        argValues: [data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsTaggableTaggableTaggableFromPodDataConstMeta =>
      const TaskConstMeta(
        debugName: "taggable_from_pod_data",
        argNames: ["data"],
      );

  @override
  Future<FlusterResult> crateApiActionsTaggablesUpsertManyUpsertManyTags({
    required AsyncPgConnection c,
    required List<TagCreatable> tags,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncPgConnection(
            c,
            serializer,
          );
          sse_encode_list_tag_creatable(tags, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 48,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResult,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiActionsTaggablesUpsertManyUpsertManyTagsConstMeta,
        argValues: [c, tags],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiActionsTaggablesUpsertManyUpsertManyTagsConstMeta =>
      const TaskConstMeta(
        debugName: "upsert_many_tags",
        argNames: ["c", "tags"],
      );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_AsyncPgConnection =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncPgConnection;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_AsyncPgConnection =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncPgConnection;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_BibEntryEntity =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_BibEntryEntity =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_DbRecord =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_DbRecord =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EmbeddedFile =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EmbeddedFile =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EmbeddedTypescriptFiles =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EmbeddedTypescriptFiles =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterDb =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterDb =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterError =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterError =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterResult =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResult;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterResult =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResult;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterResultAsyncPgConnection =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultAsyncPgConnection;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterResultAsyncPgConnection =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultAsyncPgConnection;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterResultMdxNoteGroup =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterResultMdxNoteGroup =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterResultVecFrontMatterEntity =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecFrontMatterEntity;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterResultVecFrontMatterEntity =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecFrontMatterEntity;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterResultVecMdxNoteEntity =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecMdxNoteEntity;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterResultVecMdxNoteEntity =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecMdxNoteEntity;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ParsedEntity =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ParsedEntity =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_PathBuf =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_PathBuf =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Pod =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Pod =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RecordId =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RecordId =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Regex =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRegex;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Regex =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRegex;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SenderFlusterError =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SenderFlusterError =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Value =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Value =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue;

  @protected
  BibEntryEntity
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BibEntryEntityImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DbRecord
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DbRecordImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EmbeddedFile
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmbeddedFileImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EmbeddedTypescriptFiles
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmbeddedTypescriptFilesImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FlusterError
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterResult
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResult(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterResultImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterResultAsyncPgConnection
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultAsyncPgConnection(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterResultAsyncPgConnectionImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FlusterResultMdxNoteGroup
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterResultMdxNoteGroupImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FlusterResultVecFrontMatterEntity
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecFrontMatterEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterResultVecFrontMatterEntityImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FlusterResultVecMdxNoteEntity
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecMdxNoteEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterResultVecMdxNoteEntityImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  PathBuf
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PathBufImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Pod
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PodImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RecordId
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RecordIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Regex
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRegex(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RegexImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Value
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ValueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AsyncPgConnection
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncPgConnection(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AsyncPgConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BibEntryEntity
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BibEntryEntityImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DbRecord
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DbRecordImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterDb
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterDbImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BibEntryEntity
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BibEntryEntityImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DbRecord
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DbRecordImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterDb
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterDbImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ParsedEntity
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ParsedEntityImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SenderFlusterError
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SenderFlusterErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DateTime dco_decode_Chrono_Naive(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  AsyncPgConnection
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncPgConnection(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AsyncPgConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BibEntryEntity
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BibEntryEntityImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DbRecord
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DbRecordImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EmbeddedFile
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmbeddedFileImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EmbeddedTypescriptFiles
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmbeddedTypescriptFilesImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FlusterDb
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterDbImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterError
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterResult
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResult(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterResultImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterResultAsyncPgConnection
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultAsyncPgConnection(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterResultAsyncPgConnectionImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FlusterResultMdxNoteGroup
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterResultMdxNoteGroupImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FlusterResultVecFrontMatterEntity
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecFrontMatterEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterResultVecFrontMatterEntityImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FlusterResultVecMdxNoteEntity
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecMdxNoteEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterResultVecMdxNoteEntityImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  ParsedEntity
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ParsedEntityImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PathBuf
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PathBufImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Pod
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PodImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RecordId
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RecordIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Regex
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRegex(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RegexImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SenderFlusterError
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SenderFlusterErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Value
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ValueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BibtexFile dco_decode_bibtex_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BibtexFile(
      path: dco_decode_opt_String(arr[0]),
      entries:
          dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
            arr[1],
          ),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  EmbeddedFile
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
      raw,
    );
  }

  @protected
  FlusterError
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
      raw,
    );
  }

  @protected
  PathBuf
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
      raw,
    );
  }

  @protected
  Pod
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
      raw,
    );
  }

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Naive(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Chrono_Naive(raw);
  }

  @protected
  BibtexFile dco_decode_box_autoadd_bibtex_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_bibtex_file(raw);
  }

  @protected
  int dco_decode_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  MdxNoteCreatable dco_decode_box_autoadd_mdx_note_creatable(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_mdx_note_creatable(raw);
  }

  @protected
  SyncFilesystemDirectoryOptions
  dco_decode_box_autoadd_sync_filesystem_directory_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sync_filesystem_directory_options(raw);
  }

  @protected
  TagEntity dco_decode_box_autoadd_tag_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tag_entity(raw);
  }

  @protected
  CrossLanguageFile dco_decode_cross_language_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CrossLanguageFile(
      path: dco_decode_String(arr[0]),
      noteType: dco_decode_note_type(arr[1]),
    );
  }

  @protected
  FlusterDatabaseStatus dco_decode_fluster_database_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterDatabaseStatus.values[raw as int];
  }

  @protected
  FrontMatter dco_decode_front_matter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return FrontMatter(
      data: dco_decode_front_matter_entity(arr[0]),
      tags: dco_decode_list_tag_creatable(arr[1]),
      subjects: dco_decode_list_tag_creatable(arr[2]),
      topics: dco_decode_list_tag_creatable(arr[3]),
    );
  }

  @protected
  FrontMatterEntity dco_decode_front_matter_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return FrontMatterEntity(
      id: dco_decode_i_32(arr[0]),
      title: dco_decode_String(arr[1]),
      summary: dco_decode_opt_String(arr[2]),
      mdxNoteId: dco_decode_i_32(arr[3]),
      userProvidedId: dco_decode_opt_String(arr[4]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  KeymapSectionId dco_decode_keymap_section_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeymapSectionId.values[raw as int];
  }

  @protected
  List<BibEntryEntity>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity,
        )
        .toList();
  }

  @protected
  List<FlusterError>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        )
        .toList();
  }

  @protected
  List<MdxNoteCreatable> dco_decode_list_mdx_note_creatable(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_mdx_note_creatable).toList();
  }

  @protected
  List<MdxNoteSummary> dco_decode_list_mdx_note_summary(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_mdx_note_summary).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<TagCreatable> dco_decode_list_tag_creatable(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tag_creatable).toList();
  }

  @protected
  List<Taggable> dco_decode_list_taggable(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_taggable).toList();
  }

  @protected
  MathLabelOption dco_decode_math_label_option(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MathLabelOption.values[raw as int];
  }

  @protected
  MdxNoteCreatable dco_decode_mdx_note_creatable(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return MdxNoteCreatable(
      id: dco_decode_opt_box_autoadd_i_32(arr[0]),
      filePath: dco_decode_opt_String(arr[1]),
      rawBody: dco_decode_String(arr[2]),
      ctime: dco_decode_opt_box_autoadd_Chrono_Naive(arr[3]),
      mtime: dco_decode_opt_box_autoadd_Chrono_Naive(arr[4]),
    );
  }

  @protected
  MdxNoteGroup dco_decode_mdx_note_group(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return MdxNoteGroup(
      mdx: dco_decode_mdx_note_creatable(arr[0]),
      frontMatter: dco_decode_front_matter(arr[1]),
      tags: dco_decode_list_taggable(arr[2]),
    );
  }

  @protected
  MdxNoteSummary dco_decode_mdx_note_summary(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return MdxNoteSummary(
      id: dco_decode_i_32(arr[0]),
      filePath: dco_decode_opt_String(arr[1]),
      rawBody: dco_decode_String(arr[2]),
    );
  }

  @protected
  NoteType dco_decode_note_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NoteType.values[raw as int];
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  EmbeddedFile?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
          raw,
        );
  }

  @protected
  FlusterError?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
          raw,
        );
  }

  @protected
  PathBuf?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          raw,
        );
  }

  @protected
  Pod?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
          raw,
        );
  }

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Naive(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Naive(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_32(raw);
  }

  @protected
  List<FlusterError>?
  dco_decode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
          raw,
        );
  }

  @protected
  SettingPageId dco_decode_setting_page_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SettingPageId.values[raw as int];
  }

  @protected
  Snippet dco_decode_snippet(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Snippet(
      id: dco_decode_i_32(arr[0]),
      label: dco_decode_String(arr[1]),
      desc: dco_decode_String(arr[2]),
      lang: dco_decode_String(arr[3]),
      body: dco_decode_String(arr[4]),
    );
  }

  @protected
  SummaryListQuery dco_decode_summary_list_query(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SummaryListQuery(
      mdxPerPage: dco_decode_u_16(arr[0]),
      mdxPage: dco_decode_u_16(arr[1]),
    );
  }

  @protected
  SummaryListResults dco_decode_summary_list_results(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SummaryListResults(
      mdxNotes: dco_decode_list_mdx_note_summary(arr[0]),
    );
  }

  @protected
  SupportedSyntaxLanguage dco_decode_supported_syntax_language(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SupportedSyntaxLanguage.values[raw as int];
  }

  @protected
  SyncFilesystemDirectoryOptions dco_decode_sync_filesystem_directory_options(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SyncFilesystemDirectoryOptions(
      dirPath: dco_decode_String(arr[0]),
      bibPath: dco_decode_opt_String(arr[1]),
      nThreads: dco_decode_u_32(arr[2]),
    );
  }

  @protected
  TagCreatable dco_decode_tag_creatable(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TagCreatable(
      id: dco_decode_opt_box_autoadd_i_32(arr[0]),
      value: dco_decode_String(arr[1]),
      tagType: dco_decode_String(arr[2]),
    );
  }

  @protected
  TagEntity dco_decode_tag_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TagEntity(
      id: dco_decode_i_32(arr[0]),
      value: dco_decode_String(arr[1]),
      tagType: dco_decode_String(arr[2]),
    );
  }

  @protected
  TagFromContentResult dco_decode_tag_from_content_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TagFromContentResult(
      tags: dco_decode_list_taggable(arr[0]),
      parsedContent: dco_decode_String(arr[1]),
    );
  }

  @protected
  Taggable dco_decode_taggable(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Taggable(
      value: dco_decode_String(arr[0]),
      tagType: dco_decode_taggable_type_enum(arr[1]),
    );
  }

  @protected
  TaggableTypeEnum dco_decode_taggable_type_enum(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TaggableTypeEnum.values[raw as int];
  }

  @protected
  TaggableWithFrontMatterJoin dco_decode_taggable_with_front_matter_join(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TaggableWithFrontMatterJoin(
      tagId: dco_decode_i_32(arr[0]),
      frontMatterId: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  TaggableWithMdxNoteJoin dco_decode_taggable_with_mdx_note_join(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TaggableWithMdxNoteJoin(
      tagId: dco_decode_i_32(arr[0]),
      mdxNoteId: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  BibEntryEntity
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BibEntryEntityImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DbRecord
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DbRecordImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EmbeddedFile
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmbeddedFileImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EmbeddedTypescriptFiles
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmbeddedTypescriptFilesImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterError
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterResult
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResult(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterResultImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterResultAsyncPgConnection
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultAsyncPgConnection(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterResultAsyncPgConnectionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterResultMdxNoteGroup
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterResultMdxNoteGroupImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterResultVecFrontMatterEntity
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecFrontMatterEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterResultVecFrontMatterEntityImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterResultVecMdxNoteEntity
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecMdxNoteEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterResultVecMdxNoteEntityImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PathBuf
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PathBufImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Pod
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PodImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RecordId
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RecordIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Regex
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRegex(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RegexImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Value
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ValueImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  AsyncPgConnection
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncPgConnection(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AsyncPgConnectionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  BibEntryEntity
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BibEntryEntityImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DbRecord
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DbRecordImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterDb
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterDbImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  BibEntryEntity
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BibEntryEntityImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DbRecord
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DbRecordImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterDb
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterDbImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ParsedEntity
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ParsedEntityImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SenderFlusterError
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SenderFlusterErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DateTime sse_decode_Chrono_Naive(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner.toInt(), isUtc: true);
  }

  @protected
  AsyncPgConnection
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncPgConnection(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AsyncPgConnectionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  BibEntryEntity
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BibEntryEntityImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DbRecord
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DbRecordImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EmbeddedFile
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmbeddedFileImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EmbeddedTypescriptFiles
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmbeddedTypescriptFilesImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterDb
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterDbImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterError
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterResult
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResult(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterResultImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterResultAsyncPgConnection
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultAsyncPgConnection(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterResultAsyncPgConnectionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterResultMdxNoteGroup
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterResultMdxNoteGroupImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterResultVecFrontMatterEntity
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecFrontMatterEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterResultVecFrontMatterEntityImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterResultVecMdxNoteEntity
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecMdxNoteEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterResultVecMdxNoteEntityImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ParsedEntity
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ParsedEntityImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PathBuf
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PathBufImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Pod
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PodImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RecordId
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RecordIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Regex
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRegex(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RegexImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SenderFlusterError
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SenderFlusterErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Value
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ValueImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BibtexFile sse_decode_bibtex_file(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_path = sse_decode_opt_String(deserializer);
    var var_entries =
        sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
          deserializer,
        );
    return BibtexFile(path: var_path, entries: var_entries);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  EmbeddedFile
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
      deserializer,
    ));
  }

  @protected
  FlusterError
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
      deserializer,
    ));
  }

  @protected
  PathBuf
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
      deserializer,
    ));
  }

  @protected
  Pod
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
      deserializer,
    ));
  }

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Naive(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Chrono_Naive(deserializer));
  }

  @protected
  BibtexFile sse_decode_box_autoadd_bibtex_file(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bibtex_file(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_32(deserializer));
  }

  @protected
  MdxNoteCreatable sse_decode_box_autoadd_mdx_note_creatable(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_mdx_note_creatable(deserializer));
  }

  @protected
  SyncFilesystemDirectoryOptions
  sse_decode_box_autoadd_sync_filesystem_directory_options(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sync_filesystem_directory_options(deserializer));
  }

  @protected
  TagEntity sse_decode_box_autoadd_tag_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tag_entity(deserializer));
  }

  @protected
  CrossLanguageFile sse_decode_cross_language_file(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_path = sse_decode_String(deserializer);
    var var_noteType = sse_decode_note_type(deserializer);
    return CrossLanguageFile(path: var_path, noteType: var_noteType);
  }

  @protected
  FlusterDatabaseStatus sse_decode_fluster_database_status(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return FlusterDatabaseStatus.values[inner];
  }

  @protected
  FrontMatter sse_decode_front_matter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_data = sse_decode_front_matter_entity(deserializer);
    var var_tags = sse_decode_list_tag_creatable(deserializer);
    var var_subjects = sse_decode_list_tag_creatable(deserializer);
    var var_topics = sse_decode_list_tag_creatable(deserializer);
    return FrontMatter(
      data: var_data,
      tags: var_tags,
      subjects: var_subjects,
      topics: var_topics,
    );
  }

  @protected
  FrontMatterEntity sse_decode_front_matter_entity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_32(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_summary = sse_decode_opt_String(deserializer);
    var var_mdxNoteId = sse_decode_i_32(deserializer);
    var var_userProvidedId = sse_decode_opt_String(deserializer);
    return FrontMatterEntity(
      id: var_id,
      title: var_title,
      summary: var_summary,
      mdxNoteId: var_mdxNoteId,
      userProvidedId: var_userProvidedId,
    );
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  KeymapSectionId sse_decode_keymap_section_id(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return KeymapSectionId.values[inner];
  }

  @protected
  List<BibEntryEntity>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BibEntryEntity>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<FlusterError>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FlusterError>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<MdxNoteCreatable> sse_decode_list_mdx_note_creatable(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MdxNoteCreatable>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_mdx_note_creatable(deserializer));
    }
    return ans_;
  }

  @protected
  List<MdxNoteSummary> sse_decode_list_mdx_note_summary(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MdxNoteSummary>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_mdx_note_summary(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<TagCreatable> sse_decode_list_tag_creatable(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TagCreatable>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tag_creatable(deserializer));
    }
    return ans_;
  }

  @protected
  List<Taggable> sse_decode_list_taggable(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Taggable>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_taggable(deserializer));
    }
    return ans_;
  }

  @protected
  MathLabelOption sse_decode_math_label_option(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MathLabelOption.values[inner];
  }

  @protected
  MdxNoteCreatable sse_decode_mdx_note_creatable(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_filePath = sse_decode_opt_String(deserializer);
    var var_rawBody = sse_decode_String(deserializer);
    var var_ctime = sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var var_mtime = sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    return MdxNoteCreatable(
      id: var_id,
      filePath: var_filePath,
      rawBody: var_rawBody,
      ctime: var_ctime,
      mtime: var_mtime,
    );
  }

  @protected
  MdxNoteGroup sse_decode_mdx_note_group(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_mdx = sse_decode_mdx_note_creatable(deserializer);
    var var_frontMatter = sse_decode_front_matter(deserializer);
    var var_tags = sse_decode_list_taggable(deserializer);
    return MdxNoteGroup(
      mdx: var_mdx,
      frontMatter: var_frontMatter,
      tags: var_tags,
    );
  }

  @protected
  MdxNoteSummary sse_decode_mdx_note_summary(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_32(deserializer);
    var var_filePath = sse_decode_opt_String(deserializer);
    var var_rawBody = sse_decode_String(deserializer);
    return MdxNoteSummary(
      id: var_id,
      filePath: var_filePath,
      rawBody: var_rawBody,
    );
  }

  @protected
  NoteType sse_decode_note_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return NoteType.values[inner];
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  EmbeddedFile?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  FlusterError?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  PathBuf?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  Pod?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Naive(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Naive(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<FlusterError>?
  sse_decode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  SettingPageId sse_decode_setting_page_id(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SettingPageId.values[inner];
  }

  @protected
  Snippet sse_decode_snippet(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_32(deserializer);
    var var_label = sse_decode_String(deserializer);
    var var_desc = sse_decode_String(deserializer);
    var var_lang = sse_decode_String(deserializer);
    var var_body = sse_decode_String(deserializer);
    return Snippet(
      id: var_id,
      label: var_label,
      desc: var_desc,
      lang: var_lang,
      body: var_body,
    );
  }

  @protected
  SummaryListQuery sse_decode_summary_list_query(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_mdxPerPage = sse_decode_u_16(deserializer);
    var var_mdxPage = sse_decode_u_16(deserializer);
    return SummaryListQuery(mdxPerPage: var_mdxPerPage, mdxPage: var_mdxPage);
  }

  @protected
  SummaryListResults sse_decode_summary_list_results(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_mdxNotes = sse_decode_list_mdx_note_summary(deserializer);
    return SummaryListResults(mdxNotes: var_mdxNotes);
  }

  @protected
  SupportedSyntaxLanguage sse_decode_supported_syntax_language(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SupportedSyntaxLanguage.values[inner];
  }

  @protected
  SyncFilesystemDirectoryOptions sse_decode_sync_filesystem_directory_options(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_dirPath = sse_decode_String(deserializer);
    var var_bibPath = sse_decode_opt_String(deserializer);
    var var_nThreads = sse_decode_u_32(deserializer);
    return SyncFilesystemDirectoryOptions(
      dirPath: var_dirPath,
      bibPath: var_bibPath,
      nThreads: var_nThreads,
    );
  }

  @protected
  TagCreatable sse_decode_tag_creatable(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_value = sse_decode_String(deserializer);
    var var_tagType = sse_decode_String(deserializer);
    return TagCreatable(id: var_id, value: var_value, tagType: var_tagType);
  }

  @protected
  TagEntity sse_decode_tag_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_32(deserializer);
    var var_value = sse_decode_String(deserializer);
    var var_tagType = sse_decode_String(deserializer);
    return TagEntity(id: var_id, value: var_value, tagType: var_tagType);
  }

  @protected
  TagFromContentResult sse_decode_tag_from_content_result(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tags = sse_decode_list_taggable(deserializer);
    var var_parsedContent = sse_decode_String(deserializer);
    return TagFromContentResult(
      tags: var_tags,
      parsedContent: var_parsedContent,
    );
  }

  @protected
  Taggable sse_decode_taggable(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_String(deserializer);
    var var_tagType = sse_decode_taggable_type_enum(deserializer);
    return Taggable(value: var_value, tagType: var_tagType);
  }

  @protected
  TaggableTypeEnum sse_decode_taggable_type_enum(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TaggableTypeEnum.values[inner];
  }

  @protected
  TaggableWithFrontMatterJoin sse_decode_taggable_with_front_matter_join(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tagId = sse_decode_i_32(deserializer);
    var var_frontMatterId = sse_decode_i_32(deserializer);
    return TaggableWithFrontMatterJoin(
      tagId: var_tagId,
      frontMatterId: var_frontMatterId,
    );
  }

  @protected
  TaggableWithMdxNoteJoin sse_decode_taggable_with_mdx_note_join(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tagId = sse_decode_i_32(deserializer);
    var var_mdxNoteId = sse_decode_i_32(deserializer);
    return TaggableWithMdxNoteJoin(tagId: var_tagId, mdxNoteId: var_mdxNoteId);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    BibEntryEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as BibEntryEntityImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    DbRecord self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DbRecordImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    EmbeddedFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EmbeddedFileImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    EmbeddedTypescriptFiles self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EmbeddedTypescriptFilesImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    FlusterError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterErrorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResult(
    FlusterResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterResultImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultAsyncPgConnection(
    FlusterResultAsyncPgConnection self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterResultAsyncPgConnectionImpl).frbInternalSseEncode(
        move: true,
      ),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup(
    FlusterResultMdxNoteGroup self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterResultMdxNoteGroupImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecFrontMatterEntity(
    FlusterResultVecFrontMatterEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterResultVecFrontMatterEntityImpl).frbInternalSseEncode(
        move: true,
      ),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecMdxNoteEntity(
    FlusterResultVecMdxNoteEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterResultVecMdxNoteEntityImpl).frbInternalSseEncode(
        move: true,
      ),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    PathBuf self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PathBufImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    Pod self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PodImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId(
    RecordId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RecordIdImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRegex(
    Regex self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RegexImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
    Value self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ValueImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncPgConnection(
    AsyncPgConnection self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as AsyncPgConnectionImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    BibEntryEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as BibEntryEntityImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    DbRecord self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DbRecordImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    FlusterDb self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterDbImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    BibEntryEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as BibEntryEntityImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    DbRecord self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DbRecordImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    FlusterDb self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterDbImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity(
    ParsedEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ParsedEntityImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
    SenderFlusterError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SenderFlusterErrorImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void sse_encode_Chrono_Naive(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(
      PlatformInt64Util.from(self.microsecondsSinceEpoch),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncPgConnection(
    AsyncPgConnection self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as AsyncPgConnectionImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    BibEntryEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as BibEntryEntityImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    DbRecord self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DbRecordImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    EmbeddedFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EmbeddedFileImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    EmbeddedTypescriptFiles self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EmbeddedTypescriptFilesImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    FlusterDb self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterDbImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    FlusterError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterErrorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResult(
    FlusterResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterResultImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultAsyncPgConnection(
    FlusterResultAsyncPgConnection self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterResultAsyncPgConnectionImpl).frbInternalSseEncode(
        move: null,
      ),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup(
    FlusterResultMdxNoteGroup self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterResultMdxNoteGroupImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecFrontMatterEntity(
    FlusterResultVecFrontMatterEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterResultVecFrontMatterEntityImpl).frbInternalSseEncode(
        move: null,
      ),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecMdxNoteEntity(
    FlusterResultVecMdxNoteEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterResultVecMdxNoteEntityImpl).frbInternalSseEncode(
        move: null,
      ),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity(
    ParsedEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ParsedEntityImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    PathBuf self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PathBufImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    Pod self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PodImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId(
    RecordId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RecordIdImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRegex(
    Regex self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RegexImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
    SenderFlusterError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SenderFlusterErrorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
    Value self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ValueImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bibtex_file(BibtexFile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.path, serializer);
    sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
      self.entries,
      serializer,
    );
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    EmbeddedFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    FlusterError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    PathBuf self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    Pod self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
      self,
      serializer,
    );
  }

  @protected
  void sse_encode_box_autoadd_Chrono_Naive(
    DateTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Naive(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bibtex_file(
    BibtexFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bibtex_file(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_mdx_note_creatable(
    MdxNoteCreatable self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_mdx_note_creatable(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sync_filesystem_directory_options(
    SyncFilesystemDirectoryOptions self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sync_filesystem_directory_options(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tag_entity(
    TagEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tag_entity(self, serializer);
  }

  @protected
  void sse_encode_cross_language_file(
    CrossLanguageFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.path, serializer);
    sse_encode_note_type(self.noteType, serializer);
  }

  @protected
  void sse_encode_fluster_database_status(
    FlusterDatabaseStatus self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_front_matter(FrontMatter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_front_matter_entity(self.data, serializer);
    sse_encode_list_tag_creatable(self.tags, serializer);
    sse_encode_list_tag_creatable(self.subjects, serializer);
    sse_encode_list_tag_creatable(self.topics, serializer);
  }

  @protected
  void sse_encode_front_matter_entity(
    FrontMatterEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.id, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_opt_String(self.summary, serializer);
    sse_encode_i_32(self.mdxNoteId, serializer);
    sse_encode_opt_String(self.userProvidedId, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_keymap_section_id(
    KeymapSectionId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    List<BibEntryEntity> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
        item,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    List<FlusterError> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_mdx_note_creatable(
    List<MdxNoteCreatable> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_mdx_note_creatable(item, serializer);
    }
  }

  @protected
  void sse_encode_list_mdx_note_summary(
    List<MdxNoteSummary> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_mdx_note_summary(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_tag_creatable(
    List<TagCreatable> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tag_creatable(item, serializer);
    }
  }

  @protected
  void sse_encode_list_taggable(List<Taggable> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_taggable(item, serializer);
    }
  }

  @protected
  void sse_encode_math_label_option(
    MathLabelOption self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_mdx_note_creatable(
    MdxNoteCreatable self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_32(self.id, serializer);
    sse_encode_opt_String(self.filePath, serializer);
    sse_encode_String(self.rawBody, serializer);
    sse_encode_opt_box_autoadd_Chrono_Naive(self.ctime, serializer);
    sse_encode_opt_box_autoadd_Chrono_Naive(self.mtime, serializer);
  }

  @protected
  void sse_encode_mdx_note_group(MdxNoteGroup self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_mdx_note_creatable(self.mdx, serializer);
    sse_encode_front_matter(self.frontMatter, serializer);
    sse_encode_list_taggable(self.tags, serializer);
  }

  @protected
  void sse_encode_mdx_note_summary(
    MdxNoteSummary self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.id, serializer);
    sse_encode_opt_String(self.filePath, serializer);
    sse_encode_String(self.rawBody, serializer);
  }

  @protected
  void sse_encode_note_type(NoteType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    EmbeddedFile? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    FlusterError? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    PathBuf? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    Pod? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
        self,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Naive(
    DateTime? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Chrono_Naive(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_32(self, serializer);
    }
  }

  @protected
  void
  sse_encode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    List<FlusterError>? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
        self,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_setting_page_id(
    SettingPageId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_snippet(Snippet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.id, serializer);
    sse_encode_String(self.label, serializer);
    sse_encode_String(self.desc, serializer);
    sse_encode_String(self.lang, serializer);
    sse_encode_String(self.body, serializer);
  }

  @protected
  void sse_encode_summary_list_query(
    SummaryListQuery self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self.mdxPerPage, serializer);
    sse_encode_u_16(self.mdxPage, serializer);
  }

  @protected
  void sse_encode_summary_list_results(
    SummaryListResults self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_mdx_note_summary(self.mdxNotes, serializer);
  }

  @protected
  void sse_encode_supported_syntax_language(
    SupportedSyntaxLanguage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_sync_filesystem_directory_options(
    SyncFilesystemDirectoryOptions self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.dirPath, serializer);
    sse_encode_opt_String(self.bibPath, serializer);
    sse_encode_u_32(self.nThreads, serializer);
  }

  @protected
  void sse_encode_tag_creatable(TagCreatable self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_32(self.id, serializer);
    sse_encode_String(self.value, serializer);
    sse_encode_String(self.tagType, serializer);
  }

  @protected
  void sse_encode_tag_entity(TagEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.id, serializer);
    sse_encode_String(self.value, serializer);
    sse_encode_String(self.tagType, serializer);
  }

  @protected
  void sse_encode_tag_from_content_result(
    TagFromContentResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_taggable(self.tags, serializer);
    sse_encode_String(self.parsedContent, serializer);
  }

  @protected
  void sse_encode_taggable(Taggable self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.value, serializer);
    sse_encode_taggable_type_enum(self.tagType, serializer);
  }

  @protected
  void sse_encode_taggable_type_enum(
    TaggableTypeEnum self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_taggable_with_front_matter_join(
    TaggableWithFrontMatterJoin self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.tagId, serializer);
    sse_encode_i_32(self.frontMatterId, serializer);
  }

  @protected
  void sse_encode_taggable_with_mdx_note_join(
    TaggableWithMdxNoteJoin self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.tagId, serializer);
    sse_encode_i_32(self.mdxNoteId, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class AsyncPgConnectionImpl extends RustOpaque implements AsyncPgConnection {
  // Not to be used by end users
  AsyncPgConnectionImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AsyncPgConnectionImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AsyncPgConnection,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AsyncPgConnection,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_AsyncPgConnectionPtr,
  );
}

@sealed
class BibEntryEntityImpl extends RustOpaque implements BibEntryEntity {
  // Not to be used by end users
  BibEntryEntityImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BibEntryEntityImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BibEntryEntity,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BibEntryEntity,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_BibEntryEntityPtr,
  );

  Value get data => RustLib.instance.api
      .crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetData(
        that: this,
      );

  int get id => RustLib.instance.api
      .crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetId(
        that: this,
      );

  String? get pdfPath => RustLib.instance.api
      .crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetPdfPath(
        that: this,
      );

  bool get read => RustLib.instance.api
      .crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorGetRead(
        that: this,
      );

  set data(Value data) => RustLib.instance.api
      .crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetData(
        that: this,
        data: data,
      );

  set id(int id) => RustLib.instance.api
      .crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetId(
        that: this,
        id: id,
      );

  set pdfPath(String? pdfPath) => RustLib.instance.api
      .crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetPdfPath(
        that: this,
        pdfPath: pdfPath,
      );

  set read(bool read) => RustLib.instance.api
      .crateApiModelsBibliographyBibEntryBibEntryEntityAutoAccessorSetRead(
        that: this,
        read: read,
      );
}

@sealed
class DbRecordImpl extends RustOpaque implements DbRecord {
  // Not to be used by end users
  DbRecordImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DbRecordImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DbRecord,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DbRecord,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DbRecordPtr,
  );

  RecordId get id => RustLib.instance.api
      .crateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorGetId(that: this);

  set id(RecordId id) => RustLib.instance.api
      .crateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorSetId(
        that: this,
        id: id,
      );
}

@sealed
class EmbeddedFileImpl extends RustOpaque implements EmbeddedFile {
  // Not to be used by end users
  EmbeddedFileImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EmbeddedFileImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_EmbeddedFile,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_EmbeddedFile,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_EmbeddedFilePtr,
  );
}

@sealed
class EmbeddedTypescriptFilesImpl extends RustOpaque
    implements EmbeddedTypescriptFiles {
  // Not to be used by end users
  EmbeddedTypescriptFilesImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EmbeddedTypescriptFilesImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_EmbeddedTypescriptFiles,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_EmbeddedTypescriptFiles,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_EmbeddedTypescriptFilesPtr,
  );
}

@sealed
class FlusterDbImpl extends RustOpaque implements FlusterDb {
  // Not to be used by end users
  FlusterDbImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FlusterDbImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FlusterDb,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterDb,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterDbPtr,
  );
}

@sealed
class FlusterErrorImpl extends RustOpaque implements FlusterError {
  // Not to be used by end users
  FlusterErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FlusterErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FlusterError,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterError,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterErrorPtr,
  );
}

@sealed
class FlusterResultAsyncPgConnectionImpl extends RustOpaque
    implements FlusterResultAsyncPgConnection {
  // Not to be used by end users
  FlusterResultAsyncPgConnectionImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FlusterResultAsyncPgConnectionImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_FlusterResultAsyncPgConnection,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FlusterResultAsyncPgConnection,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FlusterResultAsyncPgConnectionPtr,
  );
}

@sealed
class FlusterResultImpl extends RustOpaque implements FlusterResult {
  // Not to be used by end users
  FlusterResultImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FlusterResultImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FlusterResult,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterResult,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterResultPtr,
  );
}

@sealed
class FlusterResultMdxNoteGroupImpl extends RustOpaque
    implements FlusterResultMdxNoteGroup {
  // Not to be used by end users
  FlusterResultMdxNoteGroupImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FlusterResultMdxNoteGroupImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_FlusterResultMdxNoteGroup,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FlusterResultMdxNoteGroup,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FlusterResultMdxNoteGroupPtr,
  );
}

@sealed
class FlusterResultVecFrontMatterEntityImpl extends RustOpaque
    implements FlusterResultVecFrontMatterEntity {
  // Not to be used by end users
  FlusterResultVecFrontMatterEntityImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FlusterResultVecFrontMatterEntityImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_FlusterResultVecFrontMatterEntity,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FlusterResultVecFrontMatterEntity,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FlusterResultVecFrontMatterEntityPtr,
  );
}

@sealed
class FlusterResultVecMdxNoteEntityImpl extends RustOpaque
    implements FlusterResultVecMdxNoteEntity {
  // Not to be used by end users
  FlusterResultVecMdxNoteEntityImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FlusterResultVecMdxNoteEntityImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_FlusterResultVecMdxNoteEntity,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FlusterResultVecMdxNoteEntity,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FlusterResultVecMdxNoteEntityPtr,
  );
}

@sealed
class ParsedEntityImpl extends RustOpaque implements ParsedEntity {
  // Not to be used by end users
  ParsedEntityImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ParsedEntityImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ParsedEntity,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ParsedEntity,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ParsedEntityPtr,
  );
}

@sealed
class PathBufImpl extends RustOpaque implements PathBuf {
  // Not to be used by end users
  PathBufImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PathBufImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PathBuf,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PathBuf,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PathBufPtr,
  );
}

@sealed
class PodImpl extends RustOpaque implements Pod {
  // Not to be used by end users
  PodImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PodImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Pod,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Pod,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PodPtr,
  );
}

@sealed
class RecordIdImpl extends RustOpaque implements RecordId {
  // Not to be used by end users
  RecordIdImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RecordIdImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_RecordId,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_RecordId,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_RecordIdPtr,
  );
}

@sealed
class RegexImpl extends RustOpaque implements Regex {
  // Not to be used by end users
  RegexImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RegexImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Regex,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Regex,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_RegexPtr,
  );
}

@sealed
class SenderFlusterErrorImpl extends RustOpaque implements SenderFlusterError {
  // Not to be used by end users
  SenderFlusterErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SenderFlusterErrorImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SenderFlusterError,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SenderFlusterError,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_SenderFlusterErrorPtr,
  );
}

@sealed
class ValueImpl extends RustOpaque implements Value {
  // Not to be used by end users
  ValueImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ValueImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Value,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Value,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ValuePtr,
  );
}
