// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/data_interface/get_database_status.dart';
import 'api/embedded_ts.dart';
import 'api/fs/fs_setup.dart';
import 'api/fs/fs_utils.dart';
import 'api/global_actions/get_summary_list/get_summary_list_data.dart';
import 'api/global_actions/get_summary_list/summary_list_query.dart';
import 'api/global_actions/get_summary_list/summary_list_result.dart';
import 'api/global_actions/get_summary_list/summary_types/mdx_note_summary.dart';
import 'api/global_actions/parse_directory/sync_fs_directory/models/sync_filesystem_options.dart';
import 'api/global_actions/parse_directory/sync_fs_directory/sync_filesystem_directory.dart';
import 'api/global_actions/parse_directory/sync_fs_directory/sync_methods/sync_mdx_notes.dart';
import 'api/global_actions/parse_directory/sync_fs_directory/sync_methods/sync_user_bibliography.dart';
import 'api/initialize/on_desktop_init.dart';
import 'api/models/bibliography/bib_file.dart';
import 'api/models/bibliography/citation.dart';
import 'api/models/bibliography/reading_list.dart';
import 'api/models/enums/parsable_file_extension.dart';
import 'api/models/enums/setting_page_ids.dart';
import 'api/models/equation/equation_model.dart';
import 'api/models/nested_models/code/supported_syntax_language.dart';
import 'api/models/nested_models/code/supported_syntax_theme.dart';
import 'api/models/nested_models/fluster_datetime/fluster_time.dart';
import 'api/models/notes/front_matter/front_matter_model.dart';
import 'api/models/notes/mdx/mdx_note.dart';
import 'api/models/params/cross_language_file_object.dart';
import 'api/models/params/sync_mdx_typescript_params.dart';
import 'api/models/settings/setting_page_id.dart';
import 'api/models/snippet/snippet_model.dart';
import 'api/models/taggable/tag_model.dart';
import 'api/repositories/notes/mdx/mdx_notes_repository.dart';
import 'api/repositories/notes/mdx/query_params.dart';
import 'api/search/get_text_similarity.dart';
import 'api/typedefs/note_type_utils.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 445113743;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'fluster_native_interface',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  RecordId crateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorGetId({
    required DbRecord that,
  });

  void crateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorSetId({
    required DbRecord that,
    required RecordId id,
  });

  Future<EmbeddedFile?> crateApiEmbeddedTsEmbeddedTypescriptFilesGet({
    required String filePath,
  });

  OffsetDateTime
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorGetValue({
    required FlusterTime that,
  });

  void
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorSetValue({
    required FlusterTime that,
    required OffsetDateTime value,
  });

  Future<FlusterTime>
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeDefault();

  Future<FlusterTime?>
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeFromFileTime({
    FileTime? ft,
  });

  Future<FlusterTime>
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeNow();

  FrontMatterEntity
  crateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorGetFrontMatter({
    required MdxNoteSummary that,
  });

  Thing
  crateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorGetId({
    required MdxNoteSummary that,
  });

  void
  crateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorSetFrontMatter({
    required MdxNoteSummary that,
    required FrontMatterEntity frontMatter,
  });

  void
  crateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorSetId({
    required MdxNoteSummary that,
    required Thing id,
  });

  FlusterTime
  crateApiModelsBibliographyReadingListReadingListAutoAccessorGetCreatedAt({
    required ReadingList that,
  });

  String? crateApiModelsBibliographyReadingListReadingListAutoAccessorGetId({
    required ReadingList that,
  });

  String crateApiModelsBibliographyReadingListReadingListAutoAccessorGetLabel({
    required ReadingList that,
  });

  List<BibEntryEntity>
  crateApiModelsBibliographyReadingListReadingListAutoAccessorGetPapers({
    required ReadingList that,
  });

  void
  crateApiModelsBibliographyReadingListReadingListAutoAccessorSetCreatedAt({
    required ReadingList that,
    required FlusterTime createdAt,
  });

  void crateApiModelsBibliographyReadingListReadingListAutoAccessorSetId({
    required ReadingList that,
    String? id,
  });

  void crateApiModelsBibliographyReadingListReadingListAutoAccessorSetLabel({
    required ReadingList that,
    required String label,
  });

  void crateApiModelsBibliographyReadingListReadingListAutoAccessorSetPapers({
    required ReadingList that,
    required List<BibEntryEntity> papers,
  });

  Future<ReadingList> crateApiModelsBibliographyReadingListReadingListDefault();

  Future<BibEntryEntity>
  crateApiModelsBibliographyCitationBibEntryEntityDefault();

  Future<BibtexFile>
  crateApiModelsBibliographyBibFileBibtexFileFromFilesystemPath({
    required String fspath,
  });

  Future<BibtexFile>
  crateApiModelsBibliographyBibFileBibtexFileFromRawFileContent({
    required String fileContent,
  });

  Future<void> crateApiModelsBibliographyBibFileBibtexFileSaveEntries({
    required BibtexFile that,
    required SurrealDb db,
  });

  Future<CrossLanguageFile>
  crateApiModelsParamsCrossLanguageFileObjectCrossLanguageFileDefault();

  Future<DbTokenizerLanguage>
  crateApiRepositoriesNotesMdxQueryParamsDbTokenizerLanguageDefault();

  Future<EquationEntity>
  crateApiModelsEquationEquationModelEquationEntityDefault();

  Future<FrontMatterEntity>
  crateApiModelsNotesFrontMatterFrontMatterModelFrontMatterEntityDefault();

  Future<FrontMatterEntity>
  crateApiModelsNotesFrontMatterFrontMatterModelFrontMatterEntityFromGrayMatter({
    Pod? pod,
  });

  String crateApiFsFsUtilsGetAppConfigDir();

  String crateApiFsFsUtilsGetAppDataDir();

  Future<FlusterDatabaseStatus>
  crateApiDataInterfaceGetDatabaseStatusGetDatabaseStatus();

  Future<SummaryListResults>
  crateApiGlobalActionsGetSummaryListGetSummaryListDataGetSummaryList({
    required SummaryListQuery query,
  });

  double crateApiSearchGetTextSimilarityGetTextSimilarity({
    required String a,
    required String b,
  });

  Future<KeymapSectionId>
  crateApiModelsEnumsSettingPageIdsKeymapSectionIdDefault();

  Future<MathLabelOption>
  crateApiModelsParamsSyncMdxTypescriptParamsMathLabelOptionDefault();

  Future<MdxNoteEntity>
  crateApiModelsNotesMdxMdxNoteMdxNoteEntityFromFileSystemPath({
    required String filePath,
  });

  Future<MdxNoteEntity> crateApiModelsNotesMdxMdxNoteMdxNoteEntityFromIdString({
    required String id,
    required SurrealDb db,
  });

  Future<MdxNoteEntity>
  crateApiModelsNotesMdxMdxNoteMdxNoteEntityFromRawMdxString({
    required String rawFileContent,
    String? filePath,
  });

  Future<String> crateApiModelsNotesMdxMdxNoteMdxNoteEntityGetId({
    required MdxNoteEntity that,
  });

  Future<FlusterError?> crateApiModelsNotesMdxMdxNoteMdxNoteEntitySave({
    required MdxNoteEntity that,
    required SurrealDb db,
  });

  Future<MdxNotesRepository>
  crateApiRepositoriesNotesMdxMdxNotesRepositoryMdxNotesRepositoryDefault();

  Future<MdxNotesRepository>
  crateApiRepositoriesNotesMdxMdxNotesRepositoryMdxNotesRepositoryNew();

  Future<List<MdxNoteEntity>>
  crateApiRepositoriesNotesMdxMdxNotesRepositoryMdxNotesRepositorySearch({
    required MdxNotesRepository that,
    required MdxNoteQueryParams query,
  });

  Future<NoteType> crateApiModelsEnumsParsableFileExtensionNoteTypeDefault();

  Future<void> crateApiInitializeOnDesktopInitOnDesktopInit();

  bool crateApiFsFsUtilsPathExists({required String filePath});

  Future<SettingPageId>
  crateApiModelsSettingsSettingPageIdSettingPageIdDefault();

  Future<FlusterError?> crateApiFsFsSetupSetupFileSystemForData();

  Future<Snippet> crateApiModelsSnippetSnippetModelSnippetDefault();

  Future<SummaryListQuery>
  crateApiGlobalActionsGetSummaryListSummaryListQuerySummaryListQueryDefault();

  Future<SummaryListResults>
  crateApiGlobalActionsGetSummaryListSummaryListResultSummaryListResultsDefault();

  Future<SupportedSyntaxLanguage>
  crateApiModelsNestedModelsCodeSupportedSyntaxLanguageSupportedSyntaxLanguageDefault();

  Future<SupportedSyntaxTheme>
  crateApiModelsNestedModelsCodeSupportedSyntaxThemeSupportedSyntaxThemeDefault();

  Future<List<FlusterError>?>
  crateApiGlobalActionsParseDirectorySyncFsDirectorySyncFilesystemDirectorySyncDirectory({
    required SyncFilesystemDirectoryOptions opts,
  });

  Future<SyncFilesystemDirectoryOptions>
  crateApiGlobalActionsParseDirectorySyncFsDirectoryModelsSyncFilesystemOptionsSyncFilesystemDirectoryOptionsDefault();

  Future<void>
  crateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncMdxNotesSyncMdxFilesystemNotes({
    required String notesPath,
    required SenderFlusterError errorSender,
    required SurrealDb db,
  });

  Future<void>
  crateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncUserBibliographySyncUserBibliography({
    required String bibPath,
    required SenderFlusterError errorSender,
    required SurrealDb db,
    required int nThreads,
  });

  Future<TagFromContentResult> crateApiModelsTaggableTagModelTagFromMdxContent({
    required String rawContent,
  });

  Future<Tag> crateApiModelsTaggableTagModelTagFromString({
    required String val,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_DbRecord;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_DbRecord;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DbRecordPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EmbeddedFile;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EmbeddedFile;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EmbeddedFilePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EmbeddedTypescriptFiles;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EmbeddedTypescriptFiles;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_EmbeddedTypescriptFilesPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FileTime;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FileTime;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FileTimePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FlusterErrorPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterTime;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterTime;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FlusterTimePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MdxNoteSummary;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MdxNoteSummary;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_MdxNoteSummaryPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_OffsetDateTime;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_OffsetDateTime;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_OffsetDateTimePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Pod;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Pod;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PodPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ReadingList;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ReadingList;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ReadingListPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RecordId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RecordId;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RecordIdPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SenderFlusterError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SenderFlusterError;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_SenderFlusterErrorPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SurrealDb;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SurrealDb;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SurrealDbPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Thing;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Thing;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ThingPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  RecordId crateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorGetId({
    required DbRecord that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorGetIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorGetIdConstMeta =>
      const TaskConstMeta(
        debugName: "DbRecord_auto_accessor_get_id",
        argNames: ["that"],
      );

  @override
  void crateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorSetId({
    required DbRecord that,
    required RecordId id,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId(
            id,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorSetIdConstMeta,
        argValues: [that, id],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorSetIdConstMeta =>
      const TaskConstMeta(
        debugName: "DbRecord_auto_accessor_set_id",
        argNames: ["that", "id"],
      );

  @override
  Future<EmbeddedFile?> crateApiEmbeddedTsEmbeddedTypescriptFilesGet({
    required String filePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(filePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEmbeddedTsEmbeddedTypescriptFilesGetConstMeta,
        argValues: [filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEmbeddedTsEmbeddedTypescriptFilesGetConstMeta =>
      const TaskConstMeta(
        debugName: "EmbeddedTypescriptFiles_get",
        argNames: ["filePath"],
      );

  @override
  OffsetDateTime
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorGetValue({
    required FlusterTime that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorGetValueConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorGetValueConstMeta =>
      const TaskConstMeta(
        debugName: "FlusterTime_auto_accessor_get_value",
        argNames: ["that"],
      );

  @override
  void
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorSetValue({
    required FlusterTime that,
    required OffsetDateTime value,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime(
            value,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorSetValueConstMeta,
        argValues: [that, value],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorSetValueConstMeta =>
      const TaskConstMeta(
        debugName: "FlusterTime_auto_accessor_set_value",
        argNames: ["that", "value"],
      );

  @override
  Future<FlusterTime>
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeDefaultConstMeta =>
      const TaskConstMeta(debugName: "FlusterTime_default", argNames: []);

  @override
  Future<FlusterTime?>
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeFromFileTime({
    FileTime? ft,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
            ft,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeFromFileTimeConstMeta,
        argValues: [ft],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeFromFileTimeConstMeta =>
      const TaskConstMeta(
        debugName: "FlusterTime_from_file_time",
        argNames: ["ft"],
      );

  @override
  Future<FlusterTime>
  crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeNow() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeNowConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeNowConstMeta =>
      const TaskConstMeta(debugName: "FlusterTime_now", argNames: []);

  @override
  FrontMatterEntity
  crateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorGetFrontMatter({
    required MdxNoteSummary that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_front_matter_entity,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorGetFrontMatterConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorGetFrontMatterConstMeta =>
      const TaskConstMeta(
        debugName: "MdxNoteSummary_auto_accessor_get_front_matter",
        argNames: ["that"],
      );

  @override
  Thing
  crateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorGetId({
    required MdxNoteSummary that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorGetIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorGetIdConstMeta =>
      const TaskConstMeta(
        debugName: "MdxNoteSummary_auto_accessor_get_id",
        argNames: ["that"],
      );

  @override
  void
  crateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorSetFrontMatter({
    required MdxNoteSummary that,
    required FrontMatterEntity frontMatter,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
            that,
            serializer,
          );
          sse_encode_front_matter_entity(frontMatter, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorSetFrontMatterConstMeta,
        argValues: [that, frontMatter],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorSetFrontMatterConstMeta =>
      const TaskConstMeta(
        debugName: "MdxNoteSummary_auto_accessor_set_front_matter",
        argNames: ["that", "frontMatter"],
      );

  @override
  void
  crateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorSetId({
    required MdxNoteSummary that,
    required Thing id,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
            id,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorSetIdConstMeta,
        argValues: [that, id],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorSetIdConstMeta =>
      const TaskConstMeta(
        debugName: "MdxNoteSummary_auto_accessor_set_id",
        argNames: ["that", "id"],
      );

  @override
  FlusterTime
  crateApiModelsBibliographyReadingListReadingListAutoAccessorGetCreatedAt({
    required ReadingList that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyReadingListReadingListAutoAccessorGetCreatedAtConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyReadingListReadingListAutoAccessorGetCreatedAtConstMeta =>
      const TaskConstMeta(
        debugName: "ReadingList_auto_accessor_get_created_at",
        argNames: ["that"],
      );

  @override
  String? crateApiModelsBibliographyReadingListReadingListAutoAccessorGetId({
    required ReadingList that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyReadingListReadingListAutoAccessorGetIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyReadingListReadingListAutoAccessorGetIdConstMeta =>
      const TaskConstMeta(
        debugName: "ReadingList_auto_accessor_get_id",
        argNames: ["that"],
      );

  @override
  String crateApiModelsBibliographyReadingListReadingListAutoAccessorGetLabel({
    required ReadingList that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyReadingListReadingListAutoAccessorGetLabelConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyReadingListReadingListAutoAccessorGetLabelConstMeta =>
      const TaskConstMeta(
        debugName: "ReadingList_auto_accessor_get_label",
        argNames: ["that"],
      );

  @override
  List<BibEntryEntity>
  crateApiModelsBibliographyReadingListReadingListAutoAccessorGetPapers({
    required ReadingList that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_bib_entry_entity,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyReadingListReadingListAutoAccessorGetPapersConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyReadingListReadingListAutoAccessorGetPapersConstMeta =>
      const TaskConstMeta(
        debugName: "ReadingList_auto_accessor_get_papers",
        argNames: ["that"],
      );

  @override
  void
  crateApiModelsBibliographyReadingListReadingListAutoAccessorSetCreatedAt({
    required ReadingList that,
    required FlusterTime createdAt,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
            createdAt,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyReadingListReadingListAutoAccessorSetCreatedAtConstMeta,
        argValues: [that, createdAt],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyReadingListReadingListAutoAccessorSetCreatedAtConstMeta =>
      const TaskConstMeta(
        debugName: "ReadingList_auto_accessor_set_created_at",
        argNames: ["that", "createdAt"],
      );

  @override
  void crateApiModelsBibliographyReadingListReadingListAutoAccessorSetId({
    required ReadingList that,
    String? id,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
            that,
            serializer,
          );
          sse_encode_opt_String(id, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyReadingListReadingListAutoAccessorSetIdConstMeta,
        argValues: [that, id],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyReadingListReadingListAutoAccessorSetIdConstMeta =>
      const TaskConstMeta(
        debugName: "ReadingList_auto_accessor_set_id",
        argNames: ["that", "id"],
      );

  @override
  void crateApiModelsBibliographyReadingListReadingListAutoAccessorSetLabel({
    required ReadingList that,
    required String label,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
            that,
            serializer,
          );
          sse_encode_String(label, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyReadingListReadingListAutoAccessorSetLabelConstMeta,
        argValues: [that, label],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyReadingListReadingListAutoAccessorSetLabelConstMeta =>
      const TaskConstMeta(
        debugName: "ReadingList_auto_accessor_set_label",
        argNames: ["that", "label"],
      );

  @override
  void crateApiModelsBibliographyReadingListReadingListAutoAccessorSetPapers({
    required ReadingList that,
    required List<BibEntryEntity> papers,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
            that,
            serializer,
          );
          sse_encode_list_bib_entry_entity(papers, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyReadingListReadingListAutoAccessorSetPapersConstMeta,
        argValues: [that, papers],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyReadingListReadingListAutoAccessorSetPapersConstMeta =>
      const TaskConstMeta(
        debugName: "ReadingList_auto_accessor_set_papers",
        argNames: ["that", "papers"],
      );

  @override
  Future<ReadingList>
  crateApiModelsBibliographyReadingListReadingListDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyReadingListReadingListDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyReadingListReadingListDefaultConstMeta =>
      const TaskConstMeta(debugName: "ReadingList_default", argNames: []);

  @override
  Future<BibEntryEntity>
  crateApiModelsBibliographyCitationBibEntryEntityDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bib_entry_entity,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyCitationBibEntryEntityDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyCitationBibEntryEntityDefaultConstMeta =>
      const TaskConstMeta(debugName: "bib_entry_entity_default", argNames: []);

  @override
  Future<BibtexFile>
  crateApiModelsBibliographyBibFileBibtexFileFromFilesystemPath({
    required String fspath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(fspath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bibtex_file,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibFileBibtexFileFromFilesystemPathConstMeta,
        argValues: [fspath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibFileBibtexFileFromFilesystemPathConstMeta =>
      const TaskConstMeta(
        debugName: "bibtex_file_from_filesystem_path",
        argNames: ["fspath"],
      );

  @override
  Future<BibtexFile>
  crateApiModelsBibliographyBibFileBibtexFileFromRawFileContent({
    required String fileContent,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(fileContent, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bibtex_file,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibFileBibtexFileFromRawFileContentConstMeta,
        argValues: [fileContent],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibFileBibtexFileFromRawFileContentConstMeta =>
      const TaskConstMeta(
        debugName: "bibtex_file_from_raw_file_content",
        argNames: ["fileContent"],
      );

  @override
  Future<void> crateApiModelsBibliographyBibFileBibtexFileSaveEntries({
    required BibtexFile that,
    required SurrealDb db,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_bibtex_file(that, serializer);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealDb(
            db,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibFileBibtexFileSaveEntriesConstMeta,
        argValues: [that, db],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibFileBibtexFileSaveEntriesConstMeta =>
      const TaskConstMeta(
        debugName: "bibtex_file_save_entries",
        argNames: ["that", "db"],
      );

  @override
  Future<CrossLanguageFile>
  crateApiModelsParamsCrossLanguageFileObjectCrossLanguageFileDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_cross_language_file,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsParamsCrossLanguageFileObjectCrossLanguageFileDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsParamsCrossLanguageFileObjectCrossLanguageFileDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "cross_language_file_default",
        argNames: [],
      );

  @override
  Future<DbTokenizerLanguage>
  crateApiRepositoriesNotesMdxQueryParamsDbTokenizerLanguageDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_db_tokenizer_language,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiRepositoriesNotesMdxQueryParamsDbTokenizerLanguageDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiRepositoriesNotesMdxQueryParamsDbTokenizerLanguageDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "db_tokenizer_language_default",
        argNames: [],
      );

  @override
  Future<EquationEntity>
  crateApiModelsEquationEquationModelEquationEntityDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_equation_entity,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsEquationEquationModelEquationEntityDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsEquationEquationModelEquationEntityDefaultConstMeta =>
      const TaskConstMeta(debugName: "equation_entity_default", argNames: []);

  @override
  Future<FrontMatterEntity>
  crateApiModelsNotesFrontMatterFrontMatterModelFrontMatterEntityDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 29,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_front_matter_entity,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsNotesFrontMatterFrontMatterModelFrontMatterEntityDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNotesFrontMatterFrontMatterModelFrontMatterEntityDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "front_matter_entity_default",
        argNames: [],
      );

  @override
  Future<FrontMatterEntity>
  crateApiModelsNotesFrontMatterFrontMatterModelFrontMatterEntityFromGrayMatter({
    Pod? pod,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
            pod,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 30,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_front_matter_entity,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsNotesFrontMatterFrontMatterModelFrontMatterEntityFromGrayMatterConstMeta,
        argValues: [pod],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNotesFrontMatterFrontMatterModelFrontMatterEntityFromGrayMatterConstMeta =>
      const TaskConstMeta(
        debugName: "front_matter_entity_from_gray_matter",
        argNames: ["pod"],
      );

  @override
  String crateApiFsFsUtilsGetAppConfigDir() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta: kCrateApiFsFsUtilsGetAppConfigDirConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFsFsUtilsGetAppConfigDirConstMeta =>
      const TaskConstMeta(debugName: "get_app_config_dir", argNames: []);

  @override
  String crateApiFsFsUtilsGetAppDataDir() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta: kCrateApiFsFsUtilsGetAppDataDirConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFsFsUtilsGetAppDataDirConstMeta =>
      const TaskConstMeta(debugName: "get_app_data_dir", argNames: []);

  @override
  Future<FlusterDatabaseStatus>
  crateApiDataInterfaceGetDatabaseStatusGetDatabaseStatus() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 33,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_fluster_database_status,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDataInterfaceGetDatabaseStatusGetDatabaseStatusConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDataInterfaceGetDatabaseStatusGetDatabaseStatusConstMeta =>
      const TaskConstMeta(debugName: "get_database_status", argNames: []);

  @override
  Future<SummaryListResults>
  crateApiGlobalActionsGetSummaryListGetSummaryListDataGetSummaryList({
    required SummaryListQuery query,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_summary_list_query(query, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 34,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_summary_list_results,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta:
            kCrateApiGlobalActionsGetSummaryListGetSummaryListDataGetSummaryListConstMeta,
        argValues: [query],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsGetSummaryListGetSummaryListDataGetSummaryListConstMeta =>
      const TaskConstMeta(debugName: "get_summary_list", argNames: ["query"]);

  @override
  double crateApiSearchGetTextSimilarityGetTextSimilarity({
    required String a,
    required String b,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(a, serializer);
          sse_encode_String(b, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_64,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSearchGetTextSimilarityGetTextSimilarityConstMeta,
        argValues: [a, b],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSearchGetTextSimilarityGetTextSimilarityConstMeta =>
      const TaskConstMeta(
        debugName: "get_text_similarity",
        argNames: ["a", "b"],
      );

  @override
  Future<KeymapSectionId>
  crateApiModelsEnumsSettingPageIdsKeymapSectionIdDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 36,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_keymap_section_id,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsEnumsSettingPageIdsKeymapSectionIdDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsEnumsSettingPageIdsKeymapSectionIdDefaultConstMeta =>
      const TaskConstMeta(debugName: "keymap_section_id_default", argNames: []);

  @override
  Future<MathLabelOption>
  crateApiModelsParamsSyncMdxTypescriptParamsMathLabelOptionDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 37,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_math_label_option,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsParamsSyncMdxTypescriptParamsMathLabelOptionDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsParamsSyncMdxTypescriptParamsMathLabelOptionDefaultConstMeta =>
      const TaskConstMeta(debugName: "math_label_option_default", argNames: []);

  @override
  Future<MdxNoteEntity>
  crateApiModelsNotesMdxMdxNoteMdxNoteEntityFromFileSystemPath({
    required String filePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(filePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 38,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_mdx_note_entity,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta:
            kCrateApiModelsNotesMdxMdxNoteMdxNoteEntityFromFileSystemPathConstMeta,
        argValues: [filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNotesMdxMdxNoteMdxNoteEntityFromFileSystemPathConstMeta =>
      const TaskConstMeta(
        debugName: "mdx_note_entity_from_file_system_path",
        argNames: ["filePath"],
      );

  @override
  Future<MdxNoteEntity> crateApiModelsNotesMdxMdxNoteMdxNoteEntityFromIdString({
    required String id,
    required SurrealDb db,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(id, serializer);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealDb(
            db,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 39,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_mdx_note_entity,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta:
            kCrateApiModelsNotesMdxMdxNoteMdxNoteEntityFromIdStringConstMeta,
        argValues: [id, db],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNotesMdxMdxNoteMdxNoteEntityFromIdStringConstMeta =>
      const TaskConstMeta(
        debugName: "mdx_note_entity_from_id_string",
        argNames: ["id", "db"],
      );

  @override
  Future<MdxNoteEntity>
  crateApiModelsNotesMdxMdxNoteMdxNoteEntityFromRawMdxString({
    required String rawFileContent,
    String? filePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(rawFileContent, serializer);
          sse_encode_opt_String(filePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 40,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_mdx_note_entity,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta:
            kCrateApiModelsNotesMdxMdxNoteMdxNoteEntityFromRawMdxStringConstMeta,
        argValues: [rawFileContent, filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNotesMdxMdxNoteMdxNoteEntityFromRawMdxStringConstMeta =>
      const TaskConstMeta(
        debugName: "mdx_note_entity_from_raw_mdx_string",
        argNames: ["rawFileContent", "filePath"],
      );

  @override
  Future<String> crateApiModelsNotesMdxMdxNoteMdxNoteEntityGetId({
    required MdxNoteEntity that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_mdx_note_entity(that, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 41,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiModelsNotesMdxMdxNoteMdxNoteEntityGetIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiModelsNotesMdxMdxNoteMdxNoteEntityGetIdConstMeta =>
      const TaskConstMeta(
        debugName: "mdx_note_entity_get_id",
        argNames: ["that"],
      );

  @override
  Future<FlusterError?> crateApiModelsNotesMdxMdxNoteMdxNoteEntitySave({
    required MdxNoteEntity that,
    required SurrealDb db,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_mdx_note_entity(that, serializer);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealDb(
            db,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 42,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiModelsNotesMdxMdxNoteMdxNoteEntitySaveConstMeta,
        argValues: [that, db],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiModelsNotesMdxMdxNoteMdxNoteEntitySaveConstMeta =>
      const TaskConstMeta(
        debugName: "mdx_note_entity_save(dart_style=save)",
        argNames: ["that", "db"],
      );

  @override
  Future<MdxNotesRepository>
  crateApiRepositoriesNotesMdxMdxNotesRepositoryMdxNotesRepositoryDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 43,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_mdx_notes_repository,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiRepositoriesNotesMdxMdxNotesRepositoryMdxNotesRepositoryDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiRepositoriesNotesMdxMdxNotesRepositoryMdxNotesRepositoryDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "mdx_notes_repository_default",
        argNames: [],
      );

  @override
  Future<MdxNotesRepository>
  crateApiRepositoriesNotesMdxMdxNotesRepositoryMdxNotesRepositoryNew() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 44,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_mdx_notes_repository,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiRepositoriesNotesMdxMdxNotesRepositoryMdxNotesRepositoryNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiRepositoriesNotesMdxMdxNotesRepositoryMdxNotesRepositoryNewConstMeta =>
      const TaskConstMeta(debugName: "mdx_notes_repository_new", argNames: []);

  @override
  Future<List<MdxNoteEntity>>
  crateApiRepositoriesNotesMdxMdxNotesRepositoryMdxNotesRepositorySearch({
    required MdxNotesRepository that,
    required MdxNoteQueryParams query,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_mdx_notes_repository(that, serializer);
          sse_encode_box_autoadd_mdx_note_query_params(query, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 45,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_mdx_note_entity,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta:
            kCrateApiRepositoriesNotesMdxMdxNotesRepositoryMdxNotesRepositorySearchConstMeta,
        argValues: [that, query],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiRepositoriesNotesMdxMdxNotesRepositoryMdxNotesRepositorySearchConstMeta =>
      const TaskConstMeta(
        debugName: "mdx_notes_repository_search(dart_style=search)",
        argNames: ["that", "query"],
      );

  @override
  Future<NoteType> crateApiModelsEnumsParsableFileExtensionNoteTypeDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 46,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_note_type,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsEnumsParsableFileExtensionNoteTypeDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsEnumsParsableFileExtensionNoteTypeDefaultConstMeta =>
      const TaskConstMeta(debugName: "note_type_default", argNames: []);

  @override
  Future<void> crateApiInitializeOnDesktopInitOnDesktopInit() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 47,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiInitializeOnDesktopInitOnDesktopInitConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiInitializeOnDesktopInitOnDesktopInitConstMeta =>
      const TaskConstMeta(debugName: "on_desktop_init", argNames: []);

  @override
  bool crateApiFsFsUtilsPathExists({required String filePath}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(filePath, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiFsFsUtilsPathExistsConstMeta,
        argValues: [filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFsFsUtilsPathExistsConstMeta =>
      const TaskConstMeta(debugName: "path_exists", argNames: ["filePath"]);

  @override
  Future<SettingPageId>
  crateApiModelsSettingsSettingPageIdSettingPageIdDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 49,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_setting_page_id,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsSettingsSettingPageIdSettingPageIdDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsSettingsSettingPageIdSettingPageIdDefaultConstMeta =>
      const TaskConstMeta(debugName: "setting_page_id_default", argNames: []);

  @override
  Future<FlusterError?> crateApiFsFsSetupSetupFileSystemForData() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 50,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiFsFsSetupSetupFileSystemForDataConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFsFsSetupSetupFileSystemForDataConstMeta =>
      const TaskConstMeta(
        debugName: "setup_file_system_for_data",
        argNames: [],
      );

  @override
  Future<Snippet> crateApiModelsSnippetSnippetModelSnippetDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 51,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_snippet,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiModelsSnippetSnippetModelSnippetDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiModelsSnippetSnippetModelSnippetDefaultConstMeta =>
      const TaskConstMeta(debugName: "snippet_default", argNames: []);

  @override
  Future<SummaryListQuery>
  crateApiGlobalActionsGetSummaryListSummaryListQuerySummaryListQueryDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 52,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_summary_list_query,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsGetSummaryListSummaryListQuerySummaryListQueryDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsGetSummaryListSummaryListQuerySummaryListQueryDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "summary_list_query_default",
        argNames: [],
      );

  @override
  Future<SummaryListResults>
  crateApiGlobalActionsGetSummaryListSummaryListResultSummaryListResultsDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 53,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_summary_list_results,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsGetSummaryListSummaryListResultSummaryListResultsDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsGetSummaryListSummaryListResultSummaryListResultsDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "summary_list_results_default",
        argNames: [],
      );

  @override
  Future<SupportedSyntaxLanguage>
  crateApiModelsNestedModelsCodeSupportedSyntaxLanguageSupportedSyntaxLanguageDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 54,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_supported_syntax_language,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsNestedModelsCodeSupportedSyntaxLanguageSupportedSyntaxLanguageDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNestedModelsCodeSupportedSyntaxLanguageSupportedSyntaxLanguageDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "supported_syntax_language_default",
        argNames: [],
      );

  @override
  Future<SupportedSyntaxTheme>
  crateApiModelsNestedModelsCodeSupportedSyntaxThemeSupportedSyntaxThemeDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 55,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_supported_syntax_theme,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsNestedModelsCodeSupportedSyntaxThemeSupportedSyntaxThemeDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsNestedModelsCodeSupportedSyntaxThemeSupportedSyntaxThemeDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "supported_syntax_theme_default",
        argNames: [],
      );

  @override
  Future<List<FlusterError>?>
  crateApiGlobalActionsParseDirectorySyncFsDirectorySyncFilesystemDirectorySyncDirectory({
    required SyncFilesystemDirectoryOptions opts,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_sync_filesystem_directory_options(
            opts,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 56,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsParseDirectorySyncFsDirectorySyncFilesystemDirectorySyncDirectoryConstMeta,
        argValues: [opts],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsParseDirectorySyncFsDirectorySyncFilesystemDirectorySyncDirectoryConstMeta =>
      const TaskConstMeta(debugName: "sync_directory", argNames: ["opts"]);

  @override
  Future<SyncFilesystemDirectoryOptions>
  crateApiGlobalActionsParseDirectorySyncFsDirectoryModelsSyncFilesystemOptionsSyncFilesystemDirectoryOptionsDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 57,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_sync_filesystem_directory_options,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsParseDirectorySyncFsDirectoryModelsSyncFilesystemOptionsSyncFilesystemDirectoryOptionsDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsParseDirectorySyncFsDirectoryModelsSyncFilesystemOptionsSyncFilesystemDirectoryOptionsDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "sync_filesystem_directory_options_default",
        argNames: [],
      );

  @override
  Future<void>
  crateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncMdxNotesSyncMdxFilesystemNotes({
    required String notesPath,
    required SenderFlusterError errorSender,
    required SurrealDb db,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(notesPath, serializer);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
            errorSender,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealDb(
            db,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 58,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncMdxNotesSyncMdxFilesystemNotesConstMeta,
        argValues: [notesPath, errorSender, db],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncMdxNotesSyncMdxFilesystemNotesConstMeta =>
      const TaskConstMeta(
        debugName: "sync_mdx_filesystem_notes",
        argNames: ["notesPath", "errorSender", "db"],
      );

  @override
  Future<void>
  crateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncUserBibliographySyncUserBibliography({
    required String bibPath,
    required SenderFlusterError errorSender,
    required SurrealDb db,
    required int nThreads,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(bibPath, serializer);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
            errorSender,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealDb(
            db,
            serializer,
          );
          sse_encode_u_32(nThreads, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 59,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncUserBibliographySyncUserBibliographyConstMeta,
        argValues: [bibPath, errorSender, db, nThreads],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncUserBibliographySyncUserBibliographyConstMeta =>
      const TaskConstMeta(
        debugName: "sync_user_bibliography",
        argNames: ["bibPath", "errorSender", "db", "nThreads"],
      );

  @override
  Future<TagFromContentResult> crateApiModelsTaggableTagModelTagFromMdxContent({
    required String rawContent,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(rawContent, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 60,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_tag_from_content_result,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiModelsTaggableTagModelTagFromMdxContentConstMeta,
        argValues: [rawContent],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiModelsTaggableTagModelTagFromMdxContentConstMeta =>
      const TaskConstMeta(
        debugName: "tag_from_mdx_content",
        argNames: ["rawContent"],
      );

  @override
  Future<Tag> crateApiModelsTaggableTagModelTagFromString({
    required String val,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(val, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 61,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_tag,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiModelsTaggableTagModelTagFromStringConstMeta,
        argValues: [val],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiModelsTaggableTagModelTagFromStringConstMeta =>
      const TaskConstMeta(debugName: "tag_from_string", argNames: ["val"]);

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_DbRecord => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_DbRecord => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EmbeddedFile => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EmbeddedFile => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EmbeddedTypescriptFiles => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EmbeddedTypescriptFiles => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FileTime => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FileTime => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterError => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterError => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterTime => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterTime => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MdxNoteSummary => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MdxNoteSummary => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_OffsetDateTime => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_OffsetDateTime => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Pod => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Pod => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ReadingList => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ReadingList => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RecordId => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RecordId => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SenderFlusterError => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SenderFlusterError => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SurrealDb => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealDb;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SurrealDb => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealDb;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Thing => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Thing => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  DbRecord
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DbRecordImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EmbeddedFile
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmbeddedFileImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EmbeddedTypescriptFiles
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmbeddedTypescriptFilesImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FileTime
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FileTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterError
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterTime
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MdxNoteSummary
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MdxNoteSummaryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OffsetDateTime
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OffsetDateTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Pod
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PodImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReadingList
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReadingListImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RecordId
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RecordIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Thing
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ThingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DbRecord
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DbRecordImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterTime
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MdxNoteSummary
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MdxNoteSummaryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReadingList
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReadingListImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DbRecord
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DbRecordImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterTime
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MdxNoteSummary
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MdxNoteSummaryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReadingList
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReadingListImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SenderFlusterError
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SenderFlusterErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SurrealDb
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealDb(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SurrealDbImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DbRecord
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DbRecordImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EmbeddedFile
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmbeddedFileImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EmbeddedTypescriptFiles
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmbeddedTypescriptFilesImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FileTime
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FileTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterError
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterTime
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MdxNoteSummary
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MdxNoteSummaryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OffsetDateTime
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OffsetDateTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Pod
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PodImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReadingList
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReadingListImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RecordId
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RecordIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SenderFlusterError
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SenderFlusterErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SurrealDb
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealDb(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SurrealDbImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Thing
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ThingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BibEntryEntity dco_decode_bib_entry_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return BibEntryEntity(
      id: dco_decode_opt_String(arr[0]),
      pdfPath: dco_decode_opt_String(arr[1]),
      read: dco_decode_bool(arr[2]),
      fields: dco_decode_String(arr[3]),
    );
  }

  @protected
  BibtexFile dco_decode_bibtex_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BibtexFile(
      path: dco_decode_opt_String(arr[0]),
      entries: dco_decode_list_bib_entry_entity(arr[1]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  EmbeddedFile
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
      raw,
    );
  }

  @protected
  FileTime
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
      raw,
    );
  }

  @protected
  FlusterError
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
      raw,
    );
  }

  @protected
  FlusterTime
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
      raw,
    );
  }

  @protected
  Pod
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
      raw,
    );
  }

  @protected
  Thing
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
      raw,
    );
  }

  @protected
  BibtexFile dco_decode_box_autoadd_bibtex_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_bibtex_file(raw);
  }

  @protected
  MdxNoteEntity dco_decode_box_autoadd_mdx_note_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_mdx_note_entity(raw);
  }

  @protected
  MdxNoteQueryParams dco_decode_box_autoadd_mdx_note_query_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_mdx_note_query_params(raw);
  }

  @protected
  MdxNotesRepository dco_decode_box_autoadd_mdx_notes_repository(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_mdx_notes_repository(raw);
  }

  @protected
  SummaryListQuery dco_decode_box_autoadd_summary_list_query(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_summary_list_query(raw);
  }

  @protected
  SyncFilesystemDirectoryOptions
  dco_decode_box_autoadd_sync_filesystem_directory_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sync_filesystem_directory_options(raw);
  }

  @protected
  CrossLanguageFile dco_decode_cross_language_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CrossLanguageFile(
      path: dco_decode_String(arr[0]),
      noteType: dco_decode_note_type(arr[1]),
    );
  }

  @protected
  DbTokenizerLanguage dco_decode_db_tokenizer_language(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DbTokenizerLanguage.values[raw as int];
  }

  @protected
  EquationEntity dco_decode_equation_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return EquationEntity(
      id: dco_decode_opt_String(arr[0]),
      label: dco_decode_String(arr[1]),
      body: dco_decode_String(arr[2]),
      code: dco_decode_list_snippet(arr[3]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FlusterDatabaseStatus dco_decode_fluster_database_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterDatabaseStatus.values[raw as int];
  }

  @protected
  FrontMatterEntity dco_decode_front_matter_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return FrontMatterEntity(
      id: dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
        arr[0],
      ),
      title: dco_decode_String(arr[1]),
      summary: dco_decode_opt_String(arr[2]),
      tags: dco_decode_list_tag(arr[3]),
      noteId: dco_decode_opt_String(arr[4]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  KeymapSectionId dco_decode_keymap_section_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeymapSectionId.values[raw as int];
  }

  @protected
  List<FlusterError>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        )
        .toList();
  }

  @protected
  List<MdxNoteSummary>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary,
        )
        .toList();
  }

  @protected
  List<BibEntryEntity> dco_decode_list_bib_entry_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_bib_entry_entity).toList();
  }

  @protected
  List<MdxNoteEntity> dco_decode_list_mdx_note_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_mdx_note_entity).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<Snippet> dco_decode_list_snippet(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_snippet).toList();
  }

  @protected
  List<Tag> dco_decode_list_tag(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tag).toList();
  }

  @protected
  MathLabelOption dco_decode_math_label_option(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MathLabelOption.values[raw as int];
  }

  @protected
  MdxNoteEntity dco_decode_mdx_note_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return MdxNoteEntity(
      id: dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
        arr[0],
      ),
      frontMatter: dco_decode_front_matter_entity(arr[1]),
      rawBody: dco_decode_String(arr[2]),
      filePath: dco_decode_String(arr[3]),
      ctime:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
            arr[4],
          ),
      mtime:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
            arr[5],
          ),
      atime:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
            arr[6],
          ),
      tags: dco_decode_list_tag(arr[7]),
    );
  }

  @protected
  MdxNoteQueryParams dco_decode_mdx_note_query_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MdxNoteQueryParams(
      query: dco_decode_String(arr[0]),
      language: dco_decode_db_tokenizer_language(arr[1]),
    );
  }

  @protected
  MdxNotesRepository dco_decode_mdx_notes_repository(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MdxNotesRepository(tableName: dco_decode_String(arr[0]));
  }

  @protected
  NoteType dco_decode_note_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NoteType.values[raw as int];
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  EmbeddedFile?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
            raw,
          );
  }

  @protected
  FileTime?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
            raw,
          );
  }

  @protected
  FlusterError?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
            raw,
          );
  }

  @protected
  FlusterTime?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
            raw,
          );
  }

  @protected
  Pod?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
            raw,
          );
  }

  @protected
  Thing?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
            raw,
          );
  }

  @protected
  List<FlusterError>?
  dco_decode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
            raw,
          );
  }

  @protected
  SettingPageId dco_decode_setting_page_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SettingPageId.values[raw as int];
  }

  @protected
  Snippet dco_decode_snippet(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Snippet(
      label: dco_decode_String(arr[0]),
      language: dco_decode_supported_syntax_language(arr[1]),
      body: dco_decode_String(arr[2]),
      tags: dco_decode_list_tag(arr[3]),
    );
  }

  @protected
  SummaryListQuery dco_decode_summary_list_query(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SummaryListQuery(
      mdxPerPage: dco_decode_u_16(arr[0]),
      mdxPage: dco_decode_u_16(arr[1]),
    );
  }

  @protected
  SummaryListResults dco_decode_summary_list_results(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SummaryListResults(
      mdxNotes:
          dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
            arr[0],
          ),
    );
  }

  @protected
  SupportedSyntaxLanguage dco_decode_supported_syntax_language(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SupportedSyntaxLanguage.values[raw as int];
  }

  @protected
  SupportedSyntaxTheme dco_decode_supported_syntax_theme(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SupportedSyntaxTheme.values[raw as int];
  }

  @protected
  SyncFilesystemDirectoryOptions dco_decode_sync_filesystem_directory_options(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SyncFilesystemDirectoryOptions(
      dirPath: dco_decode_String(arr[0]),
      bibPath: dco_decode_opt_String(arr[1]),
      nThreads: dco_decode_u_32(arr[2]),
    );
  }

  @protected
  Tag dco_decode_tag(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Tag(value: dco_decode_String(arr[0]));
  }

  @protected
  TagFromContentResult dco_decode_tag_from_content_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TagFromContentResult(
      tags: dco_decode_list_tag(arr[0]),
      parsedContent: dco_decode_String(arr[1]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  DbRecord
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DbRecordImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EmbeddedFile
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmbeddedFileImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EmbeddedTypescriptFiles
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmbeddedTypescriptFilesImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FileTime
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FileTimeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterError
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterTime
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterTimeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MdxNoteSummary
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MdxNoteSummaryImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  OffsetDateTime
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OffsetDateTimeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Pod
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PodImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ReadingList
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReadingListImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RecordId
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RecordIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Thing
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ThingImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DbRecord
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DbRecordImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterTime
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterTimeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MdxNoteSummary
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MdxNoteSummaryImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ReadingList
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReadingListImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DbRecord
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DbRecordImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterTime
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterTimeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MdxNoteSummary
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MdxNoteSummaryImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ReadingList
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReadingListImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SenderFlusterError
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SenderFlusterErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SurrealDb
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealDb(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SurrealDbImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DbRecord
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DbRecordImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EmbeddedFile
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmbeddedFileImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EmbeddedTypescriptFiles
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmbeddedTypescriptFilesImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FileTime
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FileTimeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterError
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterTime
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterTimeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MdxNoteSummary
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MdxNoteSummaryImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  OffsetDateTime
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OffsetDateTimeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Pod
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PodImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ReadingList
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReadingListImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RecordId
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RecordIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SenderFlusterError
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SenderFlusterErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SurrealDb
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealDb(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SurrealDbImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Thing
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ThingImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BibEntryEntity sse_decode_bib_entry_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_String(deserializer);
    var var_pdfPath = sse_decode_opt_String(deserializer);
    var var_read = sse_decode_bool(deserializer);
    var var_fields = sse_decode_String(deserializer);
    return BibEntryEntity(
      id: var_id,
      pdfPath: var_pdfPath,
      read: var_read,
      fields: var_fields,
    );
  }

  @protected
  BibtexFile sse_decode_bibtex_file(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_path = sse_decode_opt_String(deserializer);
    var var_entries = sse_decode_list_bib_entry_entity(deserializer);
    return BibtexFile(path: var_path, entries: var_entries);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  EmbeddedFile
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
      deserializer,
    ));
  }

  @protected
  FileTime
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
      deserializer,
    ));
  }

  @protected
  FlusterError
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
      deserializer,
    ));
  }

  @protected
  FlusterTime
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
      deserializer,
    ));
  }

  @protected
  Pod
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
      deserializer,
    ));
  }

  @protected
  Thing
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
      deserializer,
    ));
  }

  @protected
  BibtexFile sse_decode_box_autoadd_bibtex_file(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bibtex_file(deserializer));
  }

  @protected
  MdxNoteEntity sse_decode_box_autoadd_mdx_note_entity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_mdx_note_entity(deserializer));
  }

  @protected
  MdxNoteQueryParams sse_decode_box_autoadd_mdx_note_query_params(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_mdx_note_query_params(deserializer));
  }

  @protected
  MdxNotesRepository sse_decode_box_autoadd_mdx_notes_repository(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_mdx_notes_repository(deserializer));
  }

  @protected
  SummaryListQuery sse_decode_box_autoadd_summary_list_query(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_summary_list_query(deserializer));
  }

  @protected
  SyncFilesystemDirectoryOptions
  sse_decode_box_autoadd_sync_filesystem_directory_options(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sync_filesystem_directory_options(deserializer));
  }

  @protected
  CrossLanguageFile sse_decode_cross_language_file(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_path = sse_decode_String(deserializer);
    var var_noteType = sse_decode_note_type(deserializer);
    return CrossLanguageFile(path: var_path, noteType: var_noteType);
  }

  @protected
  DbTokenizerLanguage sse_decode_db_tokenizer_language(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return DbTokenizerLanguage.values[inner];
  }

  @protected
  EquationEntity sse_decode_equation_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_String(deserializer);
    var var_label = sse_decode_String(deserializer);
    var var_body = sse_decode_String(deserializer);
    var var_code = sse_decode_list_snippet(deserializer);
    return EquationEntity(
      id: var_id,
      label: var_label,
      body: var_body,
      code: var_code,
    );
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  FlusterDatabaseStatus sse_decode_fluster_database_status(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return FlusterDatabaseStatus.values[inner];
  }

  @protected
  FrontMatterEntity sse_decode_front_matter_entity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
          deserializer,
        );
    var var_title = sse_decode_String(deserializer);
    var var_summary = sse_decode_opt_String(deserializer);
    var var_tags = sse_decode_list_tag(deserializer);
    var var_noteId = sse_decode_opt_String(deserializer);
    return FrontMatterEntity(
      id: var_id,
      title: var_title,
      summary: var_summary,
      tags: var_tags,
      noteId: var_noteId,
    );
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  KeymapSectionId sse_decode_keymap_section_id(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return KeymapSectionId.values[inner];
  }

  @protected
  List<FlusterError>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FlusterError>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<MdxNoteSummary>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MdxNoteSummary>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<BibEntryEntity> sse_decode_list_bib_entry_entity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BibEntryEntity>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_bib_entry_entity(deserializer));
    }
    return ans_;
  }

  @protected
  List<MdxNoteEntity> sse_decode_list_mdx_note_entity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MdxNoteEntity>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_mdx_note_entity(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<Snippet> sse_decode_list_snippet(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Snippet>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_snippet(deserializer));
    }
    return ans_;
  }

  @protected
  List<Tag> sse_decode_list_tag(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Tag>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tag(deserializer));
    }
    return ans_;
  }

  @protected
  MathLabelOption sse_decode_math_label_option(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MathLabelOption.values[inner];
  }

  @protected
  MdxNoteEntity sse_decode_mdx_note_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
          deserializer,
        );
    var var_frontMatter = sse_decode_front_matter_entity(deserializer);
    var var_rawBody = sse_decode_String(deserializer);
    var var_filePath = sse_decode_String(deserializer);
    var var_ctime =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
          deserializer,
        );
    var var_mtime =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
          deserializer,
        );
    var var_atime =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
          deserializer,
        );
    var var_tags = sse_decode_list_tag(deserializer);
    return MdxNoteEntity(
      id: var_id,
      frontMatter: var_frontMatter,
      rawBody: var_rawBody,
      filePath: var_filePath,
      ctime: var_ctime,
      mtime: var_mtime,
      atime: var_atime,
      tags: var_tags,
    );
  }

  @protected
  MdxNoteQueryParams sse_decode_mdx_note_query_params(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_query = sse_decode_String(deserializer);
    var var_language = sse_decode_db_tokenizer_language(deserializer);
    return MdxNoteQueryParams(query: var_query, language: var_language);
  }

  @protected
  MdxNotesRepository sse_decode_mdx_notes_repository(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tableName = sse_decode_String(deserializer);
    return MdxNotesRepository(tableName: var_tableName);
  }

  @protected
  NoteType sse_decode_note_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return NoteType.values[inner];
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  EmbeddedFile?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  FileTime?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  FlusterError?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  FlusterTime?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  Pod?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  Thing?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  List<FlusterError>?
  sse_decode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  SettingPageId sse_decode_setting_page_id(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SettingPageId.values[inner];
  }

  @protected
  Snippet sse_decode_snippet(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_label = sse_decode_String(deserializer);
    var var_language = sse_decode_supported_syntax_language(deserializer);
    var var_body = sse_decode_String(deserializer);
    var var_tags = sse_decode_list_tag(deserializer);
    return Snippet(
      label: var_label,
      language: var_language,
      body: var_body,
      tags: var_tags,
    );
  }

  @protected
  SummaryListQuery sse_decode_summary_list_query(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_mdxPerPage = sse_decode_u_16(deserializer);
    var var_mdxPage = sse_decode_u_16(deserializer);
    return SummaryListQuery(mdxPerPage: var_mdxPerPage, mdxPage: var_mdxPage);
  }

  @protected
  SummaryListResults sse_decode_summary_list_results(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_mdxNotes =
        sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
          deserializer,
        );
    return SummaryListResults(mdxNotes: var_mdxNotes);
  }

  @protected
  SupportedSyntaxLanguage sse_decode_supported_syntax_language(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SupportedSyntaxLanguage.values[inner];
  }

  @protected
  SupportedSyntaxTheme sse_decode_supported_syntax_theme(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SupportedSyntaxTheme.values[inner];
  }

  @protected
  SyncFilesystemDirectoryOptions sse_decode_sync_filesystem_directory_options(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_dirPath = sse_decode_String(deserializer);
    var var_bibPath = sse_decode_opt_String(deserializer);
    var var_nThreads = sse_decode_u_32(deserializer);
    return SyncFilesystemDirectoryOptions(
      dirPath: var_dirPath,
      bibPath: var_bibPath,
      nThreads: var_nThreads,
    );
  }

  @protected
  Tag sse_decode_tag(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_String(deserializer);
    return Tag(value: var_value);
  }

  @protected
  TagFromContentResult sse_decode_tag_from_content_result(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tags = sse_decode_list_tag(deserializer);
    var var_parsedContent = sse_decode_String(deserializer);
    return TagFromContentResult(
      tags: var_tags,
      parsedContent: var_parsedContent,
    );
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    DbRecord self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DbRecordImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    EmbeddedFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EmbeddedFileImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    EmbeddedTypescriptFiles self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EmbeddedTypescriptFilesImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    FileTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FileTimeImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    FlusterError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterErrorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    FlusterTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterTimeImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    MdxNoteSummary self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MdxNoteSummaryImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime(
    OffsetDateTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as OffsetDateTimeImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    Pod self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PodImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    ReadingList self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ReadingListImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId(
    RecordId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RecordIdImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    Thing self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ThingImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    DbRecord self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DbRecordImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    FlusterTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterTimeImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    MdxNoteSummary self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MdxNoteSummaryImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    ReadingList self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ReadingListImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    DbRecord self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DbRecordImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    FlusterTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterTimeImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    MdxNoteSummary self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MdxNoteSummaryImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    ReadingList self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ReadingListImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
    SenderFlusterError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SenderFlusterErrorImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealDb(
    SurrealDb self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SurrealDbImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDbRecord(
    DbRecord self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DbRecordImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    EmbeddedFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EmbeddedFileImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    EmbeddedTypescriptFiles self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EmbeddedTypescriptFilesImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    FileTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FileTimeImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    FlusterError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterErrorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    FlusterTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterTimeImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    MdxNoteSummary self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MdxNoteSummaryImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOffsetDateTime(
    OffsetDateTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as OffsetDateTimeImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    Pod self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PodImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReadingList(
    ReadingList self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ReadingListImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecordId(
    RecordId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RecordIdImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
    SenderFlusterError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SenderFlusterErrorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealDb(
    SurrealDb self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SurrealDbImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    Thing self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ThingImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bib_entry_entity(
    BibEntryEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.id, serializer);
    sse_encode_opt_String(self.pdfPath, serializer);
    sse_encode_bool(self.read, serializer);
    sse_encode_String(self.fields, serializer);
  }

  @protected
  void sse_encode_bibtex_file(BibtexFile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.path, serializer);
    sse_encode_list_bib_entry_entity(self.entries, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    EmbeddedFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    FileTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    FlusterError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    FlusterTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    Pod self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    Thing self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
      self,
      serializer,
    );
  }

  @protected
  void sse_encode_box_autoadd_bibtex_file(
    BibtexFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bibtex_file(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_mdx_note_entity(
    MdxNoteEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_mdx_note_entity(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_mdx_note_query_params(
    MdxNoteQueryParams self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_mdx_note_query_params(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_mdx_notes_repository(
    MdxNotesRepository self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_mdx_notes_repository(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_summary_list_query(
    SummaryListQuery self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_summary_list_query(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sync_filesystem_directory_options(
    SyncFilesystemDirectoryOptions self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sync_filesystem_directory_options(self, serializer);
  }

  @protected
  void sse_encode_cross_language_file(
    CrossLanguageFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.path, serializer);
    sse_encode_note_type(self.noteType, serializer);
  }

  @protected
  void sse_encode_db_tokenizer_language(
    DbTokenizerLanguage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_equation_entity(
    EquationEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.id, serializer);
    sse_encode_String(self.label, serializer);
    sse_encode_String(self.body, serializer);
    sse_encode_list_snippet(self.code, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_fluster_database_status(
    FlusterDatabaseStatus self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_front_matter_entity(
    FrontMatterEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
      self.id,
      serializer,
    );
    sse_encode_String(self.title, serializer);
    sse_encode_opt_String(self.summary, serializer);
    sse_encode_list_tag(self.tags, serializer);
    sse_encode_opt_String(self.noteId, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_keymap_section_id(
    KeymapSectionId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    List<FlusterError> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
        item,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    List<MdxNoteSummary> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_bib_entry_entity(
    List<BibEntryEntity> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_bib_entry_entity(item, serializer);
    }
  }

  @protected
  void sse_encode_list_mdx_note_entity(
    List<MdxNoteEntity> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_mdx_note_entity(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_snippet(List<Snippet> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_snippet(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tag(List<Tag> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tag(item, serializer);
    }
  }

  @protected
  void sse_encode_math_label_option(
    MathLabelOption self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_mdx_note_entity(
    MdxNoteEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
      self.id,
      serializer,
    );
    sse_encode_front_matter_entity(self.frontMatter, serializer);
    sse_encode_String(self.rawBody, serializer);
    sse_encode_String(self.filePath, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
      self.ctime,
      serializer,
    );
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
      self.mtime,
      serializer,
    );
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
      self.atime,
      serializer,
    );
    sse_encode_list_tag(self.tags, serializer);
  }

  @protected
  void sse_encode_mdx_note_query_params(
    MdxNoteQueryParams self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.query, serializer);
    sse_encode_db_tokenizer_language(self.language, serializer);
  }

  @protected
  void sse_encode_mdx_notes_repository(
    MdxNotesRepository self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.tableName, serializer);
  }

  @protected
  void sse_encode_note_type(NoteType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    EmbeddedFile? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
    FileTime? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileTime(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    FlusterError? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
    FlusterTime? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterTime(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    Pod? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
    Thing? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    List<FlusterError>? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
        self,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_setting_page_id(
    SettingPageId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_snippet(Snippet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.label, serializer);
    sse_encode_supported_syntax_language(self.language, serializer);
    sse_encode_String(self.body, serializer);
    sse_encode_list_tag(self.tags, serializer);
  }

  @protected
  void sse_encode_summary_list_query(
    SummaryListQuery self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self.mdxPerPage, serializer);
    sse_encode_u_16(self.mdxPage, serializer);
  }

  @protected
  void sse_encode_summary_list_results(
    SummaryListResults self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
      self.mdxNotes,
      serializer,
    );
  }

  @protected
  void sse_encode_supported_syntax_language(
    SupportedSyntaxLanguage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_supported_syntax_theme(
    SupportedSyntaxTheme self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_sync_filesystem_directory_options(
    SyncFilesystemDirectoryOptions self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.dirPath, serializer);
    sse_encode_opt_String(self.bibPath, serializer);
    sse_encode_u_32(self.nThreads, serializer);
  }

  @protected
  void sse_encode_tag(Tag self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_tag_from_content_result(
    TagFromContentResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_tag(self.tags, serializer);
    sse_encode_String(self.parsedContent, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class DbRecordImpl extends RustOpaque implements DbRecord {
  // Not to be used by end users
  DbRecordImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DbRecordImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DbRecord,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DbRecord,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DbRecordPtr,
  );

  RecordId get id => RustLib.instance.api
      .crateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorGetId(that: this);

  set id(RecordId id) => RustLib.instance.api
      .crateApiTypedefsNoteTypeUtilsDbRecordAutoAccessorSetId(
        that: this,
        id: id,
      );
}

@sealed
class EmbeddedFileImpl extends RustOpaque implements EmbeddedFile {
  // Not to be used by end users
  EmbeddedFileImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EmbeddedFileImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_EmbeddedFile,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_EmbeddedFile,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_EmbeddedFilePtr,
  );
}

@sealed
class EmbeddedTypescriptFilesImpl extends RustOpaque
    implements EmbeddedTypescriptFiles {
  // Not to be used by end users
  EmbeddedTypescriptFilesImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EmbeddedTypescriptFilesImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_increment_strong_count_EmbeddedTypescriptFiles,
    rustArcDecrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_EmbeddedTypescriptFiles,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_EmbeddedTypescriptFilesPtr,
  );
}

@sealed
class FileTimeImpl extends RustOpaque implements FileTime {
  // Not to be used by end users
  FileTimeImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FileTimeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FileTime,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FileTime,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FileTimePtr,
  );
}

@sealed
class FlusterErrorImpl extends RustOpaque implements FlusterError {
  // Not to be used by end users
  FlusterErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FlusterErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FlusterError,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterError,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterErrorPtr,
  );
}

@sealed
class FlusterTimeImpl extends RustOpaque implements FlusterTime {
  // Not to be used by end users
  FlusterTimeImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FlusterTimeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FlusterTime,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterTime,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterTimePtr,
  );

  OffsetDateTime get value => RustLib.instance.api
      .crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorGetValue(
        that: this,
      );

  set value(OffsetDateTime value) => RustLib.instance.api
      .crateApiModelsNestedModelsFlusterDatetimeFlusterTimeFlusterTimeAutoAccessorSetValue(
        that: this,
        value: value,
      );
}

@sealed
class MdxNoteSummaryImpl extends RustOpaque implements MdxNoteSummary {
  // Not to be used by end users
  MdxNoteSummaryImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MdxNoteSummaryImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MdxNoteSummary,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MdxNoteSummary,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MdxNoteSummaryPtr,
  );

  FrontMatterEntity get frontMatter => RustLib.instance.api
      .crateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorGetFrontMatter(
        that: this,
      );

  Thing get id => RustLib.instance.api
      .crateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorGetId(
        that: this,
      );

  set frontMatter(FrontMatterEntity frontMatter) => RustLib.instance.api
      .crateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorSetFrontMatter(
        that: this,
        frontMatter: frontMatter,
      );

  set id(Thing id) => RustLib.instance.api
      .crateApiGlobalActionsGetSummaryListSummaryTypesMdxNoteSummaryMdxNoteSummaryAutoAccessorSetId(
        that: this,
        id: id,
      );
}

@sealed
class OffsetDateTimeImpl extends RustOpaque implements OffsetDateTime {
  // Not to be used by end users
  OffsetDateTimeImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OffsetDateTimeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_OffsetDateTime,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_OffsetDateTime,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_OffsetDateTimePtr,
  );
}

@sealed
class PodImpl extends RustOpaque implements Pod {
  // Not to be used by end users
  PodImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PodImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Pod,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Pod,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PodPtr,
  );
}

@sealed
class ReadingListImpl extends RustOpaque implements ReadingList {
  // Not to be used by end users
  ReadingListImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ReadingListImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ReadingList,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ReadingList,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ReadingListPtr,
  );

  FlusterTime get createdAt => RustLib.instance.api
      .crateApiModelsBibliographyReadingListReadingListAutoAccessorGetCreatedAt(
        that: this,
      );

  String? get id => RustLib.instance.api
      .crateApiModelsBibliographyReadingListReadingListAutoAccessorGetId(
        that: this,
      );

  String get label => RustLib.instance.api
      .crateApiModelsBibliographyReadingListReadingListAutoAccessorGetLabel(
        that: this,
      );

  List<BibEntryEntity> get papers => RustLib.instance.api
      .crateApiModelsBibliographyReadingListReadingListAutoAccessorGetPapers(
        that: this,
      );

  set createdAt(FlusterTime createdAt) => RustLib.instance.api
      .crateApiModelsBibliographyReadingListReadingListAutoAccessorSetCreatedAt(
        that: this,
        createdAt: createdAt,
      );

  set id(String? id) => RustLib.instance.api
      .crateApiModelsBibliographyReadingListReadingListAutoAccessorSetId(
        that: this,
        id: id,
      );

  set label(String label) => RustLib.instance.api
      .crateApiModelsBibliographyReadingListReadingListAutoAccessorSetLabel(
        that: this,
        label: label,
      );

  set papers(List<BibEntryEntity> papers) => RustLib.instance.api
      .crateApiModelsBibliographyReadingListReadingListAutoAccessorSetPapers(
        that: this,
        papers: papers,
      );
}

@sealed
class RecordIdImpl extends RustOpaque implements RecordId {
  // Not to be used by end users
  RecordIdImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RecordIdImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_RecordId,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_RecordId,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_RecordIdPtr,
  );
}

@sealed
class SenderFlusterErrorImpl extends RustOpaque implements SenderFlusterError {
  // Not to be used by end users
  SenderFlusterErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SenderFlusterErrorImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SenderFlusterError,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SenderFlusterError,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_SenderFlusterErrorPtr,
  );
}

@sealed
class SurrealDbImpl extends RustOpaque implements SurrealDb {
  // Not to be used by end users
  SurrealDbImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SurrealDbImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SurrealDb,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SurrealDb,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SurrealDbPtr,
  );
}

@sealed
class ThingImpl extends RustOpaque implements Thing {
  // Not to be used by end users
  ThingImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ThingImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Thing,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Thing,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ThingPtr,
  );
}
