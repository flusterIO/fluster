// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/actions/front_matter/get_many.dart';
import 'api/actions/mdx_note/get_many.dart';
import 'api/data_interface/database/utils.dart';
import 'api/data_interface/get_database_status.dart';
import 'api/embedded_ts.dart';
import 'api/global_actions/get_summary_list/summary_list_query.dart';
import 'api/global_actions/get_summary_list/summary_list_result.dart';
import 'api/global_actions/parse_directory/sync_fs_directory/models/sync_filesystem_options.dart';
import 'api/global_actions/parse_directory/sync_fs_directory/sync_filesystem_directory.dart';
import 'api/global_actions/parse_directory/sync_fs_directory/sync_methods/sync_mdx_notes.dart';
import 'api/global_actions/parse_directory/sync_fs_directory/sync_methods/sync_user_bibliography.dart';
import 'api/initialize/on_desktop_init.dart';
import 'api/models/bibliography/bib_entry.dart';
import 'api/models/bibliography/bib_file.dart';
import 'api/models/enums/parsable_file_extension.dart';
import 'api/models/enums/setting_page_ids.dart';
import 'api/models/enums/supported_language.dart';
import 'api/models/enums/taggable_type.dart';
import 'api/models/front_matter/front_matter_entity.dart';
import 'api/models/front_matter/front_matter_model.dart';
import 'api/models/mdx_note/mdx_note_creatable.dart';
import 'api/models/mdx_note/mdx_note_group/mdx_note_group.dart';
import 'api/models/mdx_note/mdx_note_summary.dart';
import 'api/models/params/cross_language_file_object.dart';
import 'api/models/params/sync_mdx_typescript_params.dart';
import 'api/models/settings/setting_page_id.dart';
import 'api/models/taggable/tag_model.dart';
import 'api/models/taggable/taggable.dart';
import 'api/utils/file_system/fs_utils.dart';
import 'api/utils/search/get_text_similarity.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 1256856087;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'fluster_native_interface',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<EmbeddedFile?> crateApiEmbeddedTsEmbeddedTypescriptFilesGet({
    required String filePath,
  });

  DateTime?
  crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetAtime({
    required MdxNoteSummary that,
  });

  DateTime?
  crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetCtime({
    required MdxNoteSummary that,
  });

  String?
  crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetFilePath({
    required MdxNoteSummary that,
  });

  int crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetId({
    required MdxNoteSummary that,
  });

  DateTime?
  crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetMtime({
    required MdxNoteSummary that,
  });

  String
  crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetRawBody({
    required MdxNoteSummary that,
  });

  void crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetAtime({
    required MdxNoteSummary that,
    DateTime? atime,
  });

  void crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetCtime({
    required MdxNoteSummary that,
    DateTime? ctime,
  });

  void
  crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetFilePath({
    required MdxNoteSummary that,
    String? filePath,
  });

  void crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetId({
    required MdxNoteSummary that,
    required int id,
  });

  void crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetMtime({
    required MdxNoteSummary that,
    DateTime? mtime,
  });

  void crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetRawBody({
    required MdxNoteSummary that,
    required String rawBody,
  });

  Future<BibtexFile>
  crateApiModelsBibliographyBibFileBibtexFileFromFilesystemPath({
    required String fspath,
  });

  Future<BibtexFile>
  crateApiModelsBibliographyBibFileBibtexFileFromRawFileContent({
    required String fileContent,
  });

  Future<void> crateApiModelsBibliographyBibFileBibtexFileSaveEntries({
    required BibtexFile that,
    required FlusterDb db,
  });

  Future<CrossLanguageFile>
  crateApiModelsParamsCrossLanguageFileObjectCrossLanguageFileDefault();

  Future<FrontMatter>
  crateApiModelsFrontMatterFrontMatterModelFrontMatterFromGrayMatter({
    Pod? pod,
  });

  String crateApiUtilsFileSystemFsUtilsGetAppConfigDir();

  String crateApiUtilsFileSystemFsUtilsGetAppDataDir();

  Future<PathBuf?> crateApiDataInterfaceDatabaseUtilsGetDatabasePath();

  Future<FlusterDatabaseStatus>
  crateApiDataInterfaceGetDatabaseStatusGetDatabaseStatus();

  Future<FlusterResultVecFrontMatterEntity>
  crateApiActionsFrontMatterGetManyGetFrontMatterEntities();

  Future<FlusterResultVecMdxNoteEntity>
  crateApiActionsMdxNoteGetManyGetMdxNoteSummaries();

  Future<Regex> crateApiModelsTaggableTaggableGetTagRegularExpression();

  double crateApiUtilsSearchGetTextSimilarityGetTextSimilarity({
    required String a,
    required String b,
  });

  Future<KeymapSectionId>
  crateApiModelsEnumsSettingPageIdsKeymapSectionIdDefault();

  Future<MathLabelOption>
  crateApiModelsParamsSyncMdxTypescriptParamsMathLabelOptionDefault();

  Future<FlusterResultMdxNoteGroup>
  crateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromFileSystemPath({
    required String filePath,
  });

  Future<FlusterResultMdxNoteGroup>
  crateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromFileSystemPathAsync({
    required String filePath,
  });

  Future<FlusterResultMdxNoteGroup>
  crateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromRawMdxString({
    required String rawFileContent,
    String? filePath,
  });

  Future<NoteType> crateApiModelsEnumsParsableFileExtensionNoteTypeDefault();

  Future<void> crateApiInitializeOnDesktopInitOnDesktopInit();

  bool crateApiUtilsFileSystemFsUtilsPathExists({required String filePath});

  Future<SettingPageId>
  crateApiModelsSettingsSettingPageIdSettingPageIdDefault();

  Future<SummaryListQuery>
  crateApiGlobalActionsGetSummaryListSummaryListQuerySummaryListQueryDefault();

  Future<SummaryListResults>
  crateApiGlobalActionsGetSummaryListSummaryListResultSummaryListResultsDefault();

  Future<SupportedSyntaxLanguage>
  crateApiModelsEnumsSupportedLanguageSupportedSyntaxLanguageDefault();

  Future<List<FlusterError>?>
  crateApiGlobalActionsParseDirectorySyncFsDirectorySyncFilesystemDirectorySyncDirectory({
    required SyncFilesystemDirectoryOptions opts,
  });

  Future<SyncFilesystemDirectoryOptions>
  crateApiGlobalActionsParseDirectorySyncFsDirectoryModelsSyncFilesystemOptionsSyncFilesystemDirectoryOptionsDefault();

  Future<void>
  crateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncMdxNotesSyncMdxFilesystemNotes({
    required String notesPath,
    required SenderFlusterError errorSender,
    required FlusterDb c,
  });

  Future<void>
  crateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncUserBibliographySyncUserBibliography({
    required String bibPath,
    required SenderFlusterError errorSender,
    required FlusterDb db,
    required int nThreads,
  });

  Future<TagFromContentResult>
  crateApiModelsTaggableTaggableTaggableFromMdxContent({
    required ParsedEntity data,
  });

  Future<List<Taggable>> crateApiModelsTaggableTaggableTaggableFromPodData({
    required ParsedEntity data,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_BibEntryEntity;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_BibEntryEntity;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_BibEntryEntityPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EmbeddedFile;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EmbeddedFile;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EmbeddedFilePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EmbeddedTypescriptFiles;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EmbeddedTypescriptFiles;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_EmbeddedTypescriptFilesPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterDb;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterDb;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FlusterDbPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FlusterErrorPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterResultMdxNoteGroup;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterResultMdxNoteGroup;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FlusterResultMdxNoteGroupPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterResultVecFrontMatterEntity;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterResultVecFrontMatterEntity;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FlusterResultVecFrontMatterEntityPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterResultVecMdxNoteEntity;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterResultVecMdxNoteEntity;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FlusterResultVecMdxNoteEntityPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MdxNoteSummary;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MdxNoteSummary;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_MdxNoteSummaryPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ParsedEntity;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ParsedEntity;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ParsedEntityPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PathBuf;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PathBuf;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PathBufPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Pod;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Pod;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PodPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Regex;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Regex;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RegexPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SenderFlusterError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SenderFlusterError;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_SenderFlusterErrorPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<EmbeddedFile?> crateApiEmbeddedTsEmbeddedTypescriptFilesGet({
    required String filePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(filePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEmbeddedTsEmbeddedTypescriptFilesGetConstMeta,
        argValues: [filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEmbeddedTsEmbeddedTypescriptFilesGetConstMeta =>
      const TaskConstMeta(
        debugName: "EmbeddedTypescriptFiles_get",
        argNames: ["filePath"],
      );

  @override
  DateTime?
  crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetAtime({
    required MdxNoteSummary that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_Chrono_Naive,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetAtimeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetAtimeConstMeta =>
      const TaskConstMeta(
        debugName: "MdxNoteSummary_auto_accessor_get_atime",
        argNames: ["that"],
      );

  @override
  DateTime?
  crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetCtime({
    required MdxNoteSummary that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_Chrono_Naive,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetCtimeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetCtimeConstMeta =>
      const TaskConstMeta(
        debugName: "MdxNoteSummary_auto_accessor_get_ctime",
        argNames: ["that"],
      );

  @override
  String?
  crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetFilePath({
    required MdxNoteSummary that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetFilePathConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetFilePathConstMeta =>
      const TaskConstMeta(
        debugName: "MdxNoteSummary_auto_accessor_get_file_path",
        argNames: ["that"],
      );

  @override
  int crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetId({
    required MdxNoteSummary that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_i_32,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetIdConstMeta =>
      const TaskConstMeta(
        debugName: "MdxNoteSummary_auto_accessor_get_id",
        argNames: ["that"],
      );

  @override
  DateTime?
  crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetMtime({
    required MdxNoteSummary that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_Chrono_Naive,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetMtimeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetMtimeConstMeta =>
      const TaskConstMeta(
        debugName: "MdxNoteSummary_auto_accessor_get_mtime",
        argNames: ["that"],
      );

  @override
  String
  crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetRawBody({
    required MdxNoteSummary that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetRawBodyConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetRawBodyConstMeta =>
      const TaskConstMeta(
        debugName: "MdxNoteSummary_auto_accessor_get_raw_body",
        argNames: ["that"],
      );

  @override
  void crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetAtime({
    required MdxNoteSummary that,
    DateTime? atime,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
            that,
            serializer,
          );
          sse_encode_opt_box_autoadd_Chrono_Naive(atime, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetAtimeConstMeta,
        argValues: [that, atime],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetAtimeConstMeta =>
      const TaskConstMeta(
        debugName: "MdxNoteSummary_auto_accessor_set_atime",
        argNames: ["that", "atime"],
      );

  @override
  void crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetCtime({
    required MdxNoteSummary that,
    DateTime? ctime,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
            that,
            serializer,
          );
          sse_encode_opt_box_autoadd_Chrono_Naive(ctime, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetCtimeConstMeta,
        argValues: [that, ctime],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetCtimeConstMeta =>
      const TaskConstMeta(
        debugName: "MdxNoteSummary_auto_accessor_set_ctime",
        argNames: ["that", "ctime"],
      );

  @override
  void
  crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetFilePath({
    required MdxNoteSummary that,
    String? filePath,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
            that,
            serializer,
          );
          sse_encode_opt_String(filePath, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetFilePathConstMeta,
        argValues: [that, filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetFilePathConstMeta =>
      const TaskConstMeta(
        debugName: "MdxNoteSummary_auto_accessor_set_file_path",
        argNames: ["that", "filePath"],
      );

  @override
  void crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetId({
    required MdxNoteSummary that,
    required int id,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
            that,
            serializer,
          );
          sse_encode_i_32(id, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetIdConstMeta,
        argValues: [that, id],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetIdConstMeta =>
      const TaskConstMeta(
        debugName: "MdxNoteSummary_auto_accessor_set_id",
        argNames: ["that", "id"],
      );

  @override
  void crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetMtime({
    required MdxNoteSummary that,
    DateTime? mtime,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
            that,
            serializer,
          );
          sse_encode_opt_box_autoadd_Chrono_Naive(mtime, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetMtimeConstMeta,
        argValues: [that, mtime],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetMtimeConstMeta =>
      const TaskConstMeta(
        debugName: "MdxNoteSummary_auto_accessor_set_mtime",
        argNames: ["that", "mtime"],
      );

  @override
  void crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetRawBody({
    required MdxNoteSummary that,
    required String rawBody,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
            that,
            serializer,
          );
          sse_encode_String(rawBody, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetRawBodyConstMeta,
        argValues: [that, rawBody],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetRawBodyConstMeta =>
      const TaskConstMeta(
        debugName: "MdxNoteSummary_auto_accessor_set_raw_body",
        argNames: ["that", "rawBody"],
      );

  @override
  Future<BibtexFile>
  crateApiModelsBibliographyBibFileBibtexFileFromFilesystemPath({
    required String fspath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(fspath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bibtex_file,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibFileBibtexFileFromFilesystemPathConstMeta,
        argValues: [fspath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibFileBibtexFileFromFilesystemPathConstMeta =>
      const TaskConstMeta(
        debugName: "bibtex_file_from_filesystem_path",
        argNames: ["fspath"],
      );

  @override
  Future<BibtexFile>
  crateApiModelsBibliographyBibFileBibtexFileFromRawFileContent({
    required String fileContent,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(fileContent, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bibtex_file,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibFileBibtexFileFromRawFileContentConstMeta,
        argValues: [fileContent],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibFileBibtexFileFromRawFileContentConstMeta =>
      const TaskConstMeta(
        debugName: "bibtex_file_from_raw_file_content",
        argNames: ["fileContent"],
      );

  @override
  Future<void> crateApiModelsBibliographyBibFileBibtexFileSaveEntries({
    required BibtexFile that,
    required FlusterDb db,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_bibtex_file(that, serializer);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
            db,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsBibliographyBibFileBibtexFileSaveEntriesConstMeta,
        argValues: [that, db],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsBibliographyBibFileBibtexFileSaveEntriesConstMeta =>
      const TaskConstMeta(
        debugName: "bibtex_file_save_entries",
        argNames: ["that", "db"],
      );

  @override
  Future<CrossLanguageFile>
  crateApiModelsParamsCrossLanguageFileObjectCrossLanguageFileDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_cross_language_file,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsParamsCrossLanguageFileObjectCrossLanguageFileDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsParamsCrossLanguageFileObjectCrossLanguageFileDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "cross_language_file_default",
        argNames: [],
      );

  @override
  Future<FrontMatter>
  crateApiModelsFrontMatterFrontMatterModelFrontMatterFromGrayMatter({
    Pod? pod,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
            pod,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_front_matter,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsFrontMatterFrontMatterModelFrontMatterFromGrayMatterConstMeta,
        argValues: [pod],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsFrontMatterFrontMatterModelFrontMatterFromGrayMatterConstMeta =>
      const TaskConstMeta(
        debugName: "front_matter_from_gray_matter",
        argNames: ["pod"],
      );

  @override
  String crateApiUtilsFileSystemFsUtilsGetAppConfigDir() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta: kCrateApiUtilsFileSystemFsUtilsGetAppConfigDirConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsFileSystemFsUtilsGetAppConfigDirConstMeta =>
      const TaskConstMeta(debugName: "get_app_config_dir", argNames: []);

  @override
  String crateApiUtilsFileSystemFsUtilsGetAppDataDir() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta: kCrateApiUtilsFileSystemFsUtilsGetAppDataDirConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsFileSystemFsUtilsGetAppDataDirConstMeta =>
      const TaskConstMeta(debugName: "get_app_data_dir", argNames: []);

  @override
  Future<PathBuf?> crateApiDataInterfaceDatabaseUtilsGetDatabasePath() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDataInterfaceDatabaseUtilsGetDatabasePathConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDataInterfaceDatabaseUtilsGetDatabasePathConstMeta =>
      const TaskConstMeta(debugName: "get_database_path", argNames: []);

  @override
  Future<FlusterDatabaseStatus>
  crateApiDataInterfaceGetDatabaseStatusGetDatabaseStatus() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_fluster_database_status,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDataInterfaceGetDatabaseStatusGetDatabaseStatusConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDataInterfaceGetDatabaseStatusGetDatabaseStatusConstMeta =>
      const TaskConstMeta(debugName: "get_database_status", argNames: []);

  @override
  Future<FlusterResultVecFrontMatterEntity>
  crateApiActionsFrontMatterGetManyGetFrontMatterEntities() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecFrontMatterEntity,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiActionsFrontMatterGetManyGetFrontMatterEntitiesConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiActionsFrontMatterGetManyGetFrontMatterEntitiesConstMeta =>
      const TaskConstMeta(debugName: "get_front_matter_entities", argNames: []);

  @override
  Future<FlusterResultVecMdxNoteEntity>
  crateApiActionsMdxNoteGetManyGetMdxNoteSummaries() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecMdxNoteEntity,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiActionsMdxNoteGetManyGetMdxNoteSummariesConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiActionsMdxNoteGetManyGetMdxNoteSummariesConstMeta =>
      const TaskConstMeta(debugName: "get_mdx_note_summaries", argNames: []);

  @override
  Future<Regex> crateApiModelsTaggableTaggableGetTagRegularExpression() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRegex,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsTaggableTaggableGetTagRegularExpressionConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsTaggableTaggableGetTagRegularExpressionConstMeta =>
      const TaskConstMeta(
        debugName: "get_tag_regular_expression",
        argNames: [],
      );

  @override
  double crateApiUtilsSearchGetTextSimilarityGetTextSimilarity({
    required String a,
    required String b,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(a, serializer);
          sse_encode_String(b, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_64,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiUtilsSearchGetTextSimilarityGetTextSimilarityConstMeta,
        argValues: [a, b],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiUtilsSearchGetTextSimilarityGetTextSimilarityConstMeta =>
      const TaskConstMeta(
        debugName: "get_text_similarity",
        argNames: ["a", "b"],
      );

  @override
  Future<KeymapSectionId>
  crateApiModelsEnumsSettingPageIdsKeymapSectionIdDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_keymap_section_id,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsEnumsSettingPageIdsKeymapSectionIdDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsEnumsSettingPageIdsKeymapSectionIdDefaultConstMeta =>
      const TaskConstMeta(debugName: "keymap_section_id_default", argNames: []);

  @override
  Future<MathLabelOption>
  crateApiModelsParamsSyncMdxTypescriptParamsMathLabelOptionDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_math_label_option,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsParamsSyncMdxTypescriptParamsMathLabelOptionDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsParamsSyncMdxTypescriptParamsMathLabelOptionDefaultConstMeta =>
      const TaskConstMeta(debugName: "math_label_option_default", argNames: []);

  @override
  Future<FlusterResultMdxNoteGroup>
  crateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromFileSystemPath({
    required String filePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(filePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 29,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromFileSystemPathConstMeta,
        argValues: [filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromFileSystemPathConstMeta =>
      const TaskConstMeta(
        debugName: "mdx_note_group_from_file_system_path",
        argNames: ["filePath"],
      );

  @override
  Future<FlusterResultMdxNoteGroup>
  crateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromFileSystemPathAsync({
    required String filePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(filePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 30,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromFileSystemPathAsyncConstMeta,
        argValues: [filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromFileSystemPathAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "mdx_note_group_from_file_system_path_async",
        argNames: ["filePath"],
      );

  @override
  Future<FlusterResultMdxNoteGroup>
  crateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromRawMdxString({
    required String rawFileContent,
    String? filePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(rawFileContent, serializer);
          sse_encode_opt_String(filePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 31,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromRawMdxStringConstMeta,
        argValues: [rawFileContent, filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsMdxNoteMdxNoteGroupMdxNoteGroupMdxNoteGroupFromRawMdxStringConstMeta =>
      const TaskConstMeta(
        debugName: "mdx_note_group_from_raw_mdx_string",
        argNames: ["rawFileContent", "filePath"],
      );

  @override
  Future<NoteType> crateApiModelsEnumsParsableFileExtensionNoteTypeDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 32,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_note_type,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsEnumsParsableFileExtensionNoteTypeDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsEnumsParsableFileExtensionNoteTypeDefaultConstMeta =>
      const TaskConstMeta(debugName: "note_type_default", argNames: []);

  @override
  Future<void> crateApiInitializeOnDesktopInitOnDesktopInit() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 33,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiInitializeOnDesktopInitOnDesktopInitConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiInitializeOnDesktopInitOnDesktopInitConstMeta =>
      const TaskConstMeta(debugName: "on_desktop_init", argNames: []);

  @override
  bool crateApiUtilsFileSystemFsUtilsPathExists({required String filePath}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(filePath, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsFileSystemFsUtilsPathExistsConstMeta,
        argValues: [filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsFileSystemFsUtilsPathExistsConstMeta =>
      const TaskConstMeta(debugName: "path_exists", argNames: ["filePath"]);

  @override
  Future<SettingPageId>
  crateApiModelsSettingsSettingPageIdSettingPageIdDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 35,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_setting_page_id,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsSettingsSettingPageIdSettingPageIdDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsSettingsSettingPageIdSettingPageIdDefaultConstMeta =>
      const TaskConstMeta(debugName: "setting_page_id_default", argNames: []);

  @override
  Future<SummaryListQuery>
  crateApiGlobalActionsGetSummaryListSummaryListQuerySummaryListQueryDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 36,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_summary_list_query,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsGetSummaryListSummaryListQuerySummaryListQueryDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsGetSummaryListSummaryListQuerySummaryListQueryDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "summary_list_query_default",
        argNames: [],
      );

  @override
  Future<SummaryListResults>
  crateApiGlobalActionsGetSummaryListSummaryListResultSummaryListResultsDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 37,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_summary_list_results,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsGetSummaryListSummaryListResultSummaryListResultsDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsGetSummaryListSummaryListResultSummaryListResultsDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "summary_list_results_default",
        argNames: [],
      );

  @override
  Future<SupportedSyntaxLanguage>
  crateApiModelsEnumsSupportedLanguageSupportedSyntaxLanguageDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 38,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_supported_syntax_language,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsEnumsSupportedLanguageSupportedSyntaxLanguageDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsEnumsSupportedLanguageSupportedSyntaxLanguageDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "supported_syntax_language_default",
        argNames: [],
      );

  @override
  Future<List<FlusterError>?>
  crateApiGlobalActionsParseDirectorySyncFsDirectorySyncFilesystemDirectorySyncDirectory({
    required SyncFilesystemDirectoryOptions opts,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_sync_filesystem_directory_options(
            opts,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 39,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsParseDirectorySyncFsDirectorySyncFilesystemDirectorySyncDirectoryConstMeta,
        argValues: [opts],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsParseDirectorySyncFsDirectorySyncFilesystemDirectorySyncDirectoryConstMeta =>
      const TaskConstMeta(debugName: "sync_directory", argNames: ["opts"]);

  @override
  Future<SyncFilesystemDirectoryOptions>
  crateApiGlobalActionsParseDirectorySyncFsDirectoryModelsSyncFilesystemOptionsSyncFilesystemDirectoryOptionsDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 40,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_sync_filesystem_directory_options,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsParseDirectorySyncFsDirectoryModelsSyncFilesystemOptionsSyncFilesystemDirectoryOptionsDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsParseDirectorySyncFsDirectoryModelsSyncFilesystemOptionsSyncFilesystemDirectoryOptionsDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "sync_filesystem_directory_options_default",
        argNames: [],
      );

  @override
  Future<void>
  crateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncMdxNotesSyncMdxFilesystemNotes({
    required String notesPath,
    required SenderFlusterError errorSender,
    required FlusterDb c,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(notesPath, serializer);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
            errorSender,
            serializer,
          );
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
            c,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 41,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        ),
        constMeta:
            kCrateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncMdxNotesSyncMdxFilesystemNotesConstMeta,
        argValues: [notesPath, errorSender, c],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncMdxNotesSyncMdxFilesystemNotesConstMeta =>
      const TaskConstMeta(
        debugName: "sync_mdx_filesystem_notes",
        argNames: ["notesPath", "errorSender", "c"],
      );

  @override
  Future<void>
  crateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncUserBibliographySyncUserBibliography({
    required String bibPath,
    required SenderFlusterError errorSender,
    required FlusterDb db,
    required int nThreads,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(bibPath, serializer);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
            errorSender,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
            db,
            serializer,
          );
          sse_encode_u_32(nThreads, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 42,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncUserBibliographySyncUserBibliographyConstMeta,
        argValues: [bibPath, errorSender, db, nThreads],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiGlobalActionsParseDirectorySyncFsDirectorySyncMethodsSyncUserBibliographySyncUserBibliographyConstMeta =>
      const TaskConstMeta(
        debugName: "sync_user_bibliography",
        argNames: ["bibPath", "errorSender", "db", "nThreads"],
      );

  @override
  Future<TagFromContentResult>
  crateApiModelsTaggableTaggableTaggableFromMdxContent({
    required ParsedEntity data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity(
            data,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 43,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_tag_from_content_result,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelsTaggableTaggableTaggableFromMdxContentConstMeta,
        argValues: [data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsTaggableTaggableTaggableFromMdxContentConstMeta =>
      const TaskConstMeta(
        debugName: "taggable_from_mdx_content",
        argNames: ["data"],
      );

  @override
  Future<List<Taggable>> crateApiModelsTaggableTaggableTaggableFromPodData({
    required ParsedEntity data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity(
            data,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 44,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_taggable,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiModelsTaggableTaggableTaggableFromPodDataConstMeta,
        argValues: [data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelsTaggableTaggableTaggableFromPodDataConstMeta =>
      const TaskConstMeta(
        debugName: "taggable_from_pod_data",
        argNames: ["data"],
      );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_BibEntryEntity =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_BibEntryEntity =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EmbeddedFile =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EmbeddedFile =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EmbeddedTypescriptFiles =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EmbeddedTypescriptFiles =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterDb =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterDb =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterError =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterError =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterResultMdxNoteGroup =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterResultMdxNoteGroup =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterResultVecFrontMatterEntity =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecFrontMatterEntity;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterResultVecFrontMatterEntity =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecFrontMatterEntity;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FlusterResultVecMdxNoteEntity =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecMdxNoteEntity;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FlusterResultVecMdxNoteEntity =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecMdxNoteEntity;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MdxNoteSummary =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MdxNoteSummary =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ParsedEntity =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ParsedEntity =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_PathBuf =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_PathBuf =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Pod =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Pod =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Regex =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRegex;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Regex =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRegex;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SenderFlusterError =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SenderFlusterError =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError;

  @protected
  BibEntryEntity
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BibEntryEntityImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EmbeddedFile
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmbeddedFileImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EmbeddedTypescriptFiles
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmbeddedTypescriptFilesImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FlusterError
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterResultMdxNoteGroup
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterResultMdxNoteGroupImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FlusterResultVecFrontMatterEntity
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecFrontMatterEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterResultVecFrontMatterEntityImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FlusterResultVecMdxNoteEntity
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecMdxNoteEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterResultVecMdxNoteEntityImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  MdxNoteSummary
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MdxNoteSummaryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PathBuf
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PathBufImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Pod
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PodImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Regex
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRegex(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RegexImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterDb
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterDbImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MdxNoteSummary
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MdxNoteSummaryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterDb
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterDbImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MdxNoteSummary
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MdxNoteSummaryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ParsedEntity
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ParsedEntityImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SenderFlusterError
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SenderFlusterErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DateTime dco_decode_Chrono_Naive(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  BibEntryEntity
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BibEntryEntityImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EmbeddedFile
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmbeddedFileImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EmbeddedTypescriptFiles
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmbeddedTypescriptFilesImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FlusterDb
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterDbImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterError
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FlusterResultMdxNoteGroup
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterResultMdxNoteGroupImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FlusterResultVecFrontMatterEntity
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecFrontMatterEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterResultVecFrontMatterEntityImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FlusterResultVecMdxNoteEntity
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecMdxNoteEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterResultVecMdxNoteEntityImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  MdxNoteSummary
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MdxNoteSummaryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ParsedEntity
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ParsedEntityImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PathBuf
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PathBufImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Pod
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PodImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Regex
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRegex(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RegexImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SenderFlusterError
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SenderFlusterErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BibtexFile dco_decode_bibtex_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BibtexFile(
      path: dco_decode_opt_String(arr[0]),
      entries:
          dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
            arr[1],
          ),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  EmbeddedFile
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
      raw,
    );
  }

  @protected
  PathBuf
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
      raw,
    );
  }

  @protected
  Pod
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
      raw,
    );
  }

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Naive(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Chrono_Naive(raw);
  }

  @protected
  BibtexFile dco_decode_box_autoadd_bibtex_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_bibtex_file(raw);
  }

  @protected
  int dco_decode_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  SyncFilesystemDirectoryOptions
  dco_decode_box_autoadd_sync_filesystem_directory_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sync_filesystem_directory_options(raw);
  }

  @protected
  CrossLanguageFile dco_decode_cross_language_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CrossLanguageFile(
      path: dco_decode_String(arr[0]),
      noteType: dco_decode_note_type(arr[1]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FlusterDatabaseStatus dco_decode_fluster_database_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FlusterDatabaseStatus.values[raw as int];
  }

  @protected
  FrontMatter dco_decode_front_matter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return FrontMatter(
      data: dco_decode_front_matter_entity(arr[0]),
      tags: dco_decode_list_tag_creatable(arr[1]),
      subjects: dco_decode_list_tag_creatable(arr[2]),
      topics: dco_decode_list_tag_creatable(arr[3]),
    );
  }

  @protected
  FrontMatterEntity dco_decode_front_matter_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return FrontMatterEntity(
      id: dco_decode_i_32(arr[0]),
      title: dco_decode_String(arr[1]),
      summary: dco_decode_opt_String(arr[2]),
      mdxNoteId: dco_decode_i_32(arr[3]),
      userProvidedId: dco_decode_opt_String(arr[4]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  KeymapSectionId dco_decode_keymap_section_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeymapSectionId.values[raw as int];
  }

  @protected
  List<BibEntryEntity>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity,
        )
        .toList();
  }

  @protected
  List<FlusterError>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError,
        )
        .toList();
  }

  @protected
  List<MdxNoteSummary>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary,
        )
        .toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<TagCreatable> dco_decode_list_tag_creatable(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tag_creatable).toList();
  }

  @protected
  List<Taggable> dco_decode_list_taggable(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_taggable).toList();
  }

  @protected
  MathLabelOption dco_decode_math_label_option(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MathLabelOption.values[raw as int];
  }

  @protected
  MdxNoteCreatable dco_decode_mdx_note_creatable(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return MdxNoteCreatable(
      id: dco_decode_opt_box_autoadd_i_32(arr[0]),
      filePath: dco_decode_opt_String(arr[1]),
      rawBody: dco_decode_String(arr[2]),
      ctime: dco_decode_opt_box_autoadd_Chrono_Naive(arr[3]),
      mtime: dco_decode_opt_box_autoadd_Chrono_Naive(arr[4]),
      atime: dco_decode_opt_box_autoadd_Chrono_Naive(arr[5]),
    );
  }

  @protected
  MdxNoteGroup dco_decode_mdx_note_group(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return MdxNoteGroup(
      mdx: dco_decode_mdx_note_creatable(arr[0]),
      frontMatter: dco_decode_front_matter(arr[1]),
      tags: dco_decode_list_taggable(arr[2]),
    );
  }

  @protected
  NoteType dco_decode_note_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NoteType.values[raw as int];
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  EmbeddedFile?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
          raw,
        );
  }

  @protected
  PathBuf?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          raw,
        );
  }

  @protected
  Pod?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
          raw,
        );
  }

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Naive(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Naive(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_32(raw);
  }

  @protected
  List<FlusterError>?
  dco_decode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
          raw,
        );
  }

  @protected
  SettingPageId dco_decode_setting_page_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SettingPageId.values[raw as int];
  }

  @protected
  SummaryListQuery dco_decode_summary_list_query(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SummaryListQuery(
      mdxPerPage: dco_decode_u_16(arr[0]),
      mdxPage: dco_decode_u_16(arr[1]),
    );
  }

  @protected
  SummaryListResults dco_decode_summary_list_results(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SummaryListResults(
      mdxNotes:
          dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
            arr[0],
          ),
    );
  }

  @protected
  SupportedSyntaxLanguage dco_decode_supported_syntax_language(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SupportedSyntaxLanguage.values[raw as int];
  }

  @protected
  SyncFilesystemDirectoryOptions dco_decode_sync_filesystem_directory_options(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SyncFilesystemDirectoryOptions(
      dirPath: dco_decode_String(arr[0]),
      bibPath: dco_decode_opt_String(arr[1]),
      nThreads: dco_decode_u_32(arr[2]),
    );
  }

  @protected
  TagCreatable dco_decode_tag_creatable(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TagCreatable(
      id: dco_decode_opt_box_autoadd_i_32(arr[0]),
      value: dco_decode_String(arr[1]),
      tagType: dco_decode_String(arr[2]),
    );
  }

  @protected
  TagFromContentResult dco_decode_tag_from_content_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TagFromContentResult(
      tags: dco_decode_list_taggable(arr[0]),
      parsedContent: dco_decode_String(arr[1]),
    );
  }

  @protected
  Taggable dco_decode_taggable(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Taggable(
      value: dco_decode_String(arr[0]),
      tagType: dco_decode_taggable_type_enum(arr[1]),
    );
  }

  @protected
  TaggableTypeEnum dco_decode_taggable_type_enum(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TaggableTypeEnum.values[raw as int];
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  BibEntryEntity
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BibEntryEntityImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EmbeddedFile
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmbeddedFileImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EmbeddedTypescriptFiles
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmbeddedTypescriptFilesImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterError
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterResultMdxNoteGroup
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterResultMdxNoteGroupImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterResultVecFrontMatterEntity
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecFrontMatterEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterResultVecFrontMatterEntityImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterResultVecMdxNoteEntity
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecMdxNoteEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterResultVecMdxNoteEntityImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MdxNoteSummary
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MdxNoteSummaryImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PathBuf
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PathBufImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Pod
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PodImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Regex
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRegex(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RegexImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterDb
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterDbImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MdxNoteSummary
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MdxNoteSummaryImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterDb
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterDbImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MdxNoteSummary
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MdxNoteSummaryImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ParsedEntity
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ParsedEntityImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SenderFlusterError
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SenderFlusterErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DateTime sse_decode_Chrono_Naive(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner.toInt(), isUtc: true);
  }

  @protected
  BibEntryEntity
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BibEntryEntityImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EmbeddedFile
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmbeddedFileImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EmbeddedTypescriptFiles
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmbeddedTypescriptFilesImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterDb
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterDbImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterError
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterResultMdxNoteGroup
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterResultMdxNoteGroupImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterResultVecFrontMatterEntity
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecFrontMatterEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterResultVecFrontMatterEntityImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FlusterResultVecMdxNoteEntity
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecMdxNoteEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlusterResultVecMdxNoteEntityImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MdxNoteSummary
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MdxNoteSummaryImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ParsedEntity
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ParsedEntityImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PathBuf
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PathBufImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Pod
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PodImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Regex
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRegex(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RegexImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SenderFlusterError
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SenderFlusterErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BibtexFile sse_decode_bibtex_file(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_path = sse_decode_opt_String(deserializer);
    var var_entries =
        sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
          deserializer,
        );
    return BibtexFile(path: var_path, entries: var_entries);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  EmbeddedFile
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
      deserializer,
    ));
  }

  @protected
  PathBuf
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
      deserializer,
    ));
  }

  @protected
  Pod
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
      deserializer,
    ));
  }

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Naive(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Chrono_Naive(deserializer));
  }

  @protected
  BibtexFile sse_decode_box_autoadd_bibtex_file(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bibtex_file(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_32(deserializer));
  }

  @protected
  SyncFilesystemDirectoryOptions
  sse_decode_box_autoadd_sync_filesystem_directory_options(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sync_filesystem_directory_options(deserializer));
  }

  @protected
  CrossLanguageFile sse_decode_cross_language_file(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_path = sse_decode_String(deserializer);
    var var_noteType = sse_decode_note_type(deserializer);
    return CrossLanguageFile(path: var_path, noteType: var_noteType);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  FlusterDatabaseStatus sse_decode_fluster_database_status(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return FlusterDatabaseStatus.values[inner];
  }

  @protected
  FrontMatter sse_decode_front_matter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_data = sse_decode_front_matter_entity(deserializer);
    var var_tags = sse_decode_list_tag_creatable(deserializer);
    var var_subjects = sse_decode_list_tag_creatable(deserializer);
    var var_topics = sse_decode_list_tag_creatable(deserializer);
    return FrontMatter(
      data: var_data,
      tags: var_tags,
      subjects: var_subjects,
      topics: var_topics,
    );
  }

  @protected
  FrontMatterEntity sse_decode_front_matter_entity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_32(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_summary = sse_decode_opt_String(deserializer);
    var var_mdxNoteId = sse_decode_i_32(deserializer);
    var var_userProvidedId = sse_decode_opt_String(deserializer);
    return FrontMatterEntity(
      id: var_id,
      title: var_title,
      summary: var_summary,
      mdxNoteId: var_mdxNoteId,
      userProvidedId: var_userProvidedId,
    );
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  KeymapSectionId sse_decode_keymap_section_id(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return KeymapSectionId.values[inner];
  }

  @protected
  List<BibEntryEntity>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BibEntryEntity>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<FlusterError>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FlusterError>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<MdxNoteSummary>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MdxNoteSummary>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<TagCreatable> sse_decode_list_tag_creatable(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TagCreatable>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tag_creatable(deserializer));
    }
    return ans_;
  }

  @protected
  List<Taggable> sse_decode_list_taggable(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Taggable>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_taggable(deserializer));
    }
    return ans_;
  }

  @protected
  MathLabelOption sse_decode_math_label_option(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MathLabelOption.values[inner];
  }

  @protected
  MdxNoteCreatable sse_decode_mdx_note_creatable(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_filePath = sse_decode_opt_String(deserializer);
    var var_rawBody = sse_decode_String(deserializer);
    var var_ctime = sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var var_mtime = sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var var_atime = sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    return MdxNoteCreatable(
      id: var_id,
      filePath: var_filePath,
      rawBody: var_rawBody,
      ctime: var_ctime,
      mtime: var_mtime,
      atime: var_atime,
    );
  }

  @protected
  MdxNoteGroup sse_decode_mdx_note_group(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_mdx = sse_decode_mdx_note_creatable(deserializer);
    var var_frontMatter = sse_decode_front_matter(deserializer);
    var var_tags = sse_decode_list_taggable(deserializer);
    return MdxNoteGroup(
      mdx: var_mdx,
      frontMatter: var_frontMatter,
      tags: var_tags,
    );
  }

  @protected
  NoteType sse_decode_note_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return NoteType.values[inner];
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  EmbeddedFile?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  PathBuf?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  Pod?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Naive(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Naive(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<FlusterError>?
  sse_decode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  SettingPageId sse_decode_setting_page_id(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SettingPageId.values[inner];
  }

  @protected
  SummaryListQuery sse_decode_summary_list_query(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_mdxPerPage = sse_decode_u_16(deserializer);
    var var_mdxPage = sse_decode_u_16(deserializer);
    return SummaryListQuery(mdxPerPage: var_mdxPerPage, mdxPage: var_mdxPage);
  }

  @protected
  SummaryListResults sse_decode_summary_list_results(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_mdxNotes =
        sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
          deserializer,
        );
    return SummaryListResults(mdxNotes: var_mdxNotes);
  }

  @protected
  SupportedSyntaxLanguage sse_decode_supported_syntax_language(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SupportedSyntaxLanguage.values[inner];
  }

  @protected
  SyncFilesystemDirectoryOptions sse_decode_sync_filesystem_directory_options(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_dirPath = sse_decode_String(deserializer);
    var var_bibPath = sse_decode_opt_String(deserializer);
    var var_nThreads = sse_decode_u_32(deserializer);
    return SyncFilesystemDirectoryOptions(
      dirPath: var_dirPath,
      bibPath: var_bibPath,
      nThreads: var_nThreads,
    );
  }

  @protected
  TagCreatable sse_decode_tag_creatable(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_value = sse_decode_String(deserializer);
    var var_tagType = sse_decode_String(deserializer);
    return TagCreatable(id: var_id, value: var_value, tagType: var_tagType);
  }

  @protected
  TagFromContentResult sse_decode_tag_from_content_result(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tags = sse_decode_list_taggable(deserializer);
    var var_parsedContent = sse_decode_String(deserializer);
    return TagFromContentResult(
      tags: var_tags,
      parsedContent: var_parsedContent,
    );
  }

  @protected
  Taggable sse_decode_taggable(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_String(deserializer);
    var var_tagType = sse_decode_taggable_type_enum(deserializer);
    return Taggable(value: var_value, tagType: var_tagType);
  }

  @protected
  TaggableTypeEnum sse_decode_taggable_type_enum(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TaggableTypeEnum.values[inner];
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    BibEntryEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as BibEntryEntityImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    EmbeddedFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EmbeddedFileImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    EmbeddedTypescriptFiles self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EmbeddedTypescriptFilesImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    FlusterError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterErrorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup(
    FlusterResultMdxNoteGroup self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterResultMdxNoteGroupImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecFrontMatterEntity(
    FlusterResultVecFrontMatterEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterResultVecFrontMatterEntityImpl).frbInternalSseEncode(
        move: true,
      ),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecMdxNoteEntity(
    FlusterResultVecMdxNoteEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterResultVecMdxNoteEntityImpl).frbInternalSseEncode(
        move: true,
      ),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    MdxNoteSummary self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MdxNoteSummaryImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    PathBuf self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PathBufImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    Pod self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PodImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRegex(
    Regex self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RegexImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    FlusterDb self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterDbImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    MdxNoteSummary self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MdxNoteSummaryImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    FlusterDb self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterDbImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    MdxNoteSummary self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MdxNoteSummaryImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity(
    ParsedEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ParsedEntityImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
    SenderFlusterError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SenderFlusterErrorImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void sse_encode_Chrono_Naive(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(
      PlatformInt64Util.from(self.microsecondsSinceEpoch),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    BibEntryEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as BibEntryEntityImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    EmbeddedFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EmbeddedFileImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedTypescriptFiles(
    EmbeddedTypescriptFiles self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EmbeddedTypescriptFilesImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(
    FlusterDb self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterDbImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    FlusterError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterErrorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultMdxNoteGroup(
    FlusterResultMdxNoteGroup self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterResultMdxNoteGroupImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecFrontMatterEntity(
    FlusterResultVecFrontMatterEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterResultVecFrontMatterEntityImpl).frbInternalSseEncode(
        move: null,
      ),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterResultVecMdxNoteEntity(
    FlusterResultVecMdxNoteEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FlusterResultVecMdxNoteEntityImpl).frbInternalSseEncode(
        move: null,
      ),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    MdxNoteSummary self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MdxNoteSummaryImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedEntity(
    ParsedEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ParsedEntityImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    PathBuf self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PathBufImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    Pod self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PodImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRegex(
    Regex self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RegexImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderFlusterError(
    SenderFlusterError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SenderFlusterErrorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bibtex_file(BibtexFile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.path, serializer);
    sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
      self.entries,
      serializer,
    );
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    EmbeddedFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    PathBuf self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    Pod self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
      self,
      serializer,
    );
  }

  @protected
  void sse_encode_box_autoadd_Chrono_Naive(
    DateTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Naive(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bibtex_file(
    BibtexFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bibtex_file(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sync_filesystem_directory_options(
    SyncFilesystemDirectoryOptions self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sync_filesystem_directory_options(self, serializer);
  }

  @protected
  void sse_encode_cross_language_file(
    CrossLanguageFile self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.path, serializer);
    sse_encode_note_type(self.noteType, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_fluster_database_status(
    FlusterDatabaseStatus self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_front_matter(FrontMatter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_front_matter_entity(self.data, serializer);
    sse_encode_list_tag_creatable(self.tags, serializer);
    sse_encode_list_tag_creatable(self.subjects, serializer);
    sse_encode_list_tag_creatable(self.topics, serializer);
  }

  @protected
  void sse_encode_front_matter_entity(
    FrontMatterEntity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.id, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_opt_String(self.summary, serializer);
    sse_encode_i_32(self.mdxNoteId, serializer);
    sse_encode_opt_String(self.userProvidedId, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_keymap_section_id(
    KeymapSectionId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
    List<BibEntryEntity> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBibEntryEntity(
        item,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    List<FlusterError> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
        item,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
    List<MdxNoteSummary> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_tag_creatable(
    List<TagCreatable> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tag_creatable(item, serializer);
    }
  }

  @protected
  void sse_encode_list_taggable(List<Taggable> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_taggable(item, serializer);
    }
  }

  @protected
  void sse_encode_math_label_option(
    MathLabelOption self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_mdx_note_creatable(
    MdxNoteCreatable self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_32(self.id, serializer);
    sse_encode_opt_String(self.filePath, serializer);
    sse_encode_String(self.rawBody, serializer);
    sse_encode_opt_box_autoadd_Chrono_Naive(self.ctime, serializer);
    sse_encode_opt_box_autoadd_Chrono_Naive(self.mtime, serializer);
    sse_encode_opt_box_autoadd_Chrono_Naive(self.atime, serializer);
  }

  @protected
  void sse_encode_mdx_note_group(MdxNoteGroup self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_mdx_note_creatable(self.mdx, serializer);
    sse_encode_front_matter(self.frontMatter, serializer);
    sse_encode_list_taggable(self.tags, serializer);
  }

  @protected
  void sse_encode_note_type(NoteType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
    EmbeddedFile? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmbeddedFile(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    PathBuf? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
    Pod? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPod(
        self,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Naive(
    DateTime? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Chrono_Naive(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_32(self, serializer);
    }
  }

  @protected
  void
  sse_encode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
    List<FlusterError>? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterError(
        self,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_setting_page_id(
    SettingPageId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_summary_list_query(
    SummaryListQuery self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self.mdxPerPage, serializer);
    sse_encode_u_16(self.mdxPage, serializer);
  }

  @protected
  void sse_encode_summary_list_results(
    SummaryListResults self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(
      self.mdxNotes,
      serializer,
    );
  }

  @protected
  void sse_encode_supported_syntax_language(
    SupportedSyntaxLanguage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_sync_filesystem_directory_options(
    SyncFilesystemDirectoryOptions self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.dirPath, serializer);
    sse_encode_opt_String(self.bibPath, serializer);
    sse_encode_u_32(self.nThreads, serializer);
  }

  @protected
  void sse_encode_tag_creatable(TagCreatable self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_32(self.id, serializer);
    sse_encode_String(self.value, serializer);
    sse_encode_String(self.tagType, serializer);
  }

  @protected
  void sse_encode_tag_from_content_result(
    TagFromContentResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_taggable(self.tags, serializer);
    sse_encode_String(self.parsedContent, serializer);
  }

  @protected
  void sse_encode_taggable(Taggable self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.value, serializer);
    sse_encode_taggable_type_enum(self.tagType, serializer);
  }

  @protected
  void sse_encode_taggable_type_enum(
    TaggableTypeEnum self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class BibEntryEntityImpl extends RustOpaque implements BibEntryEntity {
  // Not to be used by end users
  BibEntryEntityImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BibEntryEntityImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BibEntryEntity,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BibEntryEntity,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_BibEntryEntityPtr,
  );
}

@sealed
class EmbeddedFileImpl extends RustOpaque implements EmbeddedFile {
  // Not to be used by end users
  EmbeddedFileImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EmbeddedFileImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_EmbeddedFile,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_EmbeddedFile,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_EmbeddedFilePtr,
  );
}

@sealed
class EmbeddedTypescriptFilesImpl extends RustOpaque
    implements EmbeddedTypescriptFiles {
  // Not to be used by end users
  EmbeddedTypescriptFilesImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EmbeddedTypescriptFilesImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_EmbeddedTypescriptFiles,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_EmbeddedTypescriptFiles,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_EmbeddedTypescriptFilesPtr,
  );
}

@sealed
class FlusterDbImpl extends RustOpaque implements FlusterDb {
  // Not to be used by end users
  FlusterDbImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FlusterDbImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FlusterDb,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterDb,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterDbPtr,
  );
}

@sealed
class FlusterErrorImpl extends RustOpaque implements FlusterError {
  // Not to be used by end users
  FlusterErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FlusterErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FlusterError,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterError,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlusterErrorPtr,
  );
}

@sealed
class FlusterResultMdxNoteGroupImpl extends RustOpaque
    implements FlusterResultMdxNoteGroup {
  // Not to be used by end users
  FlusterResultMdxNoteGroupImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FlusterResultMdxNoteGroupImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_FlusterResultMdxNoteGroup,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FlusterResultMdxNoteGroup,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FlusterResultMdxNoteGroupPtr,
  );
}

@sealed
class FlusterResultVecFrontMatterEntityImpl extends RustOpaque
    implements FlusterResultVecFrontMatterEntity {
  // Not to be used by end users
  FlusterResultVecFrontMatterEntityImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FlusterResultVecFrontMatterEntityImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_FlusterResultVecFrontMatterEntity,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FlusterResultVecFrontMatterEntity,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FlusterResultVecFrontMatterEntityPtr,
  );
}

@sealed
class FlusterResultVecMdxNoteEntityImpl extends RustOpaque
    implements FlusterResultVecMdxNoteEntity {
  // Not to be used by end users
  FlusterResultVecMdxNoteEntityImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FlusterResultVecMdxNoteEntityImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_FlusterResultVecMdxNoteEntity,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FlusterResultVecMdxNoteEntity,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FlusterResultVecMdxNoteEntityPtr,
  );
}

@sealed
class MdxNoteSummaryImpl extends RustOpaque implements MdxNoteSummary {
  // Not to be used by end users
  MdxNoteSummaryImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MdxNoteSummaryImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MdxNoteSummary,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MdxNoteSummary,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MdxNoteSummaryPtr,
  );

  DateTime? get atime => RustLib.instance.api
      .crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetAtime(
        that: this,
      );

  DateTime? get ctime => RustLib.instance.api
      .crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetCtime(
        that: this,
      );

  String? get filePath => RustLib.instance.api
      .crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetFilePath(
        that: this,
      );

  int get id => RustLib.instance.api
      .crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetId(
        that: this,
      );

  DateTime? get mtime => RustLib.instance.api
      .crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetMtime(
        that: this,
      );

  String get rawBody => RustLib.instance.api
      .crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorGetRawBody(
        that: this,
      );

  set atime(DateTime? atime) => RustLib.instance.api
      .crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetAtime(
        that: this,
        atime: atime,
      );

  set ctime(DateTime? ctime) => RustLib.instance.api
      .crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetCtime(
        that: this,
        ctime: ctime,
      );

  set filePath(String? filePath) => RustLib.instance.api
      .crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetFilePath(
        that: this,
        filePath: filePath,
      );

  set id(int id) => RustLib.instance.api
      .crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetId(
        that: this,
        id: id,
      );

  set mtime(DateTime? mtime) => RustLib.instance.api
      .crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetMtime(
        that: this,
        mtime: mtime,
      );

  set rawBody(String rawBody) => RustLib.instance.api
      .crateApiModelsMdxNoteMdxNoteSummaryMdxNoteSummaryAutoAccessorSetRawBody(
        that: this,
        rawBody: rawBody,
      );
}

@sealed
class ParsedEntityImpl extends RustOpaque implements ParsedEntity {
  // Not to be used by end users
  ParsedEntityImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ParsedEntityImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ParsedEntity,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ParsedEntity,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ParsedEntityPtr,
  );
}

@sealed
class PathBufImpl extends RustOpaque implements PathBuf {
  // Not to be used by end users
  PathBufImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PathBufImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PathBuf,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PathBuf,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PathBufPtr,
  );
}

@sealed
class PodImpl extends RustOpaque implements Pod {
  // Not to be used by end users
  PodImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PodImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Pod,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Pod,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PodPtr,
  );
}

@sealed
class RegexImpl extends RustOpaque implements Regex {
  // Not to be used by end users
  RegexImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RegexImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Regex,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Regex,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_RegexPtr,
  );
}

@sealed
class SenderFlusterErrorImpl extends RustOpaque implements SenderFlusterError {
  // Not to be used by end users
  SenderFlusterErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SenderFlusterErrorImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SenderFlusterError,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SenderFlusterError,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_SenderFlusterErrorPtr,
  );
}
