// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

#![allow(
non_camel_case_types,
unused,
non_snake_case,
clippy::needless_return,
clippy::redundant_closure_call,
clippy::redundant_closure,
clippy::useless_conversion,
clippy::unit_arg,
clippy::unused_unit,
clippy::double_parens,
clippy::let_and_return,
clippy::too_many_arguments,
clippy::match_single_binding,
clippy::clone_on_copy,
clippy::let_unit_value,
clippy::deref_addrof,
clippy::explicit_auto_deref,
clippy::borrow_deref_ref,
clippy::needless_borrow
)]

// Section: imports

use crate::api::global_actions::get_summary_list::get_summary_list::*;
use crate::api::fs::fs_setup::*;
use crate::api::global_actions::get_summary_list::summary_types::mdx_note_summary::*;use flutter_rust_bridge::{Handler, IntoIntoDart};
use flutter_rust_bridge::for_generated::{Lockable, transform_result_dco, Lifetimeable};
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, WriteBytesExt, ReadBytesExt};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
                    default_stream_sink_codec = SseCodec,
                    default_rust_opaque = RustOpaqueMoi,
                    default_rust_auto_opaque = RustAutoOpaqueMoi,
                );
                pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.9.0";
                pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -1938105847;
            

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__global_actions__get_summary_list__summary_types__mdx_note_summary__MdxNoteSummary_auto_accessor_get_id_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "MdxNoteSummary_auto_accessor_get_id", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MdxNoteSummary>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                    let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = Result::<_,()>::Ok(api_that_guard.id.clone())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__api__global_actions__get_summary_list__summary_types__mdx_note_summary__MdxNoteSummary_auto_accessor_get_summary_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "MdxNoteSummary_auto_accessor_get_summary", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MdxNoteSummary>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                    let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = Result::<_,()>::Ok(api_that_guard.summary.clone())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__api__global_actions__get_summary_list__summary_types__mdx_note_summary__MdxNoteSummary_auto_accessor_get_title_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "MdxNoteSummary_auto_accessor_get_title", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MdxNoteSummary>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                    let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = Result::<_,()>::Ok(api_that_guard.title.clone())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__api__global_actions__get_summary_list__summary_types__mdx_note_summary__MdxNoteSummary_auto_accessor_set_id_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "MdxNoteSummary_auto_accessor_set_id", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MdxNoteSummary>>>::sse_decode(&mut deserializer);
let api_id = <Thing>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                    let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                _ => unreachable!(),
            }
        }
        let mut api_that_guard = api_that_guard.unwrap();
 let output_ok = Result::<_,()>::Ok({ { api_that_guard.id = api_id; }; })?;   Ok(output_ok)
                })()) })
            }fn wire__crate__api__global_actions__get_summary_list__summary_types__mdx_note_summary__MdxNoteSummary_auto_accessor_set_summary_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "MdxNoteSummary_auto_accessor_set_summary", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MdxNoteSummary>>>::sse_decode(&mut deserializer);
let api_summary = <Option<String>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                    let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                _ => unreachable!(),
            }
        }
        let mut api_that_guard = api_that_guard.unwrap();
 let output_ok = Result::<_,()>::Ok({ { api_that_guard.summary = api_summary; }; })?;   Ok(output_ok)
                })()) })
            }fn wire__crate__api__global_actions__get_summary_list__summary_types__mdx_note_summary__MdxNoteSummary_auto_accessor_set_title_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "MdxNoteSummary_auto_accessor_set_title", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MdxNoteSummary>>>::sse_decode(&mut deserializer);
let api_title = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                    let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                _ => unreachable!(),
            }
        }
        let mut api_that_guard = api_that_guard.unwrap();
 let output_ok = Result::<_,()>::Ok({ { api_that_guard.title = api_title; }; })?;   Ok(output_ok)
                })()) })
            }fn wire__crate__api__fs__fs_utils__get_app_config_dir_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_app_config_dir", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, FileSystemError>((move || {
                     let output_ok = crate::api::fs::fs_utils::get_app_config_dir()?;   Ok(output_ok)
                })()) })
            }fn wire__crate__api__fs__fs_utils__get_app_data_dir_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_app_data_dir", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, FileSystemError>((move || {
                     let output_ok = crate::api::fs::fs_utils::get_app_data_dir()?;   Ok(output_ok)
                })()) })
            }fn wire__crate__api__data_interface__get_database_status__get_database_status_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_database_status", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse::<_, ()>((move || async move {
                         let output_ok = Result::<_,()>::Ok(crate::api::data_interface::get_database_status::get_database_status().await)?;   Ok(output_ok)
                    })().await)
                } })
            }fn wire__crate__api__global_actions__get_summary_list__get_summary_list__get_summary_list_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_summary_list", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_query = <crate::api::global_actions::get_summary_list::summary_list_query::SummaryListQuery>::sse_decode(&mut deserializer);
let api_db = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FlusterDb>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, DatabaseError>((move || async move {
                        let mut api_db_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_db, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_db_guard = Some(api_db.lockable_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_db_guard = api_db_guard.unwrap();
 let output_ok = crate::api::global_actions::get_summary_list::get_summary_list::get_summary_list(api_query, &*api_db_guard).await?;   Ok(output_ok)
                    })().await)
                } })
            }fn wire__crate__api__search__get_text_similarity__get_text_similarity_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_text_similarity", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <String>::sse_decode(&mut deserializer);
let api_b = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::search::get_text_similarity::get_text_similarity(api_a, api_b))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__api__initialize__on_desktop_init__on_desktop_init_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "on_desktop_init", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok({ crate::api::initialize::on_desktop_init::on_desktop_init(); })?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__api__fs__fs_utils__path_exists_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "path_exists", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_file_path = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::fs::fs_utils::path_exists(&api_file_path))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__api__fs__fs_setup__setup_file_system_for_data_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "setup_file_system_for_data", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::api::fs::fs_setup::setup_file_system_for_data())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__api__global_actions__parse_directory__sync_fs_directory__sync_filesystem_directory__sync_directory_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "sync_directory", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_dir_name = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, ()>((move || async move {
                         let output_ok = Result::<_,()>::Ok(crate::api::global_actions::parse_directory::sync_fs_directory::sync_filesystem_directory::sync_directory(api_dir_name).await)?;   Ok(output_ok)
                    })().await)
                } })
            }

// Section: related_funcs

flutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DatabaseError>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FileSystemError>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FlusterDb>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MdxNoteSummary>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Thing>);


// Section: dart2rust


                impl SseDecode for DatabaseError {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DatabaseError>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}
                }
                
                impl SseDecode for FileSystemError {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FileSystemError>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}
                }
                
                impl SseDecode for MdxNoteSummary {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MdxNoteSummary>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}
                }
                
                impl SseDecode for Thing {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Thing>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}
                }
                
                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DatabaseError>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);}
                }
                
                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FileSystemError>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);}
                }
                
                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FlusterDb>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);}
                }
                
                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MdxNoteSummary>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);}
                }
                
                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Thing>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);}
                }
                
                impl SseDecode for String {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();}
                }
                
                impl SseDecode for bool {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_u8().unwrap() != 0}
                }
                
                impl SseDecode for f64 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_f64::<NativeEndian>().unwrap()}
                }
                
                impl SseDecode for crate::api::data_interface::get_database_status::FlusterDatabaseStatus {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::data_interface::get_database_status::FlusterDatabaseStatus::NotInitialized,
1 => crate::api::data_interface::get_database_status::FlusterDatabaseStatus::ErrorEncountered,
2 => crate::api::data_interface::get_database_status::FlusterDatabaseStatus::NotConnected,
3 => crate::api::data_interface::get_database_status::FlusterDatabaseStatus::Connected,
4 => crate::api::data_interface::get_database_status::FlusterDatabaseStatus::AwaitingInitialPing,
            _ => unreachable!("Invalid variant for FlusterDatabaseStatus: {}", inner),
        };}
                }
                
                impl SseDecode for i32 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_i32::<NativeEndian>().unwrap()}
                }
                
                impl SseDecode for Vec<DatabaseError> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<DatabaseError>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for Vec<MdxNoteSummary> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<MdxNoteSummary>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for Vec<u8> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for Option<String> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<String>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for Option<FileSystemError> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<FileSystemError>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for Option<Vec<DatabaseError>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<Vec<DatabaseError>>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for crate::api::global_actions::get_summary_list::summary_list_query::SummaryListQuery {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {return crate::api::global_actions::get_summary_list::summary_list_query::SummaryListQuery{};}
                }
                
                impl SseDecode for crate::api::global_actions::get_summary_list::summary_list_result::SummaryListResults {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_mdxNotes = <Vec<MdxNoteSummary>>::sse_decode(deserializer);
return crate::api::global_actions::get_summary_list::summary_list_result::SummaryListResults{mdx_notes: var_mdxNotes};}
                }
                
                impl SseDecode for u8 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_u8().unwrap()}
                }
                
                impl SseDecode for () {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
                }
                
                impl SseDecode for usize {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _}
                }
                
                fn pde_ffi_dispatcher_primary_impl(
                    func_id: i32,port: flutter_rust_bridge::for_generated::MessagePort,
                    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
                    rust_vec_len: i32,
                    data_len: i32,
                )  {
                    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
                    match func_id {
                        9 => wire__crate__api__data_interface__get_database_status__get_database_status_impl(port, ptr, rust_vec_len, data_len),
10 => wire__crate__api__global_actions__get_summary_list__get_summary_list__get_summary_list_impl(port, ptr, rust_vec_len, data_len),
12 => wire__crate__api__initialize__on_desktop_init__on_desktop_init_impl(port, ptr, rust_vec_len, data_len),
14 => wire__crate__api__fs__fs_setup__setup_file_system_for_data_impl(port, ptr, rust_vec_len, data_len),
15 => wire__crate__api__global_actions__parse_directory__sync_fs_directory__sync_filesystem_directory__sync_directory_impl(port, ptr, rust_vec_len, data_len),
                        _ => unreachable!(),
                    }
                }
                
                fn pde_ffi_dispatcher_sync_impl(
                    func_id: i32,
                    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
                    rust_vec_len: i32,
                    data_len: i32,
                ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
                    match func_id {
                        1 => wire__crate__api__global_actions__get_summary_list__summary_types__mdx_note_summary__MdxNoteSummary_auto_accessor_get_id_impl(ptr, rust_vec_len, data_len),
2 => wire__crate__api__global_actions__get_summary_list__summary_types__mdx_note_summary__MdxNoteSummary_auto_accessor_get_summary_impl(ptr, rust_vec_len, data_len),
3 => wire__crate__api__global_actions__get_summary_list__summary_types__mdx_note_summary__MdxNoteSummary_auto_accessor_get_title_impl(ptr, rust_vec_len, data_len),
4 => wire__crate__api__global_actions__get_summary_list__summary_types__mdx_note_summary__MdxNoteSummary_auto_accessor_set_id_impl(ptr, rust_vec_len, data_len),
5 => wire__crate__api__global_actions__get_summary_list__summary_types__mdx_note_summary__MdxNoteSummary_auto_accessor_set_summary_impl(ptr, rust_vec_len, data_len),
6 => wire__crate__api__global_actions__get_summary_list__summary_types__mdx_note_summary__MdxNoteSummary_auto_accessor_set_title_impl(ptr, rust_vec_len, data_len),
7 => wire__crate__api__fs__fs_utils__get_app_config_dir_impl(ptr, rust_vec_len, data_len),
8 => wire__crate__api__fs__fs_utils__get_app_data_dir_impl(ptr, rust_vec_len, data_len),
11 => wire__crate__api__search__get_text_similarity__get_text_similarity_impl(ptr, rust_vec_len, data_len),
13 => wire__crate__api__fs__fs_utils__path_exists_impl(ptr, rust_vec_len, data_len),
                        _ => unreachable!(),
                    }
                }
                

// Section: rust2dart


                // Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for FrbWrapper<DatabaseError> {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<DatabaseError> {}

                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<DatabaseError>> for DatabaseError {
            fn into_into_dart(self) -> FrbWrapper<DatabaseError> {
                self.into()
            }
        }

                
                // Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for FrbWrapper<FileSystemError> {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<FileSystemError> {}

                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<FileSystemError>> for FileSystemError {
            fn into_into_dart(self) -> FrbWrapper<FileSystemError> {
                self.into()
            }
        }

                
                // Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for FrbWrapper<MdxNoteSummary> {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<MdxNoteSummary> {}

                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<MdxNoteSummary>> for MdxNoteSummary {
            fn into_into_dart(self) -> FrbWrapper<MdxNoteSummary> {
                self.into()
            }
        }

                
                // Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for FrbWrapper<Thing> {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Thing> {}

                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Thing>> for Thing {
            fn into_into_dart(self) -> FrbWrapper<Thing> {
                self.into()
            }
        }

                // Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::api::data_interface::get_database_status::FlusterDatabaseStatus {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {
                    Self::NotInitialized => 0.into_dart(),
Self::ErrorEncountered => 1.into_dart(),
Self::NotConnected => 2.into_dart(),
Self::Connected => 3.into_dart(),
Self::AwaitingInitialPing => 4.into_dart(),
                    _ => unreachable!(),
                }
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::data_interface::get_database_status::FlusterDatabaseStatus {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data_interface::get_database_status::FlusterDatabaseStatus> for crate::api::data_interface::get_database_status::FlusterDatabaseStatus {
            fn into_into_dart(self) -> crate::api::data_interface::get_database_status::FlusterDatabaseStatus {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::api::global_actions::get_summary_list::summary_list_query::SummaryListQuery {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    Vec::<u8>::new().into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::global_actions::get_summary_list::summary_list_query::SummaryListQuery {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::global_actions::get_summary_list::summary_list_query::SummaryListQuery> for crate::api::global_actions::get_summary_list::summary_list_query::SummaryListQuery {
            fn into_into_dart(self) -> crate::api::global_actions::get_summary_list::summary_list_query::SummaryListQuery {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::api::global_actions::get_summary_list::summary_list_result::SummaryListResults {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.mdx_notes.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::global_actions::get_summary_list::summary_list_result::SummaryListResults {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::global_actions::get_summary_list::summary_list_result::SummaryListResults> for crate::api::global_actions::get_summary_list::summary_list_result::SummaryListResults {
            fn into_into_dart(self) -> crate::api::global_actions::get_summary_list::summary_list_result::SummaryListResults {
                self
            }
        }

                impl SseEncode for DatabaseError {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DatabaseError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}
                }
                
                impl SseEncode for FileSystemError {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FileSystemError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}
                }
                
                impl SseEncode for MdxNoteSummary {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MdxNoteSummary>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}
                }
                
                impl SseEncode for Thing {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Thing>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}
                }
                
                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DatabaseError>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();
                <usize>::sse_encode(ptr, serializer);
                <i32>::sse_encode(size, serializer);}
                }
                
                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FileSystemError>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();
                <usize>::sse_encode(ptr, serializer);
                <i32>::sse_encode(size, serializer);}
                }
                
                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FlusterDb>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();
                <usize>::sse_encode(ptr, serializer);
                <i32>::sse_encode(size, serializer);}
                }
                
                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MdxNoteSummary>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();
                <usize>::sse_encode(ptr, serializer);
                <i32>::sse_encode(size, serializer);}
                }
                
                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Thing>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();
                <usize>::sse_encode(ptr, serializer);
                <i32>::sse_encode(size, serializer);}
                }
                
                impl SseEncode for String {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<Vec<u8>>::sse_encode(self.into_bytes(), serializer);}
                }
                
                impl SseEncode for bool {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_u8(self as _).unwrap();}
                }
                
                impl SseEncode for f64 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_f64::<NativeEndian>(self).unwrap();}
                }
                
                impl SseEncode for crate::api::data_interface::get_database_status::FlusterDatabaseStatus {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(match self {crate::api::data_interface::get_database_status::FlusterDatabaseStatus::NotInitialized => { 0 }
crate::api::data_interface::get_database_status::FlusterDatabaseStatus::ErrorEncountered => { 1 }
crate::api::data_interface::get_database_status::FlusterDatabaseStatus::NotConnected => { 2 }
crate::api::data_interface::get_database_status::FlusterDatabaseStatus::Connected => { 3 }
crate::api::data_interface::get_database_status::FlusterDatabaseStatus::AwaitingInitialPing => { 4 }
 _ => { unimplemented!(""); }}, serializer);}
                }
                
                impl SseEncode for i32 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_i32::<NativeEndian>(self).unwrap();}
                }
                
                impl SseEncode for Vec<DatabaseError> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <DatabaseError>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for Vec<MdxNoteSummary> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <MdxNoteSummary>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for Vec<u8> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <u8>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for Option<String> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <String>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for Option<FileSystemError> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <FileSystemError>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for Option<Vec<DatabaseError>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <Vec<DatabaseError>>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for crate::api::global_actions::get_summary_list::summary_list_query::SummaryListQuery {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
                }
                
                impl SseEncode for crate::api::global_actions::get_summary_list::summary_list_result::SummaryListResults {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<Vec<MdxNoteSummary>>::sse_encode(self.mdx_notes, serializer);}
                }
                
                impl SseEncode for u8 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_u8(self).unwrap();}
                }
                
                impl SseEncode for () {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
                }
                
                impl SseEncode for usize {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();}
                }
                


        
        
        #[cfg(not(target_family = "wasm"))]
        mod io {
            // This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.



// Section: imports

use crate::api::global_actions::get_summary_list::get_summary_list::*;
use crate::api::fs::fs_setup::*;
use crate::api::global_actions::get_summary_list::summary_types::mdx_note_summary::*;use flutter_rust_bridge::{Handler, IntoIntoDart};
use flutter_rust_bridge::for_generated::{Lockable, transform_result_dco, Lifetimeable};
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, WriteBytesExt, ReadBytesExt};use super::*;

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate_io!();

                #[unsafe(no_mangle)]
                pub extern "C" fn frbgen_fluster_native_interface_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabaseError(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DatabaseError>>::increment_strong_count(ptr as _);
                }
            

                #[unsafe(no_mangle)]
                pub extern "C" fn frbgen_fluster_native_interface_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabaseError(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DatabaseError>>::decrement_strong_count(ptr as _);
                }
            

                #[unsafe(no_mangle)]
                pub extern "C" fn frbgen_fluster_native_interface_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileSystemError(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FileSystemError>>::increment_strong_count(ptr as _);
                }
            

                #[unsafe(no_mangle)]
                pub extern "C" fn frbgen_fluster_native_interface_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileSystemError(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FileSystemError>>::decrement_strong_count(ptr as _);
                }
            

                #[unsafe(no_mangle)]
                pub extern "C" fn frbgen_fluster_native_interface_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FlusterDb>>::increment_strong_count(ptr as _);
                }
            

                #[unsafe(no_mangle)]
                pub extern "C" fn frbgen_fluster_native_interface_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FlusterDb>>::decrement_strong_count(ptr as _);
                }
            

                #[unsafe(no_mangle)]
                pub extern "C" fn frbgen_fluster_native_interface_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MdxNoteSummary>>::increment_strong_count(ptr as _);
                }
            

                #[unsafe(no_mangle)]
                pub extern "C" fn frbgen_fluster_native_interface_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MdxNoteSummary>>::decrement_strong_count(ptr as _);
                }
            

                #[unsafe(no_mangle)]
                pub extern "C" fn frbgen_fluster_native_interface_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Thing>>::increment_strong_count(ptr as _);
                }
            

                #[unsafe(no_mangle)]
                pub extern "C" fn frbgen_fluster_native_interface_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Thing>>::decrement_strong_count(ptr as _);
                }
            

        }
        #[cfg(not(target_family = "wasm"))]
        pub use io::*;
        
        
        /// cbindgen:ignore
        #[cfg(target_family = "wasm")]
        mod web {
            // This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.



// Section: imports

use crate::api::global_actions::get_summary_list::get_summary_list::*;
use crate::api::fs::fs_setup::*;
use crate::api::global_actions::get_summary_list::summary_types::mdx_note_summary::*;use flutter_rust_bridge::{Handler, IntoIntoDart};
use flutter_rust_bridge::for_generated::{Lockable, transform_result_dco, Lifetimeable};
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, WriteBytesExt, ReadBytesExt};use super::*;
                use flutter_rust_bridge::for_generated::wasm_bindgen;
                use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;


// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate_web!();

                #[wasm_bindgen]
                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabaseError(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DatabaseError>>::increment_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabaseError(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DatabaseError>>::decrement_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileSystemError(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FileSystemError>>::increment_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileSystemError(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FileSystemError>>::decrement_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FlusterDb>>::increment_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFlusterDb(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FlusterDb>>::decrement_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MdxNoteSummary>>::increment_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMdxNoteSummary(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MdxNoteSummary>>::decrement_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Thing>>::increment_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerThing(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Thing>>::decrement_strong_count(ptr as _);
                }
            

        }
        #[cfg(target_family = "wasm")]
        pub use web::*;
        